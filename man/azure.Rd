% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/azure.R
\name{azure}
\alias{azure}
\alias{azure_account}
\alias{azure_project}
\alias{azure_ls}
\alias{azure_cp}
\title{azure cloud storage interface}
\usage{
azure_account(tenant = "common", account = NULL, ...)

azure_project(
  subscription = NULL,
  resource_group = NULL,
  storage_account = NULL,
  tenant = NULL,
  account = NULL
)

azure_ls(source, ..., recursive = FALSE)

azure_cp(source, destination, ..., recursive = FALSE, parallel = TRUE)
}
\arguments{
\item{tenant}{character(1) tenant to be used during login. Default
value `"common"`.}

\item{account}{NULL or character(1) account name (typically email
address) for login.}

\item{...}{Additional arguments passed to `azure_project()`. The
default (no arguments) uses the default login and project.}

\item{subscription}{NULL or character(1) Azure subscription name.}

\item{resource_group}{NULL or character(1) Azure resource group name.}

\item{storage_account}{NULL or character(1) Azure storage account name.}

\item{source}{character(1). For `azure_ls(), a URI pointing to an
    Azure cloud resource. The URI has form
    `https://endpoint/container/path`, discussed in the "Details"
    section.

    For `azure_cp()`, either a URI or local file or directory path
    representing the original location of the object(s) to be
    copied.}

\item{recursive}{logical(1) peform the operation recursively?}

\item{destination}{character(1) a URI or local file (when `source`
is a single object) or folder representing the final location
object(s) are to be copied.}

\item{parallel}{logical(1) perform the copy in parallel?}
}
\value{
`azure_account()` is primarily intended for its side effect
    of recording the login credentials of the Azure account. It
    returns an authentication object documented in
    `?AzureRMR::az_rm`. The object can be used in workflows
    supported by the `AzureStor` and other packages.

`azure_project()` returns an object representing the
    requested storage account, and documented in
    `?AzureStor::az_storage`.

`azure_ls()` returns a character vector of object or
    partial object paths.
}
\description{
These functions interface with the Microsoft Azure
    cloud using a REST interface; no additional software is
    required.

`azure_account()`: authenticate or retrieve a
    previously authenticated azure login.

`azure_project()`: validate the subscription, resource
    group, and storage account to be used for storage access.

`azure_ls()`: list the content of the Azure storage
    endpoint, container and path implied by the `source` argument.

`azure_cp()`: copy files to or from Azure storage.
}
\details{
For `azure_account()`, the default behavior (without
    `account=`) opens a web browser prompting for login
    credentials.

`azure_project()` queries the Azure account for access to
    the corresponding `subscription`, `resource_group`, and
    `storage_account`; `tenant` and `account` determine the login
    credentials to use. Suitable values for these parameters can be
    discovered by browsing the Azure portal, or by using
    functionality in the `AzureStor` package. The default behavior
    (invoking `azure_project()` with no arguments) chooses the
    'first' login, subscription, resource group, and storage
    account returned by queries to underlying `AzureStor`
    objects. This behavior is only reliable when a single entity is
    available at each level.

`azure_ls()` parses a uri of form
    `https://endpoint/container/path` defining an Azure storage
    object. The uri is adorned with a shared access signature (SAS)
    obtained from the storage account identified by the `...`
    arguments. `path` is treated as a prefix used to filter all
    objects in the storage container; it does not have to fully
    resolve to an object. `recursive = FALSE` trims the return
    value to objects at the same `/`-delimited level as the path;
    these may be objects or simply a portion of the storage path
    (typically terminating in `/`). `recursive = TRUE) returns
    paths to all objects with prefix `path`.

`azure_cp()` supports movement of objects to or from the
    Azure cloud. When `source` is an Azure URI, the objects to be
    copied are determined by `azure_ls(source, ..., recursive =
    recursive)`; using `source = "https://endpoint/container"` and
    `recursive = TRUE` replicates the entire container content
    locally.
}
