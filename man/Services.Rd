% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Services.R, R/Leonardo.R, R/Terra.R, R/Rawls.R,
%   R/Dockstore.R, R/Gen3.R
\docType{data}
\name{Services}
\alias{Services}
\alias{.DollarNames.Service}
\alias{operations,Service-method}
\alias{schemas,Service-method}
\alias{show,Service-method}
\alias{Service-class}
\alias{empty_object}
\alias{operations}
\alias{schemas}
\alias{tags}
\alias{$,Service-method}
\alias{Leonardo}
\alias{Leonardo-class}
\alias{operations,Leonardo-method}
\alias{Terra}
\alias{Terra-class}
\alias{operations,Terra-method}
\alias{schemas,Terra-method}
\alias{Rawls}
\alias{Rawls-class}
\alias{operations,Rawls-method}
\alias{schemas,Rawls-method}
\alias{Dockstore}
\alias{Dockstore-class}
\alias{operations,Dockstore-method}
\alias{Gen3Fence}
\alias{Gen3Indexd}
\alias{Gen3Sheepdog}
\alias{Gen3Peregrine}
\title{RESTful services useful for AnVIL developers}
\usage{
empty_object

operations(x, ..., .deprecated = FALSE)

schemas(x)

tags(x, .tags, .deprecated = FALSE)

\S4method{$}{Service}(x, name)

Leonardo()

Terra()

Rawls()

Dockstore()

Gen3Fence()

Gen3Indexd()

Gen3Sheepdog()

Gen3Peregrine()
}
\arguments{
\item{x}{A `Service` instance, usually a singleton provided by the
package and documented on this page, e.g., `leonardo` or
`terra`.}

\item{...}{additional arguments passed to methods or, for
`operations,Service-method`, to the internal `get_operation()`
function.}

\item{.deprecated}{optional logical(1) include deprecated operations?}

\item{.tags}{optional character() of tags to use to filter operations.}

\item{name}{A symbol representing a defined operation, e.g.,
`leonardo$listClusters()`.}
}
\value{
`empty_object` returns a representation to be used as
    arguments in function calls expecting the empty json object
    `\{\}`.

`Leonardo()` creates the API of the Leonard container
    deployment service at
    https://notebooks.firecloud.org/api-docs.yaml.

`Terra()` creates the API of the Terra cloud computational
    environemnt at https://api.firecloud.org/.

`Rawls()` creates the API of the Rawls cloud computational
    environemnt at https://rawls.dsde-prod.broadinstitute.org.

`Dockstore()` represents the API of the Dockstore platform to
    share Docker-based tools in CWL or WDL or Nextflow at
    https://dockstore.org

`gen3_*` APIs are not fully implemented, because a service
    endpoint has not been identifiied.

    `Gen3Fence()` returns the authentication API at
    https://raw.githubusercontent.com/uc-cdis/fence/master/openapis/swagger.yaml

`Gen3Indexd()` returns the indexing service API documented at
    https://raw.githubusercontent.com/uc-cdis/indexd/master/openapis/swagger.yaml

`Gen3Sheepdog` returns the submission services API at
    https://raw.githubusercontent.com/uc-cdis/sheepdog/master/openapi/swagger.yml

`Gen3Peregrine` returns the graphQL query services API at
    https://raw.githubusercontent.com/uc-cdis/peregrine/master/openapis/swagger.yaml
}
\description{
RESTful services useful for AnVIL developers
}
\details{
When using `$` to select a service, some arguments appear
    in 'body' of the REST request. Specify these using the
    `.__body__=` argument, as illustrated for
    `createBillingProjectFull()`, below.
}
\examples{
empty_object

if (gcloud_exists()) {
    ## Arguments to be used as the 'body' (`.__body__=`) of a REST query
    terra <- Terra()
    terra$createBillingProjectFull       # 6 arguments...
    args(terra$createBillingProjectFull) # ... passed as `.__body__ = list(...)`
}
if (gcloud_exists())
    Leonardo()

if (gcloud_exists()) {
    terra <- Terra()
    tags(terra)
    tags(terra, "Billing")
}

if (gcloud_exists()) {
    rawls <- Rawls()
    tags(rawls)
    tags(rawls, "billing")
}

Dockstore()

}
\keyword{datasets}
