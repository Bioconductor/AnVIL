% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/avworkflow.R
\name{avworkflows}
\alias{avworkflows}
\alias{avworkflow_jobs}
\alias{avworkflow_files}
\alias{avworkflow_configuration_template}
\alias{avworkflow_configuration}
\alias{avworkflow_import_configuration}
\title{Workflow submissions and file outputs}
\usage{
avworkflows(namespace = avworkspace_namespace(), name = avworkspace_name())

avworkflow_jobs(namespace = avworkspace_namespace(), name = avworkspace_name())

avworkflow_files(submissionId = NULL, bucket = avbucket())

avworkflow_configuration_template()

avworkflow_configuration(
  configuration_namespace,
  configuration_name,
  namespace = avworkspace_namespace(),
  name = avworkspace_name()
)

avworkflow_import_configuration(
  config,
  namespace = avworkspace_namespace(),
  name = avworkspace_name()
)
}
\arguments{
\item{namespace}{character(1) AnVIL workspace namespace as returned
by, e.g., `avworkspace_namespace()`}

\item{name}{character(1) AnVIL workspace name as returned by, eg.,
`avworkspace_name()`.}

\item{submissionId}{a character() of workflow submission ids, or a
tibble with column \code{submissionId}, or NULL / missing. See
'Details'.}

\item{bucket}{character(1) name of the google bucket in which the
workflow products are available, as \verb{gs://...}. Usually the
bucket of the active workspace, returned by \code{avbucket()}.}

\item{configuration_namespace}{character(1) namespace of the
workflow. Often the same as the namespace of the
workspace. Discover configuration namespace and name
information from \code{avworkflows()}.}

\item{configuration_name}{character(1) name of the workflow, from
\code{avworkflows()}}

\item{config}{a named list describing the full configuration, e.g.,
created from editing the return value of
\code{avworkflow_configuration()} or
\code{avworkflow_configuration_template()}.}
}
\value{
\code{avworkflows()} returns a tibble. Each workflow is in a
'namespace' and has a 'name', as illustrated in the
example. Columns are
\itemize{
\item name: workflow name.
\item namespace: workflow namespace (often the same as the workspace namespace).
\item rootEntityType: name of the \code{avtable()} used to retrieve inputs.
\item methodRepoMethod.methodUri: source of the method, e.g., a dockstore URI.
\item methodRepoMethod.sourceRepo: source repository, e.g., dockstore.
\item methodRepoMethod.methodPath: path to method, e.g., a dockerstore
method might reference a github repository.
\item methodRepoMethod.methodVersion: the version of the method, e.g.,
'main' branch of a github repository.
}

\code{avworkflow_jobs()} returns a tibble, sorted by
\code{submissionDate}, with columns
\itemize{
\item submissionId character() job identifier from the workflow runner.
\item submitter character() AnVIL user id of individual submitting the job.
\item submissionDate POSIXct() date (in local time zone) of job submission.
\item status character() job status, with values 'Accepted' 'Evaluating'
'Submitting' 'Submitted' 'Aborting' 'Aborted' 'Done'
\item succeeded integer() number of workflows succeeding.
\item failed integer() number of workflows failing.
}

\code{avworkflow_files()} returns a tibble with columns
\itemize{
\item file: character() 'base name' of the file in the bucket.
\item workflow: character() name of the workflow the file is associated
with.
\item task: character() name of the task in the workflow that generated
the file.
\item path: charcter() full path to the file in the google bucket.
}

\code{avworkflow_configuration_template()} returns a list
providing a template for configuration lists, with the
following structure:
\itemize{
\item namespace character(1) configuration namespace.
\item name character(1) configuration name.
\item rootEntityType character(1) or missing. the name of the table
(from \code{avtables()}) containing the entitites referenced in
inputs, etc., by the keyword 'this.'
\item prerequisites named list (possibly empty) of prerequisites.
\item inputs named list (possibly empty) of inputs. Form of input
depends on method, and might include, e.g., a reference to a
field in a table referenced by \code{avtables()} or a character string
defining an input constant.
\item outputs named list (possibly empty) of outputs.
\item methodConfigVersion integer(1) identifier for the method
configuration.
\item methodRepoMethod named list describing the method, with
character(1) elements described in the return value for \code{avworkflows()}.
\itemize{
\item methodUri
\item sourceRepo
\item methodPath
\item methodVersion. The REST specification indicates that this has
type \code{integer}, but the documentation indicates either
\code{integer} or \code{string}.
}
\item deleted logical(1) of uncertain purpose.
}

The exact format of the configuration is important.\preformatted{One common problem is that a scalar character vector `"bar"` is
interpretted as a json 'array' `["bar"]` rather than a json
string `"bar"`. Enclose the string with
`jsonlite::unbox("bar")` in the configuration list if the
length 1 character vector in R is to be interpretted as a json
string.

A second problem is that an unquoted unboxed character string
`unbox("foo")` is required by AnVIL to be quoted. This is
reported as a warning() about invalid inputs or outputs, and
the solution is to provide a quoted string `unbox('"foo"')`.
}

\code{avworkflow_configuration()} returns a list structure
describing the configuration. See
\code{avworkflow_configuration_template()} for the structure of a
typical workflow.

\code{avworkflow_import_configuration()} returns an object
describing the updated configuration. The return value includes
invalid or unused elements of the \code{config} input. Invalid or
unused elements of \code{config} are also reported as a warning.
}
\description{
\code{avworkflows()} returns a tibble summarizing available
workflows.

\code{avworkflow_jobs()} returns a tibble summarizing
submitted workflow jobs for a namespace and name.

\code{avworkflow_files()} returns a tibble containing
information and file paths to workflow outputs.

\code{avworkflow_configuration_template()} returns a
template for defining workflow configurations. This template
can be used as a starting point for providing a custom
configuration.

\code{avworkflow_configuration()} returns a list structure
describing an existing workflow configuration.

\code{avworkflow_import_configuration()} updates an
existing configuration, e.g., changing inputs to the workflow.
}
\details{
For \code{avworkflow_files()}, the \code{submissionId} is the
identifier associated with the workflow job, and is present in
the return value of \code{avworkflow_jobs()}; the example
illustrates how the first row of \code{avworkflow_jobs()} (i.e., the
most recenltly completed workflow) can be used as input to
\code{avworkflow_files()}. When \code{submissionId} is not provided, the
return value is for the most recently submitted workflow of the
namespace and name of \code{avworkspace()}.
}
\examples{
if (gcloud_exists() && nzchar(avworkspace_name()))
    ## from within AnVIL
    avworkflows() \%>\% select(namespace, name)

if (gcloud_exists() && nzchar(avworkspace_name()))
    ## from within AnVIL
    avworkflow_jobs()

if (gcloud_exists() && nzchar(avworkspace_name())) {
    ## e.g., from within AnVIL
    avworkflow_jobs() \%>\%
    ## select most recent workflow
    head(1) \%>\%
    ## find paths to output and log files on the bucket
    avworkflow_files()
}

avworkflow_configuration_template()

\dontrun{
config <-
    avworkflow_configuration("bioconductor-anvil-rpci", "AnVILBulkRNASeq")
str(config)
}

\dontrun{
avworkflow_import_configuration(config)
}

}
