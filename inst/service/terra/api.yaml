{
  "swagger": "2.0",
  "info": {
    "description": "Genome analysis execution service.\n",
    "license": {
      "name": "BSD",
      "url": "http://opensource.org/licenses/BSD-3-Clause"
    },
    "termsOfService": "https://github.com/broadinstitute/firecloud-orchestration",
    "title": "FireCloud",
    "version": "0.1"
  },
  "basePath": "/",
  "paths": {
    "/api/billing": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "create project request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRawlsBillingProjectFullRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Created Billing Project in FireCloud and Google"
          },
          "400": {
            "description": "FireCloud billing user must be an admin of the billing account",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "You must be an admin of the google billing account",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "project already exists in FireCloud or google"
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile",
              "https://www.googleapis.com/auth/cloud-billing"
            ]
          }
        ],
        "tags": [
          "Billing"
        ],
        "operationId": "createBillingProjectFull",
        "summary": "create billing project in FireCloud and google",
        "x-codegen-request-body-name": "createProjectRequest",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/billing/{projectId}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/BillingProjectMember"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "You must be a project owner to view the members of a project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Billing"
        ],
        "operationId": "listBillingProjectMembers",
        "summary": "list members of billing project the caller owns",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/billing/{projectId}/{workbenchRole}/{email}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "role of user for project",
            "enum": [
              "user",
              "owner"
            ],
            "in": "path",
            "name": "workbenchRole",
            "required": true,
            "type": "string"
          },
          {
            "description": "email of user or group to remove",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Removed User From Billing Project"
          },
          "403": {
            "description": "You must be a project owner to add a user to a billing project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Billing"
        ],
        "operationId": "removeUserFromBillingProject",
        "summary": "remove user from billing project the caller owns",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "role of user for project",
            "enum": [
              "user",
              "owner"
            ],
            "in": "path",
            "name": "workbenchRole",
            "required": true,
            "type": "string"
          },
          {
            "description": "email of user or group to add",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Added User To Billing Project"
          },
          "403": {
            "description": "You must be a project owner to add a user to a billing project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Billing"
        ],
        "operationId": "addUserToBillingProject",
        "summary": "add user to billing project the caller owns",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/configurations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Namespace of configuration.",
            "in": "query",
            "name": "namespace",
            "type": "string"
          },
          {
            "description": "Name of configuration.",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Snapshot ID of configuration.",
            "format": "int32",
            "in": "query",
            "name": "snapshotId",
            "type": "integer"
          },
          {
            "description": "Snapshot comment of AgoraEntity",
            "in": "query",
            "name": "snapshotComment",
            "type": "string"
          },
          {
            "description": "Synopsis of configuration.",
            "in": "query",
            "name": "synopsis",
            "type": "string"
          },
          {
            "description": "Documentation of configuration.",
            "in": "query",
            "name": "documentation",
            "type": "string"
          },
          {
            "description": "Owner of configuration.",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Payload of configuration in WDL.",
            "in": "query",
            "name": "payload",
            "type": "string"
          },
          {
            "description": "Type of configuration - Task or Workflow",
            "in": "query",
            "name": "entityType",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of configurations.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ConfigurationResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "The configurations endpoint returns all configurations the requester\nhas permissions to read that fit the filter criteria.\n",
        "operationId": "listMethodRepositoryConfigurations",
        "summary": "List Method Repository configurations.\n",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Agora Entity",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ConfigurationQuery"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Method successfully added.",
            "schema": {
              "$ref": "#/definitions/ConfigurationResponse"
            }
          },
          "400": {
            "description": "Malformed input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Inserts a method configuration into the method repository and\ngives the owner full access permissions. Must supply a namespace,\nname, payload, and entityType. Cannot supply a snapshotId\n",
        "summary": "Add a configuration.",
        "x-codegen-request-body-name": "body",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/api/configurations/{namespace}/permissions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of the indicated configuration namespace ACL permissions",
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          },
          "403": {
            "description": "user does not have correct permissions to manage namespace permissions or the indicated namespace was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "getConfigNamespaceACL",
        "summary": "get ACL permissions on a Method Repository Configuration Namespace",
        "x-passthrough": false
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "the ACLs to upsert",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the indicated configuration ACL once the posted changes have been applied",
            "schema": {
              "items": {
                "$ref": "#/definitions/MethodConfigACL"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid content format"
          },
          "403": {
            "description": "User does not have correct permissions to manage namespace permissions or the indicated namespace was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "setConfigNamespaceACL",
        "summary": "set ACL permissions on a Method Repository Configuration Namespace",
        "x-codegen-request-body-name": "payload",
        "x-passthrough": false
      }
    },
    "/api/configurations/{namespace}/{name}/{snapshotId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An integer showing how many configurations were deleted. Should be 1.\n",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "default": {
            "description": "Error upon redaction",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Redacts a configuration and all of its associated configurations\n",
        "summary": "Redact a single configuration.",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Instead of returning a string under key payload, return a JSON object under key payloadObject",
            "in": "query",
            "name": "payloadAsObject",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Method Repository configuration detail",
            "schema": {
              "$ref": "#/definitions/ConfigurationResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "getMethodRepositoryConfiguration",
        "summary": "Get a Method Repository configuration",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/api/configurations/{namespace}/{name}/{snapshotId}/permissions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the indicated configuration ACL",
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "getConfigACL",
        "summary": "get ACL permissions on a Method Repository configuration",
        "x-passthrough": false
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "description": "the ACLs to upsert",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the indicated configuration ACL once the posted changes have been applied",
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "setConfigACL",
        "summary": "set ACL permissions on a Method Repository configuration",
        "x-codegen-request-body-name": "payload",
        "x-passthrough": false
      }
    },
    "/api/duos/consent/orsp/{orspId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Finds the consent for the provided ORSP ID.",
            "in": "path",
            "name": "orspId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Consent",
            "schema": {
              "$ref": "#/definitions/Consent"
            }
          },
          "400": {
            "description": "The consent associated with the provided name has not been approved."
          },
          "401": {
            "description": "Invalid authorization, must be a FireCloud user."
          },
          "404": {
            "description": "The consent associated with the provided name could not be found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "duosConsentOrspId",
        "summary": "Find Consent by ORSP ID",
        "x-passthrough": true,
        "x-passthrough-target": "consent"
      }
    },
    "/api/groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully listed group membership",
            "schema": {
              "items": {
                "$ref": "#/definitions/ManagedGroupAccessResponse"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "operationId": "getGroups",
        "summary": "get the list of the groups that the caller is a member of",
        "x-passthrough": false
      }
    },
    "/api/groups/{groupName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group name",
            "in": "path",
            "name": "groupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Deleted Group"
          },
          "403": {
            "description": "You must be an admin of this group in order to delete it",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Group is in use and cannot be deleted",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "operationId": "deleteGroup",
        "summary": "delete a group that the caller owns",
        "x-passthrough": false
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group name",
            "in": "path",
            "name": "groupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully loaded group",
            "schema": {
              "$ref": "#/definitions/ManagedGroupWithMembers"
            }
          },
          "403": {
            "description": "You must be an admin of this group in order to view members",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "operationId": "getGroup",
        "summary": "view the members in a group",
        "x-passthrough": false
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group name",
            "in": "path",
            "name": "groupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "201": {
            "description": "Successfully created group",
            "schema": {
              "$ref": "#/definitions/ManagedGroupWithMembers"
            }
          },
          "409": {
            "description": "Group already exists",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "operationId": "createGroup",
        "summary": "create a new group",
        "x-passthrough": false
      }
    },
    "/api/groups/{groupName}/requestAccess": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group name",
            "in": "path",
            "name": "groupName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully requested access"
          },
          "404": {
            "description": "Group not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "operationId": "requestAccessToGroup",
        "summary": "request access to a group",
        "x-passthrough": false
      }
    },
    "/api/groups/{groupName}/{role}/{email}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group name",
            "in": "path",
            "name": "groupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "role of user for group",
            "enum": [
              "member",
              "admin"
            ],
            "in": "path",
            "name": "role",
            "required": true,
            "type": "string"
          },
          {
            "description": "email of user or group to add",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Removed User From Group"
          },
          "403": {
            "description": "You must be an admin of this group in order to remove members",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "operationId": "removeUserFromGroup",
        "summary": "remove a user from a group the caller owns",
        "x-passthrough": false
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Group name",
            "in": "path",
            "name": "groupName",
            "required": true,
            "type": "string"
          },
          {
            "description": "role of user for group",
            "enum": [
              "member",
              "admin"
            ],
            "in": "path",
            "name": "role",
            "required": true,
            "type": "string"
          },
          {
            "description": "email of user or group to add",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Added User To Group"
          },
          "403": {
            "description": "You must be an admin of this group in order to add members",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "FireCloud Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Groups"
        ],
        "operationId": "addUserToGroup",
        "summary": "add a user to a group the caller owns",
        "x-passthrough": false
      }
    },
    "/api/inputsOutputs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of Method to look up",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Method Configuration inputs and outputs"
          },
          "400": {
            "description": "Method WDL can't be parsed"
          },
          "404": {
            "description": "No Such Method"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "getMethodIO",
        "summary": "Get information about a method's inputs and outputs",
        "x-codegen-request-body-name": "methodName",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/library/admin/reindex": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Indexing Success",
            "schema": {
              "$ref": "#/definitions/LibraryBulkIndexResponse"
            }
          },
          "204": {
            "description": "No published datasets exist to index",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Indexing Error",
            "schema": {
              "$ref": "#/definitions/LibraryBulkIndexResponse"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "reindexAll",
        "summary": "deletes and rebuilds the entire index of published library datasets\n",
        "x-passthrough": false
      }
    },
    "/api/library/groups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Names of the allowed groups",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "groups",
        "summary": "returns groups that can be used for discoverable datasets\n",
        "x-passthrough": false
      }
    },
    "/api/library/populate/suggest/{field}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "the property to get suggestions for",
            "in": "path",
            "name": "field",
            "required": true,
            "type": "string"
          },
          {
            "description": "the initial text to complete",
            "in": "query",
            "name": "q",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Field specific suggestions"
          },
          "400": {
            "description": "Bad Request, specified field that was not configured for suggestions",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "populateSuggest",
        "summary": "suggestions for populating a field\n",
        "x-passthrough": false
      }
    },
    "/api/library/search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Search terms and pagination parameters",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchTermRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Matching datasets"
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "FindDocuments",
        "summary": "searches published library datasets\n",
        "x-codegen-request-body-name": "searchParams",
        "x-passthrough": false
      }
    },
    "/api/library/suggest": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Search terms and pagination parameters",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SearchTermRef"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Search suggestions, with highlighting"
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "searchSuggest",
        "summary": "search suggestions\n",
        "x-codegen-request-body-name": "searchParams",
        "x-passthrough": false
      }
    },
    "/api/library/user/role/curator": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "are you a curator?",
            "schema": {
              "$ref": "#/definitions/CuratorStatus"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Profile"
        ],
        "description": "gets the curator status of a user",
        "operationId": "isCurator",
        "summary": "Query to see if you're a library curator",
        "x-passthrough": false
      }
    },
    "/api/library/{workspaceNamespace}/{workspaceName}/discoverableGroups": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The groups that can discover the dataset",
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          },
          "403": {
            "description": "Insufficient permissions",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "getDiscoverableGroups",
        "summary": "get the groups that can discover this library dataset\n",
        "x-passthrough": false
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Json array of group names, or empty array for no restrictions",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The workspace, after assigning groups to be able to discover the dataset",
            "schema": {
              "$ref": "#/definitions/Workspace"
            }
          },
          "400": {
            "description": "Invalid input",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "Insufficient permissions to change catalog permissions (must be owner or have grant or catalog with access to the workspace)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace, user or group not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "updateDiscoverableGroups",
        "summary": "set the groups that can discover this library dataset\n",
        "x-codegen-request-body-name": "discoverableGroups",
        "x-passthrough": false
      }
    },
    "/api/library/{workspaceNamespace}/{workspaceName}/metadata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/LibraryMetadataInput"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "getLibraryMetadata",
        "summary": "get the entire metadata for a library dataset\n",
        "x-passthrough": false
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Should the payload be validated? Validation is always enabled for published datasets and defaults to false for unpublished datasets.\n",
            "in": "query",
            "name": "validate",
            "type": "boolean"
          },
          {
            "description": "Library metadata",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LibraryMetadataInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Workspace"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "putLibraryMetadata",
        "summary": "put the entire metadata for a library dataset\n",
        "x-codegen-request-body-name": "libraryMetadataJson",
        "x-passthrough": false
      }
    },
    "/api/library/{workspaceNamespace}/{workspaceName}/published": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Workspace"
            }
          },
          "403": {
            "description": "You must be the workspace owner and library curator to unpublish a workspace from the library"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "unpublishLibraryWorkspace",
        "summary": "unpublish the workspace in the Library\n",
        "x-passthrough": false
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Workspace"
            }
          },
          "204": {
            "description": "Dataset already in requested published state"
          },
          "403": {
            "description": "You must be the workspace owner and library curator to publish a workspace to the library"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "publishLibraryWorkspace",
        "summary": "publish the workspace in the Library\n",
        "x-passthrough": false
      }
    },
    "/api/methods": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Namespace of method.",
            "in": "query",
            "name": "namespace",
            "type": "string"
          },
          {
            "description": "Name of method.",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Snapshot ID of method.",
            "format": "int32",
            "in": "query",
            "name": "snapshotId",
            "type": "integer"
          },
          {
            "description": "Snapshot comment of AgoraEntity",
            "in": "query",
            "name": "snapshotComment",
            "type": "string"
          },
          {
            "description": "Synopsis of method.",
            "in": "query",
            "name": "synopsis",
            "type": "string"
          },
          {
            "description": "Documentation of method.",
            "in": "query",
            "name": "documentation",
            "type": "string"
          },
          {
            "description": "Owner of method.",
            "in": "query",
            "name": "owner",
            "type": "string"
          },
          {
            "description": "Payload of method in WDL.",
            "in": "query",
            "name": "payload",
            "type": "string"
          },
          {
            "description": "Type of Method - Task or Workflow",
            "in": "query",
            "name": "entityType",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of methods.",
            "schema": {
              "items": {
                "$ref": "#/definitions/MethodResponse"
              },
              "type": "array"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "listMethodRepositoryMethods",
        "summary": "Lists Method Repository methods.\n",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Agora Entity",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MethodQuery"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Method successfully added.",
            "schema": {
              "$ref": "#/definitions/MethodResponse"
            }
          },
          "400": {
            "description": "Malformed input.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Inserts a method into the method repository and\ngives the owner full access permissions. Must supply a namespace\nname, payload, and entityType. Cannot supply a snapshotId\n",
        "summary": "Add a Method.",
        "x-codegen-request-body-name": "body",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/api/methods/definitions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of method definitions.",
            "schema": {
              "items": {
                "$ref": "#/definitions/MethodDefinition"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal error.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "List method definitions - i.e. unique namespace/name pairs - with counts\nof snapshots and associated configurations\n",
        "summary": "List method definitions",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/api/methods/permissions": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "method acls to upsert",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/MethodAclPair"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the indicated method namespace ACL permissions once the posted changes have been applied",
            "schema": {
              "items": {
                "$ref": "#/definitions/MethodAclPair"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Invalid content format"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "multiUpsertMethodsACL",
        "summary": "set ACLs for multiple methods in one call",
        "x-codegen-request-body-name": "methodacls",
        "x-passthrough": false
      }
    },
    "/api/methods/{namespace}/permissions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of indicated method namespace ACL permissions",
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          },
          "403": {
            "description": "user does not have correct permissions to manage namespace permissions or the indicated namespace was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "getMethodNamespaceACL",
        "summary": "get ACL permissions on a Method Repository Method Namespace",
        "x-passthrough": false
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "the ACLs to upsert",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the indicated method namespace ACL permissions once the posted changes have been applied",
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          },
          "400": {
            "description": "Invalid content format"
          },
          "403": {
            "description": "User does not have correct permissions to manage namespace permissions or the indicated namespace was not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "setMethodNamespaceACL",
        "summary": "set ACL permissions on a Method Repository Method Namespace",
        "x-codegen-request-body-name": "payload",
        "x-passthrough": false
      }
    },
    "/api/methods/{namespace}/{name}/configurations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Namespace of method.",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of method.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of configurations.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ConfigurationResponseWithPayloadObject"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Method not found."
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Given the namespace/name of a method, returns all configurations\nin the repository that reference that method\n",
        "summary": "List configurations associated with a method",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/api/methods/{namespace}/{name}/{snapshotId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An integer showing how many methods were deleted.\n",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          "default": {
            "description": "Error upon redaction",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Redacts a method and all of its associated configurations\n",
        "summary": "Redact a single method.",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Boolean to return only the payload of the method.",
            "in": "query",
            "name": "onlyPayload",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A single method.",
            "schema": {
              "$ref": "#/definitions/MethodResponse"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Returns one method that matches the namespace,\nname, and snapshotId.\n",
        "summary": "Find a single method.",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Should the source method be redacted?",
            "in": "query",
            "name": "redact",
            "type": "boolean"
          },
          {
            "description": "Agora Entity",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "documentation": {
                  "default": "BWA is a software package for mapping low-divergent sequences\nagainst a large reference genome, such as the human genome.\nIt consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n",
                  "description": "Documentation of the AgoraEntity.",
                  "type": "string"
                },
                "payload": {
                  "default": "task wc {File in_file command { cat ${in_file} | wc -l } output { Int count = read_int(stdout()) }}\n",
                  "description": "Payload of method -- must be in WDL format",
                  "type": "string"
                },
                "snapshotComment": {
                  "default": "Improve spline reticulation",
                  "description": "Snapshot comment of the AgoraEntity",
                  "type": "string"
                },
                "synopsis": {
                  "default": "Quickly aligns short nucleotide sequences.",
                  "description": "Synopsis which contains AgoraEntity.",
                  "type": "string"
                }
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Method successfully copied.",
            "schema": {
              "$ref": "#/definitions/MethodResponse"
            }
          },
          "206": {
            "description": "Method successfully copied, but error while redacting."
          },
          "400": {
            "description": "Malformed input."
          },
          "403": {
            "description": "Forbidden to create copy."
          },
          "404": {
            "description": "Source snapshot not found."
          },
          "500": {
            "description": "Internal error."
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Inserts a new snapshot of the method into the method repository and\ncopies access permissions from previous snapshot, optionally redacting\nthe source snapshot. Documentation, synopsis, and payload are the only\narguments considered for the new snapshot; everything else is copied\nfrom the source.\n",
        "summary": "Create a new snapshot of an existing Method.",
        "x-codegen-request-body-name": "body",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/api/methods/{namespace}/{name}/{snapshotId}/configurations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of configurations.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ConfigurationResponseWithPayloadObject"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Method not found.",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Method Repository"
        ],
        "description": "Returns all configurations that 1. have the exact same input and output\narguments as the supplied method snapshot, and 2. reference any snapshot\nof this method.\n",
        "summary": "List compatible configurations for this method snapshot",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/api/methods/{namespace}/{name}/{snapshotId}/permissions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "the indicated method ACL",
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "getMethodACL",
        "summary": "get ACL permissions on a Method Repository method",
        "x-passthrough": false
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Method Namespace",
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Name",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method snapshot ID",
            "in": "path",
            "name": "snapshotId",
            "required": true,
            "type": "string"
          },
          {
            "description": "the ACLs to upsert",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the indicated method ACL once the posted changes have been applied",
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "setMethodACL",
        "summary": "set ACL permissions on a Method Repository method",
        "x-codegen-request-body-name": "payload",
        "x-passthrough": false
      }
    },
    "/api/nih/callback": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "JWT from NIH login",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/JWTWrapper"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated NIH link",
            "schema": {
              "$ref": "#/definitions/NihStatus"
            }
          },
          "400": {
            "description": "Invalid or malformed JWT"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error saving NIH link to profile"
          }
        },
        "tags": [
          "NIH"
        ],
        "operationId": "NIHCallback",
        "summary": "Updates a user's NIH link from a JWT",
        "x-codegen-request-body-name": "jwt",
        "x-passthrough": false
      }
    },
    "/api/nih/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved NIH status",
            "schema": {
              "$ref": "#/definitions/NihStatus"
            }
          },
          "404": {
            "description": "linkedNihUsername key missing from status"
          },
          "500": {
            "description": "Internal server error retrieving NIH status"
          }
        },
        "tags": [
          "NIH"
        ],
        "operationId": "NIHStatus",
        "summary": "Retrieves info about a user's NIH link",
        "x-passthrough": false
      }
    },
    "/api/notifications/general": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/NotificationType"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Notifications"
        ],
        "operationId": "generalNotifications",
        "summary": "Gets the general notifications available",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/notifications/workspace/{workspaceNamespace}/{workspaceName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "workspace namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "workspace name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/NotificationType"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Notifications"
        ],
        "operationId": "workspaceNotifications",
        "summary": "Gets the notifications available for a workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/profile/billing": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/BillingProjectMembership"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "User Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "billing",
        "summary": "List billing projects for a user",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/profile/billing/{projectName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name of the billing project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/BillingProjectStatus"
            }
          },
          "404": {
            "description": "Project Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile"
        ],
        "description": "billing project status",
        "operationId": "billingProjectStatus",
        "summary": "billing project status",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/profile/billingAccounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/BillingAccount"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden - redirect to Google to enable appropriate scopes",
            "schema": {
              "$ref": "#/definitions/BillingAccountRedirect"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile",
              "https://www.googleapis.com/auth/cloud-billing"
            ]
          }
        ],
        "tags": [
          "Profile"
        ],
        "operationId": "billingAccounts",
        "summary": "List billing accounts for a user",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/profile/importstatus": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/UserImportPermission"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile",
          "Method Configurations"
        ],
        "operationId": "importStatus",
        "summary": "Check the user's ability to import a method config into a workspace",
        "x-passthrough": false
      }
    },
    "/api/profile/preferences": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The preferences to set as a Map[String, String]",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success (No Content)"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "updateProfile",
        "summary": "Update the preferences for the user",
        "x-codegen-request-body-name": "preferences",
        "x-passthrough": false
      }
    },
    "/api/profile/terra": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TerraPreference"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "setFCPreference",
        "summary": "Sets the current user's preference to use Legacy view, not Terra UI",
        "x-passthrough": false
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TerraPreference"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "getTerraPreference",
        "summary": "Returns the current user's preference for Terra UI vs. Legacy view",
        "x-passthrough": false
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/TerraPreference"
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "setTerraPreference",
        "summary": "Sets the current user's preference to use Terra UI, not Legacy view",
        "x-passthrough": false
      }
    },
    "/api/profile/trial": {
      "post": {
        "parameters": [
          {
            "default": "enroll",
            "description": "operation user can perform",
            "enum": [
              "enroll",
              "finalize"
            ],
            "in": "query",
            "name": "operation",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Success (No Content)"
          },
          "400": {
            "description": "Bad Request; invalid operation"
          },
          "403": {
            "description": "Forbidden; user must agree to terms to be enrolled"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Profile"
        ],
        "description": "* **Enroll:** starts an enabled user's trial and adds them to a billing project.\n* **Finalize:** concludes a terminated user's trial progress.\n",
        "operationId": "userTrial",
        "summary": "Enroll or Finalize yourself in FireCloud free trial",
        "x-passthrough": false
      }
    },
    "/api/proxyGroup/{email}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User email whose proxy group to retrieve",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "user proxy group",
            "schema": {
              "type": "string"
            }
          },
          "404": {
            "description": "user not found"
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "getProxyGroup",
        "summary": "Returns the proxy group email for the current user",
        "x-passthrough": true,
        "x-passthrough-target": "sam"
      }
    },
    "/api/refresh-token-status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object"
            }
          }
        },
        "tags": [
          "OAuth"
        ],
        "description": "This API is a deprecated noop. Previously, it returned the status of the current user's refresh token.\nSince refresh tokens are no longer used in the back end, this API is now hardcoded to respond as if the\nuser's refresh token is valid. This API may be removed in a future release.\n",
        "operationId": "getRefreshTokenStatus",
        "summary": "deprecated",
        "x-passthrough": false
      }
    },
    "/api/sharelog/sharees": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "ShareLog"
        ],
        "description": "Get a list of users with whom current user has shared a Workspace.\n",
        "operationId": "getSharees",
        "summary": "Get a list of users with whom current user has shared a Workspace.\n",
        "x-passthrough": false
      }
    },
    "/api/staticNotebooks/convert": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Notebook ipynb file",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Static Notebooks"
        ],
        "description": "Convert a Notebook ipynb file to a static HTML representation\n",
        "operationId": "convertNotebook",
        "summary": "Convert a Notebook ipynb file to a static HTML representation\n",
        "x-codegen-request-body-name": "notebook",
        "x-passthrough": true,
        "x-passthrough-target": "calhoun"
      }
    },
    "/api/storage/{bucket}/{object}": {
      "get": {
        "parameters": [
          {
            "description": "Name of the bucket in which the object resides.",
            "in": "path",
            "name": "bucket",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the object. (be sure to urlencode)",
            "in": "path",
            "name": "object",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Storage"
        ],
        "description": "Returns a subset of the metadata available from Google's Cloud Storage JSON API, as well as the estimated egress\ncharge to North America. If you need the full metadata, we recommend you use Google's API directly; see\nhttps://cloud.google.com/storage/docs/json_api/v1/objects/get.\n",
        "operationId": "getMetadata",
        "summary": "Get metadata about an object stored in GCS.\n",
        "x-passthrough": false
      }
    },
    "/api/submissions/queueStatus": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowQueueStatusResponse"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Submissions"
        ],
        "description": "List workflow counts by queueing state",
        "operationId": "workflowQueueStatus",
        "summary": "workflow queue status",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/template": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of Method to use for template",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Method Configuration template"
          },
          "400": {
            "description": "Method WDL can't be parsed"
          },
          "404": {
            "description": "No Such Method"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Repository"
        ],
        "operationId": "createMethodTemplate",
        "summary": "Create a Method Configuration template from a Method",
        "x-codegen-request-body-name": "methodName",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/user/billing/{projectName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name of the billing project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully delete billing project"
          },
          "400": {
            "description": "Project cannot be deleted because it contains workspaces.",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "You must be a project owner to delete billing project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Billing"
        ],
        "description": "delete billing project",
        "operationId": "deleteBillingProject",
        "summary": "delete billing project"
      }
    },
    "/api/womtool/{version}/describe": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "Cromwell API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "The workflow source file to submit for execution. Either workflow source or workflow url is required.",
            "format": "binary",
            "in": "formData",
            "name": "workflowSource",
            "type": "string"
          },
          {
            "description": "URL which points to the workflow. Either workflow source or workflow url is required.",
            "in": "formData",
            "name": "workflowUrl",
            "type": "string"
          },
          {
            "description": "JSON or YAML file containing the inputs as an object.",
            "format": "binary",
            "in": "formData",
            "name": "workflowInputs",
            "type": "string"
          },
          {
            "description": "The workflow language for the file you submitted. Cromwell currently supports WDL and CWL.",
            "enum": [
              "WDL",
              "CWL"
            ],
            "in": "formData",
            "name": "workflowType",
            "type": "string"
          },
          {
            "description": "The specification version for the workflow language being used. For WDL, Cromwell currently supports draft-2 and 1.0. For CWL, Cromwell currently supports v1.0.",
            "enum": [
              "draft-2",
              "1.0",
              "v1.0"
            ],
            "in": "formData",
            "name": "workflowTypeVersion",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow description.",
            "schema": {
              "$ref": "#/definitions/WorkflowDescription"
            }
          }
        },
        "tags": [
          "Womtool"
        ],
        "operationId": "describe",
        "summary": "Machine-readable description of a workflow, including inputs and outputs",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/api/workflows/{version}/callcaching/diff": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow Id of the first workflow",
            "in": "query",
            "name": "workflowA",
            "required": true,
            "type": "string"
          },
          {
            "description": "Call FQN (including workflow name) of the first call",
            "in": "query",
            "name": "callA",
            "required": true,
            "type": "string"
          },
          {
            "description": "Index of the first call",
            "in": "query",
            "name": "indexA",
            "type": "number"
          },
          {
            "description": "Workflow Id of the second workflow",
            "in": "query",
            "name": "workflowB",
            "required": true,
            "type": "string"
          },
          {
            "description": "Call FQN (including workflow name) of the second call",
            "in": "query",
            "name": "callB",
            "required": true,
            "type": "string"
          },
          {
            "description": "Index of the second call",
            "in": "query",
            "name": "indexB",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowCacheDiffResponse"
            }
          },
          "400": {
            "description": "Malformed query parameters"
          },
          "404": {
            "description": "No matching cache entry"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "CromIAM Workflows (for Admin)"
        ],
        "summary": "Return the hash differential between two calls"
      }
    },
    "/api/workflows/{version}/query": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Returns only workflows with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.\n",
            "format": "date-time",
            "in": "query",
            "name": "start",
            "type": "string"
          },
          {
            "description": "Returns only workflows with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.\n",
            "format": "date-time",
            "in": "query",
            "name": "end",
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "Returns only workflows with the specified status.  If specified multiple times, returns workflows in any of the specified statuses.\n",
            "enum": [
              "Submitted",
              "Running",
              "Aborting",
              "Failed",
              "Succeeded",
              "Aborted"
            ],
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "status",
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Returns only workflows with the specified name.  If specified multiple times, returns workflows with any of the specified names.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "name",
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "Returns only workflows with the specified workflow id.  If specified multiple times, returns workflows with any of the specified workflow ids.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "id",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowQueryResponse"
            }
          },
          "403": {
            "description": "Malformed Request"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "CromIAM Workflows (for Job Manager)"
        ],
        "summary": "Query workflows by start dates, end dates, names, ids, or statuses.",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Same query parameters as GET /query endpoint, submitted as a json list. Example: [{\"status\":\"Success\"},{\"status\":\"Failed\"}]\n",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkflowQueryParameter"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowQueryResponse"
            }
          },
          "400": {
            "description": "Malformed Request"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "CromIAM Workflows (for Job Manager)"
        ],
        "summary": "Query workflows by start dates, end dates, names, ids, or statuses.",
        "x-codegen-request-body-name": "parameters",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/api/workflows/{version}/{id}/abort": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowStatusResponse"
            }
          },
          "400": {
            "description": "Malformed Workflow ID"
          },
          "403": {
            "description": "Workflow in terminal status"
          },
          "404": {
            "description": "Workflow ID Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "CromIAM Workflows (for Job Manager)"
        ],
        "summary": "Abort a workflow based on workflow id",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/api/workflows/{version}/{id}/backend/metadata/{backendId}": {
      "get": {
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Backend ID, must be a job that is part of the workflow",
            "in": "path",
            "name": "backendId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request, format is backend dependent"
          },
          "404": {
            "description": "Workflow or Backend ID Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "CromIAM Workflows (for Job Manager)"
        ],
        "summary": "Get backend (e.g. PAPI) metadata for a job",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workflows/{version}/{id}/labels": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Custom labels submitted as JSON. Example: {\"key-1\":\"value-1\",\"key-2\":\"value-2\"}\n",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/LabelsResponse"
            }
          },
          "400": {
            "description": "Malformed Workflow ID"
          },
          "404": {
            "description": "Workflow ID Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "CromIAM Workflows (for Job Manager)"
        ],
        "summary": "Add new labels or update values for existing label keys by workflow id.",
        "x-codegen-request-body-name": "labels",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/api/workflows/{version}/{id}/metadata": {
      "get": {
        "produces": [
          "application/json",
          "workflowName",
          "calls",
          "outputs",
          "id",
          "inputs",
          "submission",
          "status",
          "end",
          "start"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "When specified key(s) to include from the metadata. Matches any key starting with the value. May not be used with excludeKey.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "includeKey",
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "When specified key(s) to exclude from the metadata. Matches any key starting with the value. May not be used with includeKey.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "excludeKey",
            "type": "array"
          },
          {
            "default": false,
            "description": "When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.\n",
            "in": "query",
            "name": "expandSubWorkflows",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "examples": {
              "calls": {
                "example.analysis": [
                  {
                    "backend": "Local",
                    "end": "2015-12-11T21:53:23.000Z",
                    "executionEvents": [],
                    "executionStatus": "Done",
                    "inputs": {
                      "str": "x"
                    },
                    "outputs": {
                      "out": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-0/a.txt"
                    },
                    "returnCode": 0,
                    "shardIndex": 0,
                    "start": "2015-12-11T21:53:22.000Z",
                    "stderr": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-0/stderr",
                    "stdout": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-0/stdout"
                  },
                  {
                    "backend": "Local",
                    "end": "2015-12-11T21:53:23.000Z",
                    "executionEvents": [],
                    "executionStatus": "Done",
                    "inputs": {
                      "str": "x"
                    },
                    "outputs": {
                      "out": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-1/a.txt"
                    },
                    "returnCode": 0,
                    "shardIndex": 1,
                    "start": "2015-12-11T21:53:22.000Z",
                    "stderr": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-1/stderr",
                    "stdout": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-1/stdout"
                  },
                  {
                    "backend": "Local",
                    "end": "2015-12-11T21:53:23.000Z",
                    "executionEvents": [],
                    "executionStatus": "Done",
                    "inputs": {
                      "str": "x"
                    },
                    "outputs": {
                      "out": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-2/a.txt"
                    },
                    "returnCode": 0,
                    "shardIndex": 2,
                    "start": "2015-12-11T21:53:22.000Z",
                    "stderr": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-2/stderr",
                    "stdout": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-2/stdout"
                  },
                  {
                    "backend": "Local",
                    "end": "2015-12-11T21:53:23.000Z",
                    "executionEvents": [],
                    "executionStatus": "Done",
                    "inputs": {
                      "str": "x"
                    },
                    "outputs": {
                      "out": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-3/a.txt"
                    },
                    "returnCode": 0,
                    "shardIndex": 3,
                    "start": "2015-12-11T21:53:22.000Z",
                    "stderr": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-3/stderr",
                    "stdout": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-3/stdout"
                  }
                ],
                "example.gather": [
                  {
                    "backend": "Local",
                    "end": "2015-12-11T21:53:23.000Z",
                    "executionEvents": [
                      {
                        "description": "execution event - only one in this call, some calls might have none!",
                        "endTime": "2015-12-11T21:53:23.000Z",
                        "startTime": "2015-12-11T21:53:23.000Z"
                      }
                    ],
                    "executionStatus": "Done",
                    "inputs": {
                      "array": "analysis.out"
                    },
                    "outputs": {
                      "str": "_one_\n_two_\n_three_\n_four_"
                    },
                    "returnCode": 0,
                    "shardIndex": -1,
                    "start": "2015-12-11T21:53:23.000Z",
                    "stderr": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-gather/stderr",
                    "stdout": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-gather/stdout"
                  }
                ],
                "example.prepare": [
                  {
                    "backend": "Local",
                    "end": "2015-12-11T21:53:22.000Z",
                    "executionEvents": [],
                    "executionStatus": "Done",
                    "inputs": {},
                    "outputs": {
                      "array": [
                        "one",
                        "two",
                        "three",
                        "four"
                      ]
                    },
                    "returnCode": 0,
                    "shardIndex": -1,
                    "start": "2015-12-11T21:53:21.000Z",
                    "stderr": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-prepare/stderr",
                    "stdout": "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-prepare/stdout"
                  }
                ]
              },
              "end": "2015-12-11T21:53:23.000Z",
              "id": "e552029e-4b9a-48e9-b11f-6e5d6d0dccc4",
              "inputs": {
                "blah.grep.pattern": "v",
                "blah.ls.pattern": "./",
                "blah2.cat.asdf": "gs://cromwell-root/blah/c0c116ef-aac6-4029-8d0a-70d86b17c843/call-ls/job.stdout.txt",
                "blah2.grep.pattern": "h",
                "test.hello.name": "chris"
              },
              "outputs": {
                "example.analysis.out": [
                  "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-0/a.txt",
                  "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-1/a.txt",
                  "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-2/a.txt",
                  "/cromwell/cromwell-executions/example/e552029e-4b9a-48e9-b11f-6e5d6d0dccc4/call-analysis/shard-3/a.txt"
                ],
                "example.gather.str": "_one_\n_two_\n_three_\n_four_",
                "example.prepare.array": [
                  "one",
                  "two",
                  "three",
                  "four"
                ]
              },
              "start": "2015-12-11T21:53:21.000Z",
              "status": "Succeeded",
              "submission": "2015-12-11T21:53:21.000Z",
              "workflowName": "example"
            },
            "schema": {
              "$ref": "#/definitions/WorkflowMetadataResponse"
            }
          },
          "400": {
            "description": "Malformed Workflow ID"
          },
          "404": {
            "description": "Workflow ID Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "CromIAM Workflows (for Job Manager)"
        ],
        "summary": "Query for workflow and call-level metadata for a specified workflow",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/api/workflows/{version}/{id}/releaseHold": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowStatusResponse"
            }
          },
          "400": {
            "description": "Malformed Workflow ID"
          },
          "403": {
            "description": "Malformed Request"
          },
          "404": {
            "description": "Workflow ID Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "CromIAM Workflows (for Admin)"
        ],
        "summary": "Request Cromwell to release the hold on a workflow. It will switch the status of a workflow from ‘On Hold’ to ‘Submitted’ so it can be picked for running. For instance this might be necessary in cases where you have submitted a workflow with workflowOnHold = true.",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/api/workspaces": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "When specified, include only these keys in the response payload and exclude other keys. Accepts a comma-delimited list of values. To include a nested key, specify the key's path using a dot delimiter; for example, to include {\"workspace\": {\"attributes\": {}}}, specify \"workspace.attributes\". Legal values are any first-level key in the response, any first-level key inside the {\"workspace\": {}} object, and any first-level key inside the {\"workspace\": {\"attributes\": {}}} object. If omitted, will return the full response payload.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "List of workspaces.",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceListResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Unrecognized query parameters"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "listWorkspaces",
        "summary": "Lists workspaces.\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "New workspace information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkspaceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceDetails"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Unable to create bucket for workspace"
          },
          "409": {
            "description": "Workspace by that name already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "createWorkspace",
        "summary": "Create workspace",
        "x-codegen-request-body-name": "workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Query string",
            "in": "query",
            "name": "q",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "list of all tags used in FireCloud",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceTag"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Rawls Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "description": "list of all tags used in FireCloud and their associated frequencies",
        "operationId": "getTags",
        "summary": "Get all tags used in FireCloud (for autocomplete)\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}": {
      "delete": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Request Accepted"
          },
          "403": {
            "description": "User does not have correct permissions to delete a published workspace"
          },
          "404": {
            "description": "Workspace does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "deleteWorkspace",
        "summary": "Delete workspace",
        "x-passthrough": false
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "When specified, include only these keys in the response payload and exclude other keys. Accepts a comma-delimited list of values. To include a nested key, specify the key's path using a dot delimiter; for example, to include {\"workspace\": {\"attributes\": {}}}, specify \"workspace.attributes\". Legal values are any first-level key in the response, any first-level key inside the {\"workspace\": {}} object, and any first-level key inside the {\"workspace\": {\"attributes\": {}}} object. If omitted, will return the full response payload.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceResponse"
            }
          },
          "400": {
            "description": "Unrecognized query parameters"
          },
          "404": {
            "description": "Workspace does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "description": "Get a single workspace's details, optionally filtered to only the specified fields. See additional GET methods in this section to retrieve additional details about the workspace. For instance, this API only returns the workspace's owners; use the GET .../acl method to retrieve the full list of all users at all permission levels.\n",
        "operationId": "getWorkspace",
        "summary": "Get workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/accessInstructions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/ManagedGroupAccessInstructions"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "getWorkspaceAccessInstructions",
        "summary": "Get workspace access instructions (if any)",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/acl": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceACL"
            }
          },
          "400": {
            "description": "Can't retrieve ACL for workspace"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "getWorkspaceAcl",
        "summary": "Get workspace ACL",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "true to invite unregistered users, false to ignore",
            "in": "query",
            "name": "inviteUsersNotFound",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Series of ACL updates for workspace",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceACLUpdate"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceACLUpdateResponseList"
            }
          },
          "400": {
            "description": "Can't set ACL for workspace"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "updateWorkspaceACL",
        "summary": "Update workspace ACL",
        "x-codegen-request-body-name": "aclUpdates",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/bucketOptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceBucketOptions"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Workspaces"
        ],
        "description": "Returns metadata about the workspace bucket.",
        "operationId": "getWorkspaceBucketOptions",
        "summary": "Get metadata about the workspace bucket",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/bucketUsage": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "getBucketUsage",
        "summary": "Get bucket usage",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/catalog": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceCatalog"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Workspaces"
        ],
        "description": "Get catalog permissions for a workspace",
        "operationId": "getCatalog",
        "summary": "Get workspace catalog permission",
        "x-passthrough": false
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Series of Catalog updates for workspace",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceCatalog"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceCatalogUpdateResponseList"
            }
          },
          "403": {
            "description": "Insufficient permissions to change catalog permissions (must be owner or admin)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace, user or group not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Workspaces"
        ],
        "description": "Set catalog permisisons for a workspace",
        "operationId": "updateCatalog",
        "summary": "Update catalog permission",
        "x-codegen-request-body-name": "catalogUpdates",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/checkBucketReadAccess": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "403": {
            "description": "Insufficient permissions to access workspace bucket"
          },
          "404": {
            "description": "Workspace Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "description": "Read a workspace bucket",
        "operationId": "readBucket",
        "summary": "Read workspace bucket",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/checkIamActionWithLock/{samActionName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sam action",
            "in": "path",
            "name": "samActionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User can perform the given action on the workspace"
          },
          "403": {
            "description": "User may not perform the given action on the workspace (including if it doesn't exist)"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Workspaces"
        ],
        "description": "Check to see if the user has the given action on a workspace in Sam. Takes into account if the workspace is locked too.",
        "operationId": "checkIamActionWithLock",
        "summary": "Check IAM action with lock",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/clone": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Cloned workspace information",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkspaceRequestClone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceDetails"
            }
          },
          "400": {
            "description": "Unable to create resources for workspace"
          },
          "404": {
            "description": "Source workspace not found"
          },
          "409": {
            "description": "Destination workspace already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "cloneWorkspace",
        "summary": "Clone Workspace",
        "x-codegen-request-body-name": "workspace",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of entity types in workspace"
          },
          "404": {
            "description": "Workspace does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "getEntityTypes",
        "summary": "List of entity types in a workspace\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/copy": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Destination Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Destination Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "true to link new entities to existing entities, false to fail instead of link",
            "in": "query",
            "name": "linkExistingEntities",
            "type": "boolean"
          },
          {
            "description": "Entities to Copy",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/EntityCopyResponse"
            }
          },
          "404": {
            "description": "Source Workspace or source entities does not exist"
          },
          "409": {
            "description": "There are conflicts in your copy operation. Retry with the paramater linkExistingEntities=true to link all soft conflicts to the entities that already exist in your workspace.",
            "schema": {
              "$ref": "#/definitions/EntityCopyResponse"
            }
          },
          "422": {
            "description": "Destination workspace must match source's authorization domain, if the source has one"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "copyEntities",
        "summary": "Copy entities from one workspace to another\n",
        "x-codegen-request-body-name": "body",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entities to delete",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/EntityID"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Not all Entities exist",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Cannot create dangling references when deleting Entities - must specify whole set",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntityID"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "deleteEntities",
        "summary": "Bulk delete entities from a workspace",
        "x-codegen-request-body-name": "body",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of entities in workspace",
            "schema": {
              "items": {
                "$ref": "#/definitions/Entity"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace or entity type does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "getEntities",
        "summary": "List of entities in a workspace\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}/tsv": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "comma separated list of ordered attribute names to be in downloaded tsv",
            "in": "query",
            "name": "attributeNames",
            "type": "string"
          },
          {
            "description": "firecloud (default) or flexible",
            "in": "query",
            "name": "model",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace entities of specified type in TSV format",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "404": {
            "description": "Workspace or entity type does not exist"
          },
          "414": {
            "description": "URI length exceeds the configured limit of 2048 characters.\nPlease use the POST endpoint when it's necessary to supply a large number of attribute names.\n"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "downloadEntitiesTSV",
        "summary": "TSV file containing workspace entities of the specified type\n",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}/{entityName}": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Name",
            "in": "path",
            "name": "entityName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Workspace or Entity does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "getEntity",
        "summary": "Get entity in a workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Name",
            "in": "path",
            "name": "entityName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update operations for attributes",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AttributeUpdateOperationArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity updated",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "400": {
            "description": "Attribute does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "User does not have permission to update attributes in the namespace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Entities"
        ],
        "description": "Update an entity",
        "operationId": "update_entity",
        "summary": "Update entity in a workspace",
        "x-codegen-request-body-name": "attributeUpdateJson",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}/{entityName}/evaluate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Name",
            "in": "path",
            "name": "entityName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Expression",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid entity expression"
          },
          "404": {
            "description": "Workspace or Entity does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "evaluateEntityExpression",
        "summary": "Evaluate entity expression",
        "x-codegen-request-body-name": "expression",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities_with_type": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of entities"
          },
          "404": {
            "description": "Workspace or entities not found."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "getEntitiesWithType",
        "summary": "List of entities in a workspace with type and attribute information\n",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entityQuery/{entityType}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number, 1-indexed (default 1)",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "integer"
          },
          {
            "default": 10,
            "description": "Page size (default 10)",
            "format": "int32",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "type": "integer"
          },
          {
            "default": "name",
            "description": "Sort field (default \"name\")",
            "in": "query",
            "name": "sortField",
            "type": "string"
          },
          {
            "default": "asc",
            "description": "Sort direction (asc or desc, default asc)",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sortDirection",
            "type": "string"
          },
          {
            "description": "Filter terms",
            "in": "query",
            "name": "filterTerms",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of entities in workspace",
            "schema": {
              "$ref": "#/definitions/EntityQueryResponse"
            }
          },
          "404": {
            "description": "Workspace or entity type does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "entityQuery",
        "summary": "Paginated query for entities in a workspace",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/exportAttributesTSV": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace attributes in TSV format",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "404": {
            "description": "Workspace does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "exportAttributesTSV",
        "summary": "TSV file containing workspace attributes\n",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/flexibleImportEntities": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "Destination Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Destination Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "A valid TSV import file",
            "format": "binary",
            "in": "formData",
            "name": "entities",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Source Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "flexibleImportEntities",
        "summary": "Import entities from a tsv file",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/importAttributesTSV": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "A valid TSV import file",
            "format": "binary",
            "in": "formData",
            "name": "attributes",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Source Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "importAttributesTSV",
        "summary": "Import workspace attributes from a tsv file",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/importBagit": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON object containing bagit URL",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BagitRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Source Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "importBagit",
        "summary": "Import entity TSVs from a zipped [BagIt](https://tools.ietf.org/html/draft-kunze-bagit-14) directory, whose payload contains two files - participants.tsv and samples.tsv",
        "x-codegen-request-body-name": "bagitImportRequest",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/importEntities": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "description": "Destination Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Destination Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "A valid TSV import file",
            "format": "binary",
            "in": "formData",
            "name": "entities",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Source Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "operationId": "importEntities",
        "summary": "Import entities from a tsv file",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/importPFB": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "When true, filters to only those imports currently in progress",
            "in": "query",
            "name": "running_only",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/PFBStatusResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "description": "Lists all imports for this workspace, optionally filtered to only those imports currently in progress\n",
        "operationId": "listImportPFBJobs",
        "summary": "List PFB import jobs in this workspace",
        "x-passthrough": false
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "JSON object containing PFB URL",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PFBRequest"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/PFBResponse"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized access to Workspace"
          },
          "403": {
            "description": "Forbidden access to Workspace"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "description": "This API will return a jobID representing the import operation. The import itself will continue asynchronously in the background.\n",
        "operationId": "importPFB",
        "summary": "Import PFB data from an [Avro](https://avro.apache.org/) file",
        "x-codegen-request-body-name": "pfbImportRequest",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/importPFB/{jobId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "job ID of the import to check",
            "in": "path",
            "name": "jobId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/PFBStatusResponse"
            }
          },
          "404": {
            "description": "workspace or job ID not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "description": "This API will return status of an import jobID. The jobID was returned from a previous import request.\n",
        "operationId": "importPFBStatus",
        "summary": "Report status on a PFB import job",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/lock": {
      "put": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "Successful Request"
          },
          "403": {
            "description": "Not Owner"
          },
          "404": {
            "description": "Workspace Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "lockWorkspace",
        "summary": "Lock Workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/method_configs/copyFromMethodRepo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration to Copy",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyConfigurationIngest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful request"
          },
          "404": {
            "description": "Source method configuration does not exist"
          },
          "409": {
            "description": "Destination method configuration by that name already exists"
          },
          "422": {
            "description": "Error parsing source method configuration"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations",
          "Method Repository"
        ],
        "operationId": "copyFromMethodRepo",
        "summary": "Copy a Method Repository Configuration into a workspace",
        "x-codegen-request-body-name": "configToCopy",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/method_configs/copyToMethodRepo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration to Copy",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublishConfigurationIngest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful request"
          },
          "404": {
            "description": "Source method configuration does not exist"
          },
          "409": {
            "description": "Destination method configuration by that name already exists"
          },
          "422": {
            "description": "Error parsing source method configuration"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations",
          "Method Repository"
        ],
        "operationId": "copyToMethodRepo",
        "summary": "Copy a Method Config in a workspace to the Method Repository",
        "x-codegen-request-body-name": "configToCopy",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/method_configs/{configNamespace}/{configName}": {
      "delete": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request"
          },
          "404": {
            "description": "Workspace or Method Configuration not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations"
        ],
        "operationId": "deleteWorkspaceMethodConfig",
        "summary": "Delete a method configuration in a workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "404": {
            "description": "Workspace or Method Configuration not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations"
        ],
        "operationId": "getWorkspaceMethodConfig",
        "summary": "Get a method configuration in a workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Config to Update",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationIngest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "403": {
            "description": "Invalid attribute namespace(s) in outputs"
          },
          "404": {
            "description": "Workspace or Method Configuration not found"
          },
          "409": {
            "description": "Method configuration with the new name already exists in the workspace"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations"
        ],
        "description": "Update method configuration.\nUpdates and moves the method configuration at the URI to the location in the request body.\nThe location in the URI may be the same as the location in the request body.\nIf the location in the request body matches the location in the URI, it is overwritten.\nIf the location in the request body is different to the location in the URI, and there is a method config already at that location, 409 is returned.\n",
        "operationId": "updateWorkspaceMethodConfig",
        "summary": "Update a method configuration in a workspace",
        "x-codegen-request-body-name": "body",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Config to Update",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConfigurationIngest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful"
          },
          "400": {
            "description": "Method configuration name and namespace in URI do not match those in JSON body"
          },
          "404": {
            "description": "Workspace or Method Configuration not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations"
        ],
        "description": "Add or overwrite a method configuration in a workspace.\nThe method configuration name and namespace in the URI must match the values in the JSON.\n",
        "operationId": "overwriteWorkspaceMethodConfig",
        "summary": "Add or overwrite a method configuration in a workspace",
        "x-codegen-request-body-name": "body",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/method_configs/{configNamespace}/{configName}/rename": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Config Rename",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfigRename"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful request"
          },
          "400": {
            "description": "Workspace details in payload don't match the URI"
          },
          "404": {
            "description": "Workspace or Method Configuration not found"
          },
          "409": {
            "description": "Method Configuration with that name already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations"
        ],
        "operationId": "renameWorkspaceMethodConfig",
        "summary": "Rename a method configuration in a workspace",
        "x-codegen-request-body-name": "rename",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/method_configs/{configNamespace}/{configName}/validate": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/ValidatedMethodConfiguration"
            }
          },
          "404": {
            "description": "Workspace or Method Configuration does not exist"
          },
          "500": {
            "description": "Rawls Internal Error"
          }
        },
        "tags": [
          "Method Configurations"
        ],
        "operationId": "validate_method_configuration",
        "summary": "get syntax validation information for a method configuration",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Configs for all repos, not just Agora",
            "in": "query",
            "name": "allRepos",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "List of Method Configurations"
          },
          "404": {
            "description": "Workspace does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations",
          "Workspaces"
        ],
        "description": "List method configurations in a workspace. By default, only Agora method configs are returned. To return configs for all repos, specify `allRepos` to be `true`.\n\n#### Expanded discussion on the methodRepoMethod field\n\nThis endpoint returns method references to Agora in the format\n```\n\"methodRepoMethod\": {\n  \"methodNamespace\": \"namespace\",\n  \"methodName\": \"name\",\n  \"methodVersion\": 1,\n  \"sourceRepo\": \"agora\",\n  \"methodUri\": \"agora://namespace/name/1\"\n}\n```\nand for Dockstore in the format\n```\n\"methodRepoMethod\": {\n  \"methodPath\": \"path\",\n  \"methodVersion\": \"version\",\n  \"sourceRepo\": \"agora\",\n  \"methodUri\": \"dockstore://path/version\"\n}\n```\nIf you are only working with Agora methods, the fields `\"sourceRepo\"` and `\"methodUri\"` can be considered informational and do not need to be round-tripped (see the corresponding `POST /api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs` for more details).\n",
        "operationId": "listWorkspaceMethodConfigs",
        "summary": "List method configurations in a workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration contents",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NewMethodConfigIngest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request"
          },
          "404": {
            "description": "Workspace not found"
          },
          "409": {
            "description": "Method Configuration already exists"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations",
          "Workspaces"
        ],
        "description": "Create method configurations.\n#### Expanded discussion on the methodRepoMethod field\nTo create a method config for an Agora method, `\"sourceRepo\": \"agora\"` is optional; the following is sufficient:\n```\n\"methodRepoMethod\": {\n  \"methodNamespace\": \"namespace\",\n  \"methodName\": \"name\",\n  \"methodVersion\": 1\n}\n```\nTo create a method config for a Dockstore method, `\"sourceRepo\": \"dockstore\"` is required:\n```\n\"methodRepoMethod\": {\n  \"sourceRepo\": \"dockstore\",\n  \"methodPath\": \"path\",\n  \"methodVersion\": \"version\"\n}\n```\nYou may also use the URI on its own to create a config referencing any supported repo (currently Agora and Dockstore):\n```\n\"methodRepoMethod\": {\n  \"methodUri\": \"agora://namespace/name/1\"\n}\n```\n```\n\"methodRepoMethod\": {\n  \"methodUri\": \"dockstore://path/version\"\n}\n```\nThe system is specified to check for a URI first before falling back to the legacy fields. Unsupported repos will return a 400 Bad Request.\n",
        "operationId": "postWorkspaceMethodConfig",
        "summary": "Create a Method Configuration in a workspace",
        "x-codegen-request-body-name": "methodConfigJson",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/permissionReport": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Users and/or configs on which to report, both optional",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PermissionReportRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Permission Report",
            "schema": {
              "$ref": "#/definitions/PermissionReport"
            }
          },
          "404": {
            "description": "Workspace does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Method Configurations",
          "Workspaces"
        ],
        "operationId": "workspacePermissionReport",
        "summary": "Retrieve user permissions for the workspace and the workspace's method references",
        "x-codegen-request-body-name": "reportInput",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/sendChangeNotification": {
      "post": {
        "parameters": [
          {
            "description": "workspace namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "workspace name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Insufficient permisions to send notification on this workspace"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Workspaces"
        ],
        "operationId": "changedWorkspaceNotification",
        "summary": "Sends notifications for change to workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/setAttributes": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "New attribute values, as Map[String, Attribute]. WARNING! This should not be used to change library metadata (republish will not happen). Use UpdateAttributes in the library section",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "additionalProperties": {
                "type": "object"
              },
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Malformed request"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "setAttributes",
        "summary": "Set attributes on a workspace.\n",
        "x-codegen-request-body-name": "newAttributes",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/storageCostEstimate": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Storage cost estimate"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "getStorageCostEstimate",
        "summary": "Calculate an estimate of the monthly storage cost for the workspace bucket",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of submissions"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Submissions"
        ],
        "operationId": "listSubmissions",
        "summary": "List submissions.\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Post Submission",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmissionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Expression eval failed or entities are not of type required by method config"
          },
          "404": {
            "description": "Method Configuration or Entity not found"
          },
          "409": {
            "description": "Method Configuration failed to resolve input expressions with the supplied Entity"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Submissions"
        ],
        "operationId": "createSubmission",
        "summary": "Create a submission.\n",
        "x-codegen-request-body-name": "submission",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Description of a submission.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Validation Response",
            "schema": {
              "$ref": "#/definitions/SubmissionValidationReport"
            }
          },
          "400": {
            "description": "Expression evaluation failed or entities are not of type required by method config",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace, Method Configuration or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "502": {
            "description": "Trouble talking to Agora",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Submissions"
        ],
        "description": "Validate expression syntax for a submission",
        "operationId": "validateSubmission",
        "summary": "Validate submission",
        "x-codegen-request-body-name": "submission",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}": {
      "delete": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission ID",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Aborted successfully"
          },
          "404": {
            "description": "Submission not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Submissions"
        ],
        "operationId": "abortSubmission",
        "summary": "abort a submission\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission ID",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/Submission"
            }
          },
          "404": {
            "description": "Submission not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Submissions"
        ],
        "operationId": "monitorSubmission",
        "summary": "Monitor submission status\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}/workflows/{workflowId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission ID",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "When specified, return only these keys in the response. Matches any key in the response, including within nested blocks. May not be used with excludeKey.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "includeKey",
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "When specified, omit these keys from the response. Matches any key in the response, including within nested blocks. May not be used with includeKey.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "excludeKey",
            "type": "array"
          },
          {
            "default": false,
            "description": "When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.\n",
            "in": "query",
            "name": "expandSubWorkflows",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "404": {
            "description": "Workspace, Submission or Workflow not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Submissions"
        ],
        "description": "Get call-level metadata for workflow",
        "operationId": "workflowMetadata",
        "summary": "Get call-level metadata for workflow",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}/workflows/{workflowId}/cost": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission ID",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowCost"
            }
          },
          "404": {
            "description": "Workspace, Submission or Workflow not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Submissions"
        ],
        "operationId": "workflowCostInSubmission",
        "summary": "Retrieve workflow cost, if available.\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}/workflows/{workflowId}/outputs": {
      "get": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission ID",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow ID",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get workflow outputs"
          },
          "404": {
            "description": "Workspace, Submission or Workflow not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Submissions"
        ],
        "operationId": "workflowOutputsInSubmission",
        "summary": "Get workflow outputs.\n",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissionsCount": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/SubmissionsCountResponse"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "tags": [
          "Submissions"
        ],
        "description": "Counts all submissions run in the workspace, grouped by status. Returns a map of status:count.",
        "operationId": "countSubmissions",
        "summary": "Count submissions by status",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/tags": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of tags.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace tags",
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "deleteWorkspaceTags",
        "summary": "Remove the user-supplied tags from the workspace.\n",
        "x-codegen-request-body-name": "tags",
        "x-passthrough": false
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace tags",
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "getWorkspaceTags",
        "summary": "Get the tags for this workspace.\n",
        "x-passthrough": false
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of tags.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace tags",
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "patchWorkspaceTags",
        "summary": "Add tags to the workspace without modifying pre-existing tags.\n",
        "x-codegen-request-body-name": "tags",
        "x-passthrough": false
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "List of tags.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace tags",
            "schema": {
              "$ref": "#/definitions/StringArray"
            }
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "putWorkspaceTags",
        "summary": "Replace all tags for this workspace with the user input.\n",
        "x-codegen-request-body-name": "tags",
        "x-passthrough": false
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/unlock": {
      "put": {
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified"
          },
          "204": {
            "description": "Successful Request"
          },
          "403": {
            "description": "Not Owner"
          },
          "404": {
            "description": "Workspace Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "unlockWorkspace",
        "summary": "Unlock Workspace",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/updateAttributes": {
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Attribute operations. WARNING! This should not be used to change library metadata (republish will not happen). Use UpdateAttributes in the library section.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributeUpdateOperationArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/WorkspaceDetails"
            }
          },
          "400": {
            "description": "Invalid operation"
          },
          "404": {
            "description": "Workspace not found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "updateAttributes",
        "summary": "Modify attributes on a workspace.\n",
        "x-codegen-request-body-name": "workspaceUpdateJson",
        "x-passthrough": false
      }
    },
    "/cookie-authed/download/b/{bucket}/o/{object}": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "description": "Name of the bucket in which the object resides.",
            "in": "path",
            "name": "bucket",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of the object. (be sure to urlencode)",
            "in": "path",
            "name": "object",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Error"
          }
        },
        "tags": [
          "Storage"
        ],
        "description": "Download GCS object using a cookie token\n",
        "operationId": "getStorageDownload",
        "summary": "Download GCS object using a cookie token\n",
        "x-passthrough": false
      }
    },
    "/cookie-authed/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}/tsv": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "comma separated list of ordered attribute names to be in downloaded tsv",
            "in": "query",
            "name": "attributeNames",
            "type": "string"
          },
          {
            "description": "flexible or firecloud (firecloud model will be used by default)",
            "in": "query",
            "name": "model",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace entities of specified type in TSV format",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "404": {
            "description": "Workspace or entity type does not exist"
          },
          "414": {
            "description": "URI length exceeds the configured limit of 2048 characters.\nPlease use the POST endpoint when it's necessary to supply a large number of attribute names.\n"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "description": "swagger-ui seems to not handle file downloads, so this endpoint won't function through the ui.\nIt is here for documentation purposes only.\n",
        "operationId": "browserDownloadEntitiesTSVGet",
        "summary": "TSV file containing workspace entities of the specified type\n",
        "x-passthrough": false
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "in": "formData",
            "name": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace entities of specified type in TSV format",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "404": {
            "description": "Workspace or entity type does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Entities"
        ],
        "description": "swagger-ui seems to not handle file downloads, so this endpoint won't function through the ui.\nIt is here for documentation purposes only.\n",
        "operationId": "browserDownloadEntitiesTSV",
        "summary": "TSV file containing workspace entities of the specified type\n",
        "x-passthrough": false
      }
    },
    "/cookie-authed/workspaces/{workspaceNamespace}/{workspaceName}/exportAttributesTSV": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Workspace attributes in TSV format",
            "schema": {
              "format": "binary",
              "type": "string"
            }
          },
          "404": {
            "description": "Workspace does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Workspaces"
        ],
        "operationId": "browserDownloadAttributes",
        "summary": "TSV file containing workspace attributes (allows cookie-based authentication)\n",
        "x-passthrough": false
      }
    },
    "/duos/autocomplete/{queryTerm}": {
      "get": {
        "parameters": [
          {
            "description": "The query term (word fragment) which the service should try and complete.",
            "in": "path",
            "name": "queryTerm",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of results."
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "duosAutocomplete",
        "summary": "Passes through to DUOS' autocomplete method to select ontology terms of disease type that match the query term.\n",
        "x-passthrough": false
      }
    },
    "/duos/researchPurposeQuery": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Research Purpose Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResearchPurposeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JSON of ES filter clause"
          }
        },
        "tags": [
          "Library"
        ],
        "operationId": "duosResearchPurposeQuery",
        "summary": "Generates an ElasticSearch clause for filtering by research purpose",
        "x-codegen-request-body-name": "body",
        "x-passthrough": false
      }
    },
    "/duos/structuredData": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Structured Data Request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/structuredDataRequest"
            }
          }
        ],
        "responses": {
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "googleoauth": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "Library"
        ],
        "description": "The ingest API will take the answers to consent questions and return the elasticsearch structure to persist with the data reference.",
        "operationId": "dataIngest",
        "summary": "Data Use Search ingest",
        "x-codegen-request-body-name": "body",
        "x-passthrough": false
      }
    },
    "/engine/{version}/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "All subsystems report an \"ok\" status",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          },
          "500": {
            "description": "At least one subsystem does not have an \"ok\" status",
            "schema": {
              "$ref": "#/definitions/StatusResponse"
            }
          }
        },
        "tags": [
          "CromIAM Engine (for Job Manager)"
        ],
        "summary": "Returns the current health status of any monitored subsystems",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/engine/{version}/version": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": "v1",
            "description": "API Version",
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/VersionResponse"
            }
          }
        },
        "tags": [
          "CromIAM Engine (for Job Manager)"
        ],
        "summary": "Returns the version of the Cromwell Engine",
        "x-passthrough": true,
        "x-passthrough-target": "cromiam"
      }
    },
    "/error": {
      "get": {
        "parameters": [],
        "responses": {
          "503": {
            "description": "Service Unavailable"
          }
        },
        "tags": [
          "Status"
        ],
        "operationId": "error",
        "summary": "An error status endpoint for load balancing purposes\n",
        "x-passthrough": false
      }
    },
    "/ga4gh/v1/metadata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A Metadata object describing this service.",
            "schema": {
              "$ref": "#/definitions/Metadata"
            }
          }
        },
        "tags": [
          "GA4GH Tool Registry"
        ],
        "description": "Return some metadata that is useful for describing this registry",
        "summary": "Return some metadata that is useful for describing this registry",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/ga4gh/v1/tool-classes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of methods that match the filter.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolClass"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GH Tool Registry"
        ],
        "description": "This endpoint returns all tool-classes available\n",
        "summary": "List all tool types",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/ga4gh/v1/tools": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of Tools that match the filter.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tool"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GH Tool Registry"
        ],
        "description": "This endpoint returns all tools available.\n",
        "summary": "List all tools",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/ga4gh/v1/tools/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool.",
            "schema": {
              "$ref": "#/definitions/Tool"
            }
          }
        },
        "tags": [
          "GA4GH Tool Registry"
        ],
        "description": "This endpoint returns one specific tool (which has ToolVersions nested inside it)",
        "summary": "List one specific tool, acts as an anchor for self references",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/ga4gh/v1/tools/{id}/versions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tool versions",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolVersion"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GH Tool Registry"
        ],
        "description": "Returns all versions of the specified tool",
        "summary": "List versions of a tool",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/ga4gh/v1/tools/{id}/versions/{version-id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version, scoped to this registry, for example `v1`",
            "in": "path",
            "name": "version-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool version.",
            "schema": {
              "$ref": "#/definitions/ToolVersion"
            }
          }
        },
        "tags": [
          "GA4GH Tool Registry"
        ],
        "description": "This endpoint returns one specific tool version",
        "summary": "List one specific tool version, acts as an anchor for self references",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/ga4gh/v1/tools/{id}/versions/{version-id}/{type}/descriptor": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The output type of the descriptor. If not specified it is up to the underlying implementation to determine which output type to return. Plain types return the bare descriptor while the \"non-plain\" types return a descriptor wrapped with metadata.\n",
            "enum": [
              "WDL",
              "plain-WDL"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.\n\n  *In FireCloud, this must be a namespace + \":\" + name. For instance, if your namespace\n  is 'foo' and name is 'bar', this must be 'foo:bar'.*\n",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version for this particular tool registry, for example `v1`.\n\n  *In FireCloud, this must be an integer representing the FireCloud snapshot id.*\n",
            "in": "path",
            "name": "version-id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool descriptor.",
            "schema": {
              "$ref": "#/definitions/ToolDescriptor"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "tags": [
          "GA4GH Tool Registry"
        ],
        "description": "Returns the WDL descriptor for the specified tool.",
        "summary": "Get the tool descriptor (WDL) for the specified tool.",
        "x-passthrough": true,
        "x-passthrough-target": "agora"
      }
    },
    "/handle-oauth-code": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "properties": {
                "code": {
                  "type": "string"
                },
                "redirectUri": {
                  "type": "string"
                }
              },
              "required": [
                "code",
                "redirectUri"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "All set"
          }
        },
        "tags": [
          "OAuth"
        ],
        "description": "This API is a deprecated noop. Previously, it allowed the server to acquire a refresh token.\nSince refresh tokens are no longer used in the back end, this API is now hardcoded to respond as if\nit successfully acquired a refresh token, without doing any actual work.\nThis API may be removed in a future release.\n",
        "operationId": "handleOauthCode",
        "summary": "deprecated",
        "x-codegen-request-body-name": "body",
        "x-passthrough": false
      }
    },
    "/health": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "tags": [
          "Status"
        ],
        "operationId": "health",
        "summary": "A health status endpoint for load balancing purposes\n",
        "x-passthrough": false
      }
    },
    "/me": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": false,
            "description": "when set to true does not check the various enabled statuses of the user",
            "in": "query",
            "name": "userDetailsOnly",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Me"
            }
          },
          "401": {
            "description": "Unauthorized. User is not allowed in FireCloud or has not signed in."
          },
          "403": {
            "description": "Forbidden. User is registered in FireCloud, but not activated."
          },
          "404": {
            "description": "Not Found. User is authenticated to Google but not a FireCloud member."
          },
          "500": {
            "description": "Internal Server Error determining user status."
          },
          "503": {
            "description": "Service Unavailable. Could not reach underlying services to determine user status."
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "me",
        "summary": "Returns registration and activation status for the current user",
        "x-passthrough": false
      }
    },
    "/register": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RawlsMe"
            }
          },
          "404": {
            "description": "User Not Found."
          },
          "500": {
            "description": "Internal Server Error determining Rawls user status."
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "getUserStatus",
        "summary": "Passes through to the Rawls userinfo API and returns its response",
        "x-passthrough": true,
        "x-passthrough-target": "sam"
      }
    },
    "/register/profile": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RegisterProfile"
            }
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "getAll",
        "summary": "Returns a list of all keys and values stored in the user profile service for the currently logged-in user.",
        "x-passthrough": false
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A complete profile",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "Profile"
        ],
        "operationId": "setProfile",
        "summary": "Sets a profile object in the user profile service for the currently logged-in user.",
        "x-codegen-request-body-name": "profile",
        "x-passthrough": false
      }
    },
    "/register/userinfo": {
      "get": {
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "tags": [
          "Profile"
        ],
        "description": "See https://developers.google.com/+/web/api/rest/openidconnect/getOpenIdConnect for response info. Userinfo endpoint lives at https://www.googleapis.com/oauth2/v3/userinfo.\n",
        "operationId": "userInfo",
        "summary": "Passes through to Google's userinfo API and returns its response",
        "x-passthrough": false
      }
    },
    "/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "This service is healthy; check payload for subsystem health.",
            "schema": {
              "$ref": "#/definitions/SystemStatus"
            }
          },
          "500": {
            "description": "This service is not healthy; therefore, payload may be missing or incomplete.",
            "schema": {
              "$ref": "#/definitions/SystemStatus"
            }
          }
        },
        "tags": [
          "Status"
        ],
        "operationId": "status",
        "summary": "An orchestrated status check that includes a health report of underlying systems\n",
        "x-passthrough": false
      }
    },
    "/version": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/OrchestrationVersion"
            }
          }
        },
        "tags": [
          "Version"
        ],
        "operationId": "orchestrationVersion",
        "summary": "Returns the currently deployed version of this service.",
        "x-passthrough": false
      }
    },
    "/version/executionEngine": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/ExecutionEngineVersion"
            }
          }
        },
        "tags": [
          "Version"
        ],
        "operationId": "executionEngineVersion",
        "summary": "Returns the currently deployed version of FireCloud's execution engine",
        "x-passthrough": true,
        "x-passthrough-target": "rawls"
      }
    }
  },
  "definitions": {
    "AddListMember": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeListName": {
              "description": "The name of the attribute list",
              "type": "string"
            },
            "newMember": {
              "description": "The attribute to add to the list",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "AddUpdateAttribute": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "addUpdateAttribute": {
              "description": "Value to add/update. Accepts strings, numbers, booleans.",
              "type": "string"
            },
            "attributeName": {
              "description": "Name of attribute to add/update",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "AttributeEntityReference": {
      "description": "",
      "properties": {
        "entityName": {
          "description": "The name of the entity",
          "type": "string"
        },
        "entityType": {
          "description": "The type of the entity",
          "type": "string"
        }
      },
      "required": [
        "entityName",
        "entityType"
      ],
      "type": "object"
    },
    "AttributeUpdateOperation": {
      "discriminator": "op",
      "properties": {
        "op": {
          "description": "The operation to perform on the attribute",
          "enum": [
            "AddUpdateAttribute",
            "RemoveAttribute",
            "AddListMember",
            "RemoveListMember",
            "CreateAttributeEntityReferenceList",
            "CreateAttributeValueList"
          ],
          "type": "string"
        }
      },
      "required": [
        "op"
      ],
      "type": "object"
    },
    "AttributeUpdateOperationArray": {
      "description": "",
      "example": "[\n  {\n    \"op\": \"AddUpdateAttribute\",\n    \"attributeName\": \"name of attribute to add/update\",\n    \"addUpdateAttribute\": \"value to add/update\"\n  },\n  {\n    \"op\": \"RemoveAttribute\",\n    \"attributeName\": \"name of attribute to remove\"\n  },\n  {\n    \"op\": \"AddListMember\",\n    \"attributeListName\": \"name of list attribute\",\n    \"newMember\": \"value to add to list\"\n  },\n  {\n    \"op\": \"RemoveListMember\",\n    \"attributeListName\": \"name of list attribute\",\n    \"removeMember\": \"value to remove from list\"\n  },\n  {\n    \"op\": \"CreateAttributeEntityReferenceList\",\n    \"attributeListName\": \"name of entity-reference list attribute to create\"\n  },\n  {\n    \"op\": \"CreateAttributeValueList\",\n    \"attributeName\": \"name of value-list attribute to create\"\n  }\n]\n",
      "items": {
        "$ref": "#/definitions/AttributeUpdateOperation"
      },
      "type": "array"
    },
    "BagitRequest": {
      "properties": {
        "bagitURL": {
          "description": "link to publically accessible zipped BagIt directory",
          "type": "string"
        },
        "format": {
          "description": "the type of the files inside the bagit. Currently this must be the string \"TSV\".",
          "enum": [
            "TSV"
          ],
          "type": "string"
        }
      },
      "required": [
        "bagitURL",
        "format"
      ],
      "type": "object"
    },
    "BillingAccount": {
      "description": "Details for a single billing account",
      "properties": {
        "accountName": {
          "description": "name of billing account",
          "type": "string"
        },
        "displayName": {
          "description": "display name of billing account",
          "type": "string"
        },
        "firecloudHasAccess": {
          "description": "whether the Firecloud service has been given access to this billing account",
          "type": "boolean"
        }
      },
      "required": [
        "accountName",
        "displayName",
        "firecloudHasAccess"
      ],
      "type": "object"
    },
    "BillingAccountRedirect": {
      "description": "Google redirect URL to enable appropriate scopes",
      "properties": {
        "redirect": {
          "description": "URL to redirect to",
          "type": "string"
        }
      },
      "required": [
        "redirect"
      ],
      "type": "object"
    },
    "BillingProjectMember": {
      "description": "",
      "properties": {
        "email": {
          "description": "the email of the user",
          "type": "string"
        },
        "role": {
          "description": "the role of the user in the project",
          "type": "string"
        }
      },
      "required": [
        "email",
        "role"
      ],
      "type": "object"
    },
    "BillingProjectMembership": {
      "description": "",
      "properties": {
        "message": {
          "description": "informational message about the project",
          "type": "string"
        },
        "projectName": {
          "description": "the name of the project to create",
          "type": "string"
        },
        "role": {
          "description": "the role of the current user in the project",
          "type": "string"
        },
        "status": {
          "enum": [
            "Creating",
            "Ready",
            "Error"
          ],
          "type": "string"
        }
      },
      "required": [
        "projectName",
        "role",
        "status"
      ],
      "type": "object"
    },
    "BillingProjectStatus": {
      "description": "a billing project status",
      "properties": {
        "creationStatus": {
          "enum": [
            "Creating",
            "Ready",
            "Error"
          ],
          "type": "string"
        },
        "projectName": {
          "description": "the name of the billing project",
          "type": "string"
        }
      },
      "required": [
        "creationStatus",
        "projectName"
      ],
      "type": "object"
    },
    "CallMetadata": {
      "description": "Stuff you need to know about calls",
      "properties": {
        "backend": {
          "description": "type of backend executing the call",
          "type": "string"
        },
        "backendLogs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "map of log files from backend",
          "type": "object"
        },
        "backendStatus": {
          "description": "status of the backend",
          "type": "string"
        },
        "end": {
          "description": "ending time of call",
          "format": "date-time",
          "type": "string"
        },
        "executionEvents": {
          "items": {
            "$ref": "#/definitions/ExecutionEvent"
          },
          "type": "array"
        },
        "executionStatus": {
          "description": "status of call",
          "type": "string"
        },
        "inputs": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "map from input names onto resolved values",
          "type": "object"
        },
        "jobId": {
          "description": "unique ID of job",
          "type": "string"
        },
        "outputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "map from output names to local files",
          "type": "object"
        },
        "returnCode": {
          "description": "result code",
          "format": "int32",
          "type": "integer"
        },
        "shardIndex": {
          "description": "call index within a scatter block, as reported by execution service",
          "format": "int32",
          "type": "integer"
        },
        "start": {
          "description": "starting time of call",
          "format": "date-time",
          "type": "string"
        },
        "stderr": {
          "description": "location of stderr",
          "type": "string"
        },
        "stdout": {
          "description": "location of stdout",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationIngest": {
      "properties": {
        "inputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String] with inputs information",
          "type": "object"
        },
        "methodRepoMethod": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String] with corresponding method-related information",
          "type": "object"
        },
        "name": {
          "description": "Method configuration name",
          "type": "string"
        },
        "namespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "outputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String] with outputs information",
          "type": "object"
        },
        "prerequisites": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String] of prerequisites (keys unused, will be removed in the future)",
          "type": "object"
        },
        "rootEntityType": {
          "description": "Root entity type",
          "type": "string"
        },
        "workspaceName": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String] with corresponding workspace-related information - name and namespace",
          "type": "object"
        }
      },
      "required": [
        "inputs",
        "methodRepoMethod",
        "name",
        "namespace",
        "outputs",
        "prerequisites",
        "rootEntityType",
        "workspaceName"
      ],
      "type": "object"
    },
    "ConfigurationPayload": {
      "properties": {
        "deleted": {
          "default": false,
          "description": "Has this config been deleted?",
          "type": "boolean"
        },
        "inputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, AttributeString] from method's WDL inputs to fields in the workspace data model",
          "type": "object"
        },
        "methodConfigVersion": {
          "default": 1,
          "description": "Snapshot ID of this config",
          "format": "int32",
          "type": "integer"
        },
        "methodRepoMethod": {
          "properties": {
            "methodName": {
              "default": "cancer_exome_pipeline_v2",
              "description": "Name of referenced method",
              "type": "string"
            },
            "methodNamespace": {
              "default": "broad-dsde-dev,",
              "description": "Namespace of referenced method",
              "type": "string"
            },
            "methodVersion": {
              "default": 1,
              "description": "Snapshot ID of referenced method",
              "format": "int32",
              "type": "integer"
            }
          },
          "type": "object"
        },
        "name": {
          "default": "cancer_exome_pipeline_v2",
          "description": "Name of this config",
          "type": "string"
        },
        "namespace": {
          "default": "broad-dsde-dev",
          "description": "Namespace of this config",
          "type": "string"
        },
        "outputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, AttributeString] from method's WDL outputs to fields in the workspace data model",
          "type": "object"
        },
        "prerequisites": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, AttributeString]",
          "type": "object"
        },
        "rootEntityType": {
          "default": "pair",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationQuery": {
      "properties": {
        "documentation": {
          "default": "Example configuration with an associated method.\n",
          "description": "Documentation of the Configuration.",
          "type": "string"
        },
        "entityType": {
          "default": "Configuration",
          "description": "Can only be Configuration.",
          "type": "string"
        },
        "name": {
          "default": "quick-BWA-config",
          "description": "Name of the Configuration.",
          "type": "string"
        },
        "namespace": {
          "default": "YOUR_NAMESPACE",
          "description": "Namespace which contains Configuration.",
          "type": "string"
        },
        "payload": {
          "default": "{ \"methodRepoMethod\": { \"methodNamespace\": \"YOUR_NAMESPACE\", \"methodName\": \"BWA\", \"methodVersion\": 1}}\n",
          "description": "Payload of method -- must be in WDL format",
          "type": "string"
        },
        "snapshotComment": {
          "default": "Improved spline reticulation",
          "description": "Snapshot comment of AgoraEntity",
          "type": "string"
        },
        "synopsis": {
          "default": "Quick synopsis of configuration.",
          "description": "Synopsis which contains Configuration.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationResponse": {
      "properties": {
        "createDate": {
          "description": "Timestamp of creation",
          "type": "string"
        },
        "documentation": {
          "default": "BWA is a software package for mapping low-divergent sequences\nagainst a large reference genome, such as the human genome.\nIt consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n",
          "description": "Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.",
          "type": "string"
        },
        "entityType": {
          "default": "Task",
          "description": "Type of the AgoraEntity -- Task or Workflow.",
          "type": "string"
        },
        "managers": {
          "description": "List of Owners.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "method": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "name": {
          "default": "BWA",
          "description": "Name of the AgoraEntity.",
          "type": "string"
        },
        "namespace": {
          "default": "YOUR_NAMESPACE",
          "description": "Namespace which contains AgoraEntity.",
          "type": "string"
        },
        "payload": {
          "default": "{ \"methodRepoMethod\": { \"methodNamespace\": \"YOUR_NAMESPACE\", \"methodName\": \"BWA\", \"methodVersion\": 1}}\n",
          "description": "Payload of config - JSON format in a string",
          "type": "string"
        },
        "public": {
          "description": "Is this method publicly readable?",
          "type": "boolean"
        },
        "snapshotComment": {
          "default": "Improved spline reticulation",
          "description": "Snapshot comment of AgoraEntity",
          "type": "string"
        },
        "snapshotId": {
          "description": "SnapshotId of AgoraEntity",
          "format": "int32",
          "type": "integer"
        },
        "synopsis": {
          "default": "Quickly aligns short nucleotide sequences.",
          "description": "Synopsis which contains AgoraEntity.",
          "type": "string"
        },
        "url": {
          "description": "URL where resource can be accessed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ConfigurationResponseWithPayloadObject": {
      "properties": {
        "createDate": {
          "description": "Timestamp of creation",
          "type": "string"
        },
        "documentation": {
          "default": "BWA is a software package for mapping low-divergent sequences\nagainst a large reference genome, such as the human genome.\nIt consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n",
          "description": "Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.",
          "type": "string"
        },
        "entityType": {
          "default": "Task",
          "description": "Type of the AgoraEntity -- Task or Workflow.",
          "type": "string"
        },
        "name": {
          "default": "BWA",
          "description": "Name of the AgoraEntity.",
          "type": "string"
        },
        "namespace": {
          "default": "YOUR_NAMESPACE",
          "description": "Namespace which contains AgoraEntity.",
          "type": "string"
        },
        "payloadObject": {
          "$ref": "#/definitions/ConfigurationPayload"
        },
        "snapshotComment": {
          "default": "Improved spline reticulation",
          "description": "Snapshot comment of AgoraEntity",
          "type": "string"
        },
        "snapshotId": {
          "description": "SnapshotId of AgoraEntity",
          "format": "int32",
          "type": "integer"
        },
        "synopsis": {
          "default": "Quickly aligns short nucleotide sequences.",
          "description": "Synopsis which contains AgoraEntity.",
          "type": "string"
        },
        "url": {
          "description": "URL where resource can be accessed.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Consent": {
      "properties": {
        "consentId": {
          "description": "The ID of the entity.",
          "type": "string"
        },
        "createDate": {
          "description": "Creation Date in date-time milliseconds",
          "format": "int64",
          "type": "integer"
        },
        "dataUseLetter": {
          "description": "The URL of the saved file.",
          "type": "string"
        },
        "dulName": {
          "description": "Name that identifies the Data Use Letter file.",
          "type": "string"
        },
        "lastUpdate": {
          "description": "Date of the last update in date-time milliseconds",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Name used to identify the consent.",
          "type": "string"
        },
        "requiresManualReview": {
          "description": "Describes if this consent has to be reviewed manually.",
          "type": "boolean"
        },
        "sortDate": {
          "description": "The lastest modification date in date-time milliseconds",
          "format": "int64",
          "type": "integer"
        },
        "translatedUseRestriction": {
          "description": "The translated use restriction of the consent.",
          "type": "string"
        },
        "useRestriction": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "The UseRestriction of this consent. Used to match against another entities.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "CopyConfigurationIngest": {
      "properties": {
        "configurationName": {
          "description": "Method configuration name",
          "type": "string"
        },
        "configurationNamespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "configurationSnapshotId": {
          "description": "Method configuration snapshot id",
          "format": "int32",
          "type": "integer"
        },
        "destinationName": {
          "description": "Method configuration destination name",
          "type": "string"
        },
        "destinationNamespace": {
          "description": "Method configuration destination namespace",
          "type": "string"
        }
      },
      "required": [
        "configurationName",
        "configurationNamespace",
        "configurationSnapshotId",
        "destinationName",
        "destinationNamespace"
      ],
      "type": "object"
    },
    "CopyEntity": {
      "properties": {
        "entityNames": {
          "description": "List of entity names to be copied",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "entityType": {
          "description": "Entity Type",
          "type": "string"
        },
        "sourceWorkspace": {
          "$ref": "#/definitions/Namespace"
        }
      },
      "type": "object"
    },
    "CreateAttributeEntityReferenceList": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeListName": {
              "description": "The name of the empty attribute entity-reference list to create. This is a non-destructive operation.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "CreateAttributeValueList": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeName": {
              "description": "The name of the empty attribute value-list to create. This is a non-destructive operation.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "CreateRawlsBillingProjectFullRequest": {
      "description": "",
      "properties": {
        "billingAccount": {
          "description": "the id of the billing account to use, must start with 'billingAccounts/'",
          "type": "string"
        },
        "enableFlowLogs": {
          "description": "Requires highSecurityNetwork = true. Optional, false if not specified. If true, enable flow logs within the high security network.",
          "type": "boolean"
        },
        "highSecurityNetwork": {
          "description": "Optional, false if not specified. If true, spin up all compute in a VPC network.",
          "type": "boolean"
        },
        "privateIpGoogleAccess": {
          "description": "Requires highSecurityNetwork = true. Optional, false if not specified. If true, it configures the VPC network to only allow access to GCP APIs that are protected by the project's service perimeter and routes all allowed API traffic through a narrow IP range.",
          "type": "boolean"
        },
        "projectName": {
          "description": "the name of the project to create",
          "type": "string"
        },
        "servicePerimeter": {
          "description": "The fully qualified name of the GCP service perimeter to put this project into in the form accessPolicies/[POLICY NUMBER]/servicePerimeters/[NAME]. Caller must have the add_project action for this service perimeter in Sam.",
          "type": "string"
        }
      },
      "required": [
        "billingAccount",
        "projectName"
      ],
      "type": "object"
    },
    "CuratorStatus": {
      "description": "is the user a curator?",
      "properties": {
        "curator": {
          "type": "boolean"
        }
      },
      "required": [
        "curator"
      ],
      "type": "object"
    },
    "DatasetPermission": {
      "properties": {
        "authorized": {
          "description": "true if you have access to the dataset, false otherwise",
          "type": "boolean"
        },
        "name": {
          "description": "the name of the NIH dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DescriptorType": {
      "description": "One from a list of descriptor type strings (e.g. CWL, WDL). Note that these files can also include associated Docker/container files and test parameters that further describe a version of a tool",
      "enum": [
        "CWL",
        "WDL"
      ],
      "example": "WDL",
      "type": "string"
    },
    "DescriptorTypeAndVersion": {
      "description": "A workflow descriptor file type and version.",
      "properties": {
        "descriptorType": {
          "$ref": "#/definitions/DescriptorType"
        },
        "descriptorTypeVersion": {
          "example": "1.0",
          "type": "string"
        }
      },
      "required": [
        "descriptorType",
        "descriptorTypeVersion"
      ],
      "type": "object"
    },
    "Enabled": {
      "properties": {
        "allUsersGroup": {
          "description": "User is a member of the \"All Users\" group?",
          "type": "boolean"
        },
        "google": {
          "description": "User enabled via Google?",
          "type": "boolean"
        },
        "ldap": {
          "description": "User enabled in LDAP?",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Entity": {
      "description": "",
      "properties": {
        "attributes": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "Map[String,Attribute]",
          "type": "object"
        },
        "entityType": {
          "description": "The type of the entity",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity",
          "type": "string"
        }
      },
      "required": [
        "attributes",
        "entityType",
        "name"
      ],
      "type": "object"
    },
    "EntityAccessControl": {
      "properties": {
        "acls": {
          "description": "method repo ACLs for the referenced method",
          "items": {
            "$ref": "#/definitions/FireCloudPermission"
          },
          "type": "array"
        },
        "message": {
          "description": "error message generated when retrieving acls for this method",
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/MethodShort"
        },
        "referencedBy": {
          "$ref": "#/definitions/MethodConfigurationName"
        }
      },
      "required": [
        "acls",
        "referencedBy"
      ],
      "type": "object"
    },
    "EntityCopyResponse": {
      "description": "",
      "properties": {
        "entitiesCopied": {
          "description": "the entities that were successfully copied into the workspace",
          "items": {
            "$ref": "#/definitions/AttributeEntityReference"
          },
          "type": "array"
        },
        "hardConflicts": {
          "description": "these entities already exist in your workspace",
          "items": {
            "$ref": "#/definitions/EntityHardConflict"
          },
          "type": "array"
        },
        "softConflicts": {
          "description": "the conflicts within your entity subtrees. note that this will be empty if there are hard conflicts",
          "items": {
            "$ref": "#/definitions/EntitySoftConflict"
          },
          "type": "array"
        }
      },
      "required": [
        "entitiesCopied",
        "hardConflicts",
        "softConflicts"
      ],
      "type": "object"
    },
    "EntityHardConflict": {
      "description": "",
      "properties": {
        "entityName": {
          "description": "the name of the entity",
          "type": "string"
        },
        "entityType": {
          "description": "the type of the entity",
          "type": "string"
        }
      },
      "required": [
        "entityName",
        "entityType"
      ],
      "type": "object"
    },
    "EntityID": {
      "properties": {
        "entityName": {
          "description": "Entity Name",
          "type": "string"
        },
        "entityType": {
          "description": "Entity Type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "EntityQueryParameters": {
      "description": "",
      "properties": {
        "filterTerms": {
          "description": "terms to filter results by",
          "type": "string"
        },
        "page": {
          "description": "page number, 1-indexed positive integer",
          "format": "int32",
          "type": "integer"
        },
        "pageSize": {
          "description": "count of items per page, positive integer",
          "format": "int32",
          "type": "integer"
        },
        "sortDirection": {
          "description": "asc or desc",
          "type": "string"
        },
        "sortField": {
          "description": "field to sort by",
          "type": "string"
        }
      },
      "required": [
        "page",
        "pageSize",
        "sortDirection",
        "sortField"
      ],
      "type": "object"
    },
    "EntityQueryResponse": {
      "description": "",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntityQueryParameters"
        },
        "resultMetadata": {
          "$ref": "#/definitions/EntityQueryResultMetadata"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/Entity"
          },
          "type": "array"
        }
      },
      "required": [
        "parameters",
        "resultMetadata",
        "results"
      ],
      "type": "object"
    },
    "EntityQueryResultMetadata": {
      "description": "",
      "properties": {
        "filteredCount": {
          "description": "count of results after filtering",
          "format": "int32",
          "type": "integer"
        },
        "filteredPageCount": {
          "description": "count of pages after filtering; honors pageSize parameter",
          "format": "int32",
          "type": "integer"
        },
        "unfilteredCount": {
          "description": "count of results before filtering",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "filteredCount",
        "filteredPageCount",
        "unfilteredCount"
      ],
      "type": "object"
    },
    "EntitySoftConflict": {
      "description": "",
      "properties": {
        "conflicts": {
          "description": "the next entity in the path to the conflict",
          "items": {
            "$ref": "#/definitions/EntitySoftConflict"
          },
          "type": "array"
        },
        "entityName": {
          "description": "the name of the entity",
          "type": "string"
        },
        "entityType": {
          "description": "the type of the entity",
          "type": "string"
        }
      },
      "required": [
        "conflicts",
        "entityName",
        "entityType"
      ],
      "type": "object"
    },
    "Error": {
      "properties": {
        "code": {
          "default": 500,
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "default": "Internal Server Error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ErrorReport": {
      "description": "",
      "properties": {
        "causes": {
          "description": "errors triggering this one",
          "items": {
            "$ref": "#/definitions/ErrorReport"
          },
          "type": "array"
        },
        "message": {
          "description": "what went wrong",
          "type": "string"
        },
        "source": {
          "description": "service causing error",
          "type": "string"
        },
        "stackTrace": {
          "description": "stack trace",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          },
          "type": "array"
        },
        "statusCode": {
          "description": "HTTP status code",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "causes",
        "message",
        "source",
        "stackTrace"
      ],
      "type": "object"
    },
    "ExecutionEngineVersion": {
      "properties": {
        "cromwell": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutionEvent": {
      "description": "",
      "properties": {
        "description": {
          "description": "Description of the event",
          "type": "string"
        },
        "endTime": {
          "description": "When the event finished",
          "format": "date-time",
          "type": "string"
        },
        "startTime": {
          "description": "When the event started",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "description",
        "startTime"
      ],
      "type": "object"
    },
    "ExtendedEnabled": {
      "allOf": [
        {
          "$ref": "#/definitions/Enabled"
        }
      ]
    },
    "FailureMessage": {
      "description": "Failure messages",
      "properties": {
        "failure": {
          "description": "The failure message",
          "type": "string"
        },
        "timestamp": {
          "description": "The time at which this failure occurred",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "failure",
        "timestamp"
      ],
      "type": "object"
    },
    "FireCloudPermission": {
      "properties": {
        "role": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      },
      "required": [
        "role",
        "user"
      ],
      "type": "object"
    },
    "JWTWrapper": {
      "properties": {
        "jwt": {
          "description": "the encoded/signed JWT",
          "type": "string"
        }
      },
      "type": "object"
    },
    "KeyValuePair": {
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LabelsResponse": {
      "properties": {
        "id": {
          "description": "The identifier of the workflow",
          "type": "string"
        },
        "labels": {
          "description": "The custom labels as json",
          "type": "string"
        }
      },
      "required": [
        "id",
        "labels"
      ],
      "type": "object"
    },
    "LibraryBulkIndexResponse": {
      "properties": {
        "failureMessages": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String,String] of id -> failure message",
          "type": "object"
        },
        "hasFailures": {
          "default": false,
          "description": "did the indexing operation result in any failures?",
          "type": "boolean"
        },
        "totalCount": {
          "description": "the number of published workspaces sent to be indexed",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "LibraryMetadataInput": {
      "description": "JSON-standard packet of metadata as defined by the Library schema",
      "example": "{\n  \"library:requiresExternalApproval\": false,\n  \"library:contactEmail\": \"someone@broadinstitute.org\",\n  \"library:datasetName\": \"My Dataset\",\n  \"library:numSubjects\": 123,\n  \"library:datatype\": [\"Whole Exome\", \"Whole Genome\"]\n  ...\n  additional JSON-standard fields as\n  defined by the Library schema\n  ...\n}\n",
      "type": "object"
    },
    "ManagedGroupAccessInstructions": {
      "description": "",
      "properties": {
        "groupName": {
          "description": "The name of the Group with instructions",
          "type": "string"
        },
        "instructions": {
          "description": "The instructions for applying to the Group",
          "type": "string"
        }
      },
      "required": [
        "groupName",
        "instructions"
      ],
      "type": "object"
    },
    "ManagedGroupAccessResponse": {
      "description": "an element of a list of groups a user has access to",
      "properties": {
        "groupEmail": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      },
      "required": [
        "groupEmail",
        "groupName",
        "role"
      ],
      "type": "object"
    },
    "ManagedGroupRef": {
      "description": "a reference to a group that can be managed by users",
      "properties": {
        "membersGroupName": {
          "type": "string"
        }
      },
      "required": [
        "membersGroupName"
      ],
      "type": "object"
    },
    "ManagedGroupWithMembers": {
      "description": "a group with all of its members",
      "properties": {
        "adminsEmails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "adminsGroup": {
          "$ref": "#/definitions/RawlsGroupShort"
        },
        "membersEmails": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "membersGroup": {
          "$ref": "#/definitions/RawlsGroupShort"
        }
      },
      "required": [
        "adminsEmails",
        "adminsGroup",
        "membersEmails",
        "membersGroup"
      ],
      "type": "object"
    },
    "MapValueType": {
      "description": "A type representing a map from one type to another.",
      "properties": {
        "keyType": {
          "$ref": "#/definitions/ValueType"
        },
        "valueType": {
          "$ref": "#/definitions/ValueType"
        }
      },
      "required": [
        "keyType",
        "valueType"
      ],
      "type": "object"
    },
    "Me": {
      "properties": {
        "enabled": {
          "$ref": "#/definitions/Enabled"
        },
        "userInfo": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "type": "object"
    },
    "Metadata": {
      "description": "Describes this registry to better allow for mirroring and indexing.",
      "properties": {
        "api-version": {
          "description": "The version of the GA4GH tool-registry API supported by this registry",
          "type": "string"
        },
        "country": {
          "description": "A country code for the registry (ISO 3166-1 alpha-3)",
          "type": "string"
        },
        "friendly-name": {
          "description": "A friendly name that can be used in addition to the hostname to describe a registry",
          "type": "string"
        },
        "version": {
          "description": "The version of this registry",
          "type": "string"
        }
      },
      "required": [
        "api-version",
        "version"
      ],
      "type": "object"
    },
    "MethodAclPair": {
      "properties": {
        "acls": {
          "items": {
            "$ref": "#/definitions/FireCloudPermission"
          },
          "type": "array"
        },
        "message": {
          "description": "ignored during input; if present during output, contains error messages",
          "type": "string"
        },
        "method": {
          "$ref": "#/definitions/MethodRepoMethod"
        }
      },
      "required": [
        "acls",
        "method"
      ],
      "type": "object"
    },
    "MethodConfigACL": {
      "items": {
        "properties": {
          "role": {
            "description": "one of \"NO ACCESS\", \"READER\", or \"OWNER\"",
            "type": "string"
          },
          "user": {
            "description": "a user's ID or \"public\"",
            "type": "string"
          }
        },
        "required": [
          "role",
          "user"
        ],
        "type": "object"
      },
      "type": "array"
    },
    "MethodConfigRename": {
      "properties": {
        "name": {
          "description": "Method configuration name",
          "type": "string"
        },
        "namespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "workspaceName": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String] with corresponding workspace-related information - name and namespace",
          "type": "object"
        }
      },
      "required": [
        "name",
        "namespace",
        "workspaceName"
      ],
      "type": "object"
    },
    "MethodConfiguration": {
      "description": "",
      "properties": {
        "dataReferenceName": {
          "description": "the name of the data reference within this workspace to be used to derive input values",
          "type": "string"
        },
        "deleted": {
          "description": "Is this config marked as deleted?",
          "type": "boolean"
        },
        "inputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String]",
          "type": "object"
        },
        "methodConfigVersion": {
          "description": "Version number, incremented on edit",
          "format": "int32",
          "type": "integer"
        },
        "methodRepoMethod": {
          "$ref": "#/definitions/MethodRepoMethod"
        },
        "name": {
          "description": "The name of the method configuration",
          "type": "string"
        },
        "namespace": {
          "description": "This method configuration's namespace",
          "type": "string"
        },
        "outputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String]",
          "type": "object"
        },
        "prerequisites": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, String]",
          "type": "object"
        },
        "rootEntityType": {
          "description": "The root entity type that the method will be running on. Optional if this method config doesn't run on an entity (i.e. uses only workspace attributes and literal inputs).",
          "type": "string"
        }
      },
      "required": [
        "inputs",
        "methodRepoMethod",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "MethodConfigurationName": {
      "properties": {
        "name": {
          "description": "The name of the method configuration",
          "type": "string"
        },
        "namespace": {
          "description": "This method configuration's namespace",
          "type": "string"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "MethodDefinition": {
      "properties": {
        "entityType": {
          "default": "Workflow",
          "description": "always \"Workflow\".",
          "type": "string"
        },
        "managers": {
          "description": "List of Owners.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the method.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace which contains the method.",
          "type": "string"
        },
        "numConfigurations": {
          "description": "count of configurations associated with this method",
          "format": "int32",
          "type": "integer"
        },
        "numSnapshots": {
          "description": "count of snapshots of this method",
          "format": "int32",
          "type": "integer"
        },
        "public": {
          "description": "Is this method publicly readable?",
          "type": "boolean"
        },
        "synopsis": {
          "description": "Synopsis of the method",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MethodID": {
      "properties": {
        "methodName": {
          "description": "Method name",
          "type": "string"
        },
        "methodNamespace": {
          "description": "Method namespace",
          "type": "string"
        },
        "methodVersion": {
          "default": 0,
          "description": "Method version",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "methodName",
        "methodNamespace",
        "methodVersion"
      ],
      "type": "object"
    },
    "MethodQuery": {
      "properties": {
        "documentation": {
          "default": "BWA is a software package for mapping low-divergent sequences\nagainst a large reference genome, such as the human genome.\nIt consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n",
          "description": "Documentation of the AgoraEntity.",
          "type": "string"
        },
        "entityType": {
          "default": "Task",
          "description": "Type of the AgoraEntity -- Task or Workflow.",
          "type": "string"
        },
        "name": {
          "default": "BWA",
          "description": "Name of the AgoraEntity.",
          "type": "string"
        },
        "namespace": {
          "default": "YOUR_NAMESPACE",
          "description": "Namespace which contains AgoraEntity.",
          "type": "string"
        },
        "payload": {
          "default": "task wc {File in_file command { cat ${in_file} | wc -l } output { Int count = read_int(stdout()) }}\n",
          "description": "Payload of method -- must be in WDL format",
          "type": "string"
        },
        "snapshotComment": {
          "default": "Improved spline reticulation",
          "description": "Snapshot comment of AgoraEntity",
          "type": "string"
        },
        "synopsis": {
          "default": "Quickly aligns short nucleotide sequences.",
          "description": "Synopsis which contains AgoraEntity.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "MethodRepoMethod": {
      "description": "",
      "properties": {
        "methodName": {
          "description": "The name of the method in Agora",
          "type": "string"
        },
        "methodNamespace": {
          "description": "The namespace of the method in Agora",
          "type": "string"
        },
        "methodPath": {
          "description": "The path of the method in Dockstore",
          "type": "string"
        },
        "methodUri": {
          "description": "URI that specifies the method's repository and captures all the information necessary to identify the method within its repository (e.g. agora://namespace/name/1, dockstore://path/version)",
          "type": "string"
        },
        "methodVersion": {
          "description": "The integer method version in Agora (or a string method version for Dockstore)",
          "format": "int32",
          "type": "integer"
        },
        "sourceRepo": {
          "description": "The method's repository, currently one of \"agora\" or \"dockstore\"",
          "type": "string"
        }
      },
      "required": [
        "methodName",
        "methodNamespace",
        "methodVersion"
      ],
      "type": "object"
    },
    "MethodResponse": {
      "properties": {
        "createDate": {
          "description": "Timestamp of creation",
          "type": "string"
        },
        "documentation": {
          "default": "BWA is a software package for mapping low-divergent sequences\nagainst a large reference genome, such as the human genome.\nIt consists of three algorithms: BWA-backtrack, BWA-SW and BWA-MEM.\n",
          "description": "Documentation of the AgoraEntity. MUST BE REQUESTED EXPLICITLY.",
          "type": "string"
        },
        "entityType": {
          "default": "Task",
          "description": "Type of the AgoraEntity -- Task or Workflow.",
          "type": "string"
        },
        "managers": {
          "description": "List of Owners.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "default": "BWA",
          "description": "Name of the AgoraEntity.",
          "type": "string"
        },
        "namespace": {
          "default": "YOUR_NAMESPACE",
          "description": "Namespace which contains AgoraEntity.",
          "type": "string"
        },
        "payload": {
          "default": "task wc {File in_file command { cat ${in_file} | wc -l } output { Int count = read_int(stdout()) }}\n",
          "description": "Payload of method -- must be in WDL format. MUST BE REQUESTED EXPLICITLY.",
          "type": "string"
        },
        "snapshotComment": {
          "default": "Improved spline reticulation",
          "description": "Snapshot comment of AgoraEntity",
          "type": "string"
        },
        "snapshotId": {
          "description": "SnapshotId of AgoraEntity",
          "format": "int32",
          "type": "integer"
        },
        "synopsis": {
          "default": "Quickly aligns short nucleotide sequences.",
          "description": "Synopsis which contains AgoraEntity.",
          "type": "string"
        },
        "url": {
          "description": "URL where resource can be accessed.",
          "type": "string"
        }
      },
      "required": [
        "managers",
        "name",
        "namespace",
        "snapshotId"
      ],
      "type": "object"
    },
    "MethodShort": {
      "properties": {
        "managers": {
          "description": "List of Owners.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "name": {
          "default": "BWA",
          "description": "Name of the AgoraEntity.",
          "type": "string"
        },
        "namespace": {
          "default": "YOUR_NAMESPACE",
          "description": "Namespace which contains AgoraEntity.",
          "type": "string"
        },
        "public": {
          "description": "If this AgoraEntity is publicly readable.",
          "type": "boolean"
        },
        "snapshotId": {
          "description": "SnapshotId of AgoraEntity",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "managers",
        "name",
        "namespace",
        "snapshotId"
      ],
      "type": "object"
    },
    "Namespace": {
      "properties": {
        "name": {
          "description": "Entity name",
          "type": "string"
        },
        "namespace": {
          "description": "Entity namespace",
          "type": "string"
        }
      },
      "type": "object"
    },
    "NewMethodConfigIngest": {
      "properties": {
        "deleted": {
          "default": false,
          "description": "Is this config marked as deleted?",
          "type": "boolean"
        },
        "inputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Input map - Map[string, string]",
          "type": "object"
        },
        "methodConfigVersion": {
          "description": "Version number, incremented on edit",
          "format": "int32",
          "type": "integer"
        },
        "methodRepoMethod": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Method ID - Map",
          "type": "object"
        },
        "name": {
          "description": "Method configuration name",
          "type": "string"
        },
        "namespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "outputs": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Output map - Map[string, string]",
          "type": "object"
        },
        "prerequisites": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Prerequisites map - Map[string, string]",
          "type": "object"
        },
        "rootEntityType": {
          "description": "Method configuration root entity type",
          "type": "string"
        }
      },
      "required": [
        "deleted",
        "inputs",
        "methodConfigVersion",
        "methodRepoMethod",
        "name",
        "namespace",
        "outputs",
        "prerequisites",
        "rootEntityType"
      ],
      "type": "object"
    },
    "NihStatus": {
      "properties": {
        "datasetPermissions": {
          "items": {
            "$ref": "#/definitions/DatasetPermission"
          },
          "type": "array"
        },
        "linkExpireTime": {
          "default": 0,
          "format": "int64",
          "type": "integer"
        },
        "linkedNihUsername": {
          "type": "string"
        }
      },
      "required": [
        "linkedNihUsername"
      ],
      "type": "object"
    },
    "NotificationType": {
      "description": "key and description of a notification",
      "properties": {
        "description": {
          "type": "string"
        },
        "notificationKey": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "notificationKey"
      ],
      "type": "object"
    },
    "OrchestrationVersion": {
      "properties": {
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PFBRequest": {
      "properties": {
        "url": {
          "description": "link to publically accessible PFB/Avro",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "PFBResponse": {
      "properties": {
        "jobId": {
          "description": "unique id for the import job.",
          "type": "string"
        },
        "url": {
          "description": "the link to PFB/Avro specified in the request",
          "type": "string"
        },
        "workspace": {
          "properties": {
            "name": {
              "description": "the workspace name specified in the request",
              "type": "string"
            },
            "namespace": {
              "description": "the workspace namespace specified in the request",
              "type": "string"
            }
          },
          "type": "object"
        }
      },
      "required": [
        "jobId",
        "url"
      ],
      "type": "object"
    },
    "PFBStatusResponse": {
      "properties": {
        "jobId": {
          "description": "unique id for the import job.",
          "type": "string"
        },
        "message": {
          "description": "extended explanation for the import job.",
          "type": "string"
        },
        "status": {
          "description": "short status for the import job.",
          "type": "string"
        }
      },
      "required": [
        "jobId",
        "status"
      ],
      "type": "object"
    },
    "PermissionReport": {
      "description": "ACLs for users of a workspace and methods referenced by that workspace",
      "properties": {
        "referencedMethods": {
          "items": {
            "$ref": "#/definitions/EntityAccessControl"
          },
          "type": "array"
        },
        "workspaceACL": {
          "additionalProperties": {
            "$ref": "#/definitions/WorkspaceAccessEntry"
          },
          "description": "a map of (user email -> WorkspaceAccessEntry). `exampleEmail` is an example key.",
          "type": "object"
        }
      },
      "required": [
        "referencedMethods",
        "workspaceACL"
      ],
      "type": "object"
    },
    "PermissionReportRequest": {
      "description": "users and/or configs on which to report.",
      "properties": {
        "configs": {
          "description": "list of configs; optional; defaults to all configs in the workspace",
          "items": {
            "$ref": "#/definitions/MethodConfigurationName"
          },
          "type": "array"
        },
        "users": {
          "description": "list of email addresses; optional; defaults to all users in the workspace",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Profile": {
      "properties": {
        "contactEmail": {
          "description": "User's contact email (if different from account email)",
          "type": "string"
        },
        "firstName": {
          "description": "User's first name",
          "type": "string"
        },
        "institute": {
          "description": "User's home institution",
          "type": "string"
        },
        "institutionalProgram": {
          "description": "User's institutional program",
          "type": "string"
        },
        "lastName": {
          "description": "User's last name",
          "type": "string"
        },
        "nonProfitStatus": {
          "description": "User's program non-profit status",
          "type": "string"
        },
        "pi": {
          "description": "Principal Investigator",
          "type": "string"
        },
        "programLocationCity": {
          "description": "User's program location city",
          "type": "string"
        },
        "programLocationCountry": {
          "description": "User's program location country",
          "type": "string"
        },
        "programLocationState": {
          "description": "User's program location state",
          "type": "string"
        },
        "title": {
          "description": "User's title",
          "type": "string"
        }
      },
      "required": [
        "firstName",
        "institute",
        "institutionalProgram",
        "lastName",
        "nonProfitStatus",
        "pi",
        "programLocationCity",
        "programLocationCountry",
        "programLocationState",
        "title"
      ],
      "type": "object"
    },
    "PublishConfigurationIngest": {
      "properties": {
        "configurationName": {
          "description": "Method configuration name",
          "type": "string"
        },
        "configurationNamespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "sourceName": {
          "description": "Method configuration source name",
          "type": "string"
        },
        "sourceNamespace": {
          "description": "Method configuration source namespace",
          "type": "string"
        }
      },
      "required": [
        "configurationName",
        "configurationNamespace",
        "sourceName",
        "sourceNamespace"
      ],
      "type": "object"
    },
    "RawlsGroupRef": {
      "description": "a reference to a group",
      "properties": {
        "groupName": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RawlsGroupShort": {
      "description": "a reference to a group",
      "properties": {
        "groupEmail": {
          "description": "the email associated with the group",
          "type": "string"
        },
        "groupName": {
          "description": "the name of the group",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RawlsMe": {
      "properties": {
        "enabled": {
          "$ref": "#/definitions/ExtendedEnabled"
        },
        "userInfo": {
          "$ref": "#/definitions/UserInfo"
        }
      },
      "type": "object"
    },
    "RegisterProfile": {
      "properties": {
        "keyValuePairs": {
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          },
          "type": "array"
        },
        "userId": {
          "description": "The user's subject id",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RemoveAttribute": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeName": {
              "description": "The name of attribute to remove",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "RemoveListMember": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeListName": {
              "description": "The name of the attribute list",
              "type": "string"
            },
            "removeMember": {
              "description": "The attribute to remove from the list",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "ResearchPurpose": {
      "properties": {
        "DS": {
          "description": "Disease focused research. Values are DOID ontology node ids in the form http://purl.obolibrary.org/obo/DOID_NNN. Specify an empty array if this is not disease focused research.\n",
          "items": {
            "example": "http://purl.obolibrary.org/obo/DOID_4",
            "type": "string"
          },
          "type": "array"
        },
        "NAGR": {
          "default": false,
          "description": "Aggregate analysis to understand variation in the general population",
          "type": "boolean"
        },
        "NCTRL": {
          "default": false,
          "description": "Control set",
          "type": "boolean"
        },
        "NCU": {
          "default": false,
          "description": "Commercial purpose/by a commercial entity",
          "type": "boolean"
        },
        "NMDS": {
          "default": false,
          "description": "Methods development/Validation study",
          "type": "boolean"
        },
        "POA": {
          "default": false,
          "description": "Study population origins or ancestry",
          "type": "boolean"
        }
      },
      "required": [
        "DS",
        "NAGR",
        "NCTRL",
        "NCU",
        "NMDS",
        "POA"
      ],
      "type": "object"
    },
    "ResearchPurposeRequest": {
      "properties": {
        "DS": {
          "description": "Disease focused research. Values are DOID ontology node ids in the form http://purl.obolibrary.org/obo/DOID_NNN. Specify an empty array if this is not disease focused research.\n",
          "items": {
            "example": "http://purl.obolibrary.org/obo/DOID_4",
            "type": "string"
          },
          "type": "array"
        },
        "NAGR": {
          "default": false,
          "description": "Aggregate analysis to understand variation in the general population",
          "type": "boolean"
        },
        "NCTRL": {
          "default": false,
          "description": "Control set",
          "type": "boolean"
        },
        "NCU": {
          "default": false,
          "description": "Commercial purpose/by a commercial entity",
          "type": "boolean"
        },
        "NMDS": {
          "default": false,
          "description": "Methods development/Validation study",
          "type": "boolean"
        },
        "POA": {
          "default": false,
          "description": "Study population origins or ancestry",
          "type": "boolean"
        },
        "prefix": {
          "default": "",
          "description": "Prefix for query properties. Must match prefix used when indexing.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SearchTermRef": {
      "properties": {
        "fieldAggregations": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "Map[String, Int] The list of fields for which you would like to retrieve aggregations and the number of aggregations to return. Default is 5. Specify 0 to get all",
          "type": "object"
        },
        "filters": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Map[String, Array[String]] Each entry contains the column name (i.e. \"library:indication\") and a list of terms that will be or'ed in the query ([\"cancer\", \"sleep apnea\"])",
          "type": "object"
        },
        "from": {
          "default": 0,
          "description": "Where in the results list to start (used for pagination)",
          "format": "int32",
          "type": "integer"
        },
        "researchPurpose": {
          "$ref": "#/definitions/ResearchPurpose"
        },
        "searchString": {
          "description": "The term to search for",
          "type": "string"
        },
        "size": {
          "default": 10,
          "description": "How many results to return",
          "format": "int32",
          "type": "integer"
        },
        "sortDirection": {
          "description": "asc or desc; defaults to asc if not specified",
          "type": "string"
        },
        "sortField": {
          "description": "Field name on which to sort; defaults to sort by relevance if not specified",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StackTraceElement": {
      "description": "",
      "properties": {
        "className": {
          "description": "class name",
          "type": "string"
        },
        "fileName": {
          "description": "source file name",
          "type": "string"
        },
        "lineNumber": {
          "description": "line number",
          "format": "int32",
          "type": "integer"
        },
        "methodName": {
          "description": "method name",
          "type": "string"
        }
      },
      "required": [
        "className",
        "fileName",
        "lineNumber",
        "methodName"
      ],
      "type": "object"
    },
    "StatusResponse": {
      "description": "Returns the status of monitored subsystems.",
      "properties": {
        "serviceName": {
          "properties": {
            "messages": {
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "ok": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "StringArray": {
      "example": [
        "foo",
        "bar"
      ],
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "Submission": {
      "description": "",
      "properties": {
        "cost": {
          "description": "The compute cost of this submission",
          "format": "float",
          "type": "number"
        },
        "deleteIntermediateOutputFiles": {
          "description": "Whether or not to delete intermediate output files when the workflow completes. See Cromwell docs for more information.",
          "type": "boolean"
        },
        "methodConfigurationName": {
          "description": "Method configuration name",
          "type": "string"
        },
        "methodConfigurationNamespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/SubmissionStatus"
        },
        "submissionDate": {
          "description": "SubmissionRequest date",
          "format": "date-time",
          "type": "string"
        },
        "submissionEntity": {
          "$ref": "#/definitions/AttributeEntityReference"
        },
        "submissionId": {
          "description": "SubmissionRequest unique identifier",
          "type": "string"
        },
        "submitter": {
          "description": "user that created the submission",
          "type": "string"
        },
        "useCallCache": {
          "description": "Whether or not to read from cache for this submission",
          "type": "boolean"
        },
        "workflowFailureMode": {
          "default": "NoNewCalls",
          "description": "What happens after a task fails. Choose from ContinueWhilePossible and NoNewCalls. Defaults to NoNewCalls if not specified. See Cromwell docs for more information.",
          "enum": [
            "NoNewCalls",
            "ContinueWhilePossible"
          ],
          "type": "string"
        },
        "workflows": {
          "description": "Status of Workflow(s)",
          "items": {
            "$ref": "#/definitions/Workflow"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SubmissionRequest": {
      "description": "If the referenced method configuration takes no root entity, do not define `entityType`, `entityName` and `expression`.",
      "properties": {
        "deleteIntermediateOutputFiles": {
          "description": "Whether or not to delete intermediate output files when the workflow completes. See Cromwell docs for more information.",
          "type": "boolean"
        },
        "entityName": {
          "description": "Name of root entity for expression. Optional if the method configuration has no root entity.",
          "type": "string"
        },
        "entityType": {
          "description": "Type of root entity for expression. Optional if the method configuration has no root entity.",
          "type": "string"
        },
        "expression": {
          "description": "Expression that resolves to one or more entities matching the entity type in the method configuration. Optional if the method configuration has no root entity.",
          "type": "string"
        },
        "methodConfigurationName": {
          "description": "Name of the method configuration to execute.",
          "type": "string"
        },
        "methodConfigurationNamespace": {
          "description": "Namespace of the method configuration to execute.",
          "type": "string"
        },
        "useCallCache": {
          "description": "Whether or not to read from cache for this submission.",
          "type": "boolean"
        },
        "workflowFailureMode": {
          "default": "NoNewCalls",
          "description": "What happens after a task fails. Choose from ContinueWhilePossible and NoNewCalls. Defaults to NoNewCalls if not specified. See Cromwell docs for more information.",
          "enum": [
            "NoNewCalls",
            "ContinueWhilePossible"
          ],
          "type": "string"
        }
      },
      "required": [
        "methodConfigurationName",
        "methodConfigurationNamespace",
        "useCallCache"
      ],
      "type": "object"
    },
    "SubmissionStatus": {
      "description": "submission status",
      "enum": [
        "Accepted",
        "Evaluating",
        "Submitting",
        "Submitted",
        "Aborting",
        "Aborted",
        "Done"
      ],
      "type": "string"
    },
    "SubmissionValidationEntityInputs": {
      "description": "the results of parsing each of the inputs for one entity",
      "properties": {
        "entityName": {
          "description": "name of entity",
          "type": "string"
        },
        "inputResolutions": {
          "description": "input resolution",
          "items": {
            "$ref": "#/definitions/SubmissionValidationValue"
          },
          "type": "array"
        }
      },
      "required": [
        "entityName",
        "inputResolutions"
      ],
      "type": "object"
    },
    "SubmissionValidationHeader": {
      "description": "common values for all the entities -- the entity type and the input descriptions",
      "properties": {
        "entityType": {
          "description": "type of entity",
          "type": "string"
        },
        "inputExpressions": {
          "description": "input descriptions",
          "items": {
            "$ref": "#/definitions/SubmissionValidationInput"
          },
          "type": "array"
        }
      },
      "required": [
        "entityType",
        "inputExpressions"
      ],
      "type": "object"
    },
    "SubmissionValidationInput": {
      "description": "method configuration input parameter, it's name and the associated expression from the method config",
      "properties": {
        "expression": {
          "description": "expression for input",
          "type": "string"
        },
        "wdlName": {
          "description": "name of input",
          "type": "string"
        }
      },
      "required": [
        "expression",
        "wdlName"
      ],
      "type": "object"
    },
    "SubmissionValidationReport": {
      "description": "the results of parsing each input for each entity",
      "properties": {
        "header": {
          "$ref": "#/definitions/SubmissionValidationHeader"
        },
        "invalidEntities": {
          "description": "non-runnable entities",
          "items": {
            "$ref": "#/definitions/SubmissionValidationEntityInputs"
          },
          "type": "array"
        },
        "request": {
          "$ref": "#/definitions/SubmissionRequest"
        },
        "validEntities": {
          "description": "runnable entities",
          "items": {
            "$ref": "#/definitions/SubmissionValidationEntityInputs"
          },
          "type": "array"
        }
      },
      "required": [
        "header",
        "invalidEntities",
        "request",
        "validEntities"
      ],
      "type": "object"
    },
    "SubmissionValidationValue": {
      "description": "result of an expression parse for one of the inputs",
      "properties": {
        "error": {
          "description": "parsing error(s)",
          "type": "string"
        },
        "inputName": {
          "description": "name of input",
          "type": "string"
        },
        "value": {
          "description": "the value of the input expression for the specified entity",
          "type": "string"
        }
      },
      "required": [
        "inputName"
      ],
      "type": "object"
    },
    "SubmissionsCountResponse": {
      "properties": {
        "Aborted": {
          "format": "int32",
          "type": "integer"
        },
        "Aborting": {
          "format": "int32",
          "type": "integer"
        },
        "Accepted": {
          "format": "int32",
          "type": "integer"
        },
        "Done": {
          "format": "int32",
          "type": "integer"
        },
        "Evaluating": {
          "format": "int32",
          "type": "integer"
        },
        "Submitted": {
          "format": "int32",
          "type": "integer"
        },
        "Submitting": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "SubsystemStatus": {
      "description": "specifics for each subsystem",
      "properties": {
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ok": {
          "description": "whether this system needs attention",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SystemStatus": {
      "description": "report status of systems Orchestration calls out to",
      "properties": {
        "ok": {
          "description": "whether any system(s) need attention",
          "example": false,
          "type": "boolean"
        },
        "systems": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "Map[String, SubsystemStatus]",
          "example": {
            "Agora": {
              "ok": true
            },
            "Consent": {
              "messages": [
                "ClusterHealth is RED"
              ],
              "ok": false
            },
            "Google": {
              "ok": true
            },
            "Ontology": {
              "ok": true
            },
            "Rawls": {
              "ok": true
            },
            "Search": {
              "ok": true
            },
            "Thurloe": {
              "messages": [
                "Thurloe misbehavior message"
              ],
              "ok": false
            }
          },
          "type": "object"
        }
      },
      "required": [
        "ok",
        "systems"
      ],
      "type": "object"
    },
    "TerraPreference": {
      "description": "Current user's choice of UI views.",
      "properties": {
        "preferTerra": {
          "description": "When true, prefer Terra UI; when false, prefer Legacy FireCloud UI.",
          "type": "boolean"
        },
        "preferTerraLastUpdated": {
          "description": "Epoch timestamp representing when the Terra Preference was last saved.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "Tool": {
      "description": "A tool (or described tool) describes one pairing of a tool as described in a descriptor file (which potentially describes multiple tools) and a Docker image.",
      "properties": {
        "author": {
          "description": "Contact information for the author of this tool entry in the registry. (More complex authorship information is handled by the descriptor)",
          "type": "string"
        },
        "contains": {
          "description": "An array of IDs for the applications that are stored inside this tool (for example `https://bio.tools/tool/mytum.de/SNAP2/1`). This always returns an empty array.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "description": "The description of the tool.",
          "type": "string"
        },
        "id": {
          "description": "A unique identifier of the tool, scoped to this registry, for example `123456` or `123456_v1`",
          "type": "string"
        },
        "meta-version": {
          "description": "The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.",
          "type": "string"
        },
        "organization": {
          "description": "The organization that published the image.",
          "type": "string"
        },
        "signed": {
          "description": "Reports whether this tool has been signed.  This always returns false.",
          "type": "boolean"
        },
        "toolclass": {
          "$ref": "#/definitions/ToolClass"
        },
        "toolname": {
          "description": "The name of the tool.",
          "type": "string"
        },
        "url": {
          "description": "The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456`",
          "type": "string"
        },
        "verified": {
          "description": "Reports whether this tool has been verified by a specific organization or individual.  This always returns false.",
          "type": "boolean"
        },
        "verified-source": {
          "description": "Source of metadata that can support a verified tool, such as an email or URL",
          "type": "string"
        },
        "versions": {
          "description": "A list of versions for this tool",
          "items": {
            "$ref": "#/definitions/ToolVersion"
          },
          "type": "array"
        }
      },
      "required": [
        "author",
        "id",
        "meta-version",
        "organization",
        "toolclass",
        "url",
        "versions"
      ],
      "type": "object"
    },
    "ToolClass": {
      "description": "Describes a class (type) of tool allowing us to categorize workflows, tools, and maybe even other entities (such as services) separately",
      "properties": {
        "description": {
          "description": "A longer explanation of what this class is and what it can accomplish",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier for the class",
          "type": "string"
        },
        "name": {
          "description": "A short friendly name for the class",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolDescriptor": {
      "description": "A tool descriptor is a metadata document that describes one or more tools.",
      "properties": {
        "descriptor": {
          "description": "The descriptor that represents this version of the tool. (WDL)",
          "type": "string"
        },
        "type": {
          "enum": [
            "WDL"
          ],
          "type": "string"
        },
        "url": {
          "description": "Optional url to the tool descriptor used to build this image, should include version information, and can include a git hash (e.g. https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl )",
          "type": "string"
        }
      },
      "required": [
        "descriptor",
        "type"
      ],
      "type": "object"
    },
    "ToolInputParameter": {
      "description": "An input parameter for a tool or workflow.",
      "properties": {
        "default": {
          "description": "The in-language expression used to evaluate a default value for this parameter, if none is supplied.",
          "type": "string"
        },
        "name": {
          "description": "The name of this input value (formatted as expected by the tool)",
          "type": "string"
        },
        "optional": {
          "description": "Whether the tool allows this value to not be specified",
          "type": "boolean"
        },
        "valueType": {
          "$ref": "#/definitions/ValueType"
        }
      },
      "required": [
        "default",
        "name",
        "optional",
        "valueType"
      ],
      "type": "object"
    },
    "ToolOutputParameter": {
      "description": "An output parameter for a tool or workflow.",
      "properties": {
        "name": {
          "description": "The name of this input value (formatted as expected by the tool)",
          "type": "string"
        },
        "valueType": {
          "$ref": "#/definitions/ValueType"
        }
      },
      "required": [
        "name",
        "valueType"
      ],
      "type": "object"
    },
    "ToolVersion": {
      "description": "A tool version describes a particular iteration of a tool as described by a reference to a specific image and dockerfile.",
      "properties": {
        "descriptor-type": {
          "description": "The type (or types) of descriptors available.",
          "items": {
            "enum": [
              "WDL"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "dockerfile": {
          "description": "Reports if this tool has a dockerfile available. This always returns false.",
          "type": "boolean"
        },
        "id": {
          "description": "An identifier of the version of this tool for this particular tool registry, for example `v1`",
          "type": "string"
        },
        "image": {
          "description": "The docker path to the image (and version) for this tool. (e.g. quay.io/seqware/seqware_full/1.1). This always returns an empty string.",
          "type": "string"
        },
        "meta-version": {
          "description": "The version of this tool version in the registry. Iterates when fields like the description, author, etc. are updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the version.",
          "type": "string"
        },
        "url": {
          "description": "The URL for this tool in this registry, for example `http://agora.broadinstitute.org/tools/123456/1`",
          "type": "string"
        }
      },
      "required": [
        "id",
        "meta-version",
        "url"
      ],
      "type": "object"
    },
    "UserImportPermission": {
      "properties": {
        "billingProject": {
          "description": "does the user have at least one ready billing project?",
          "type": "boolean"
        },
        "writableWorkspace": {
          "description": "does the user have at least one writable workspace?",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserInfo": {
      "properties": {
        "userEmail": {
          "description": "User's email",
          "type": "string"
        },
        "userSubjectId": {
          "description": "User's ID (subject id from Google)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidatedMethodConfiguration": {
      "description": "Information about the validity of a method configuration's expressions relative to the method itself",
      "properties": {
        "extraInputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "invalidInputs": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "invalidOutputs": {
          "additionalProperties": {
            "type": "object"
          },
          "type": "object"
        },
        "methodConfiguration": {
          "$ref": "#/definitions/MethodConfiguration"
        },
        "missingInputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "validInputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "validOutputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "extraInputs",
        "invalidInputs",
        "invalidOutputs",
        "methodConfiguration",
        "missingInputs",
        "validInputs",
        "validOutputs"
      ],
      "type": "object"
    },
    "ValueType": {
      "description": "The type expected for a given value.",
      "properties": {
        "arrayType": {
          "$ref": "#/definitions/ValueType"
        },
        "mapType": {
          "$ref": "#/definitions/MapValueType"
        },
        "objectFieldTypes": {
          "items": {
            "properties": {
              "fieldName": {
                "type": "string"
              },
              "fieldType": {
                "$ref": "#/definitions/ValueType"
              }
            },
            "type": "object"
          },
          "type": "array"
        },
        "optionalType": {
          "$ref": "#/definitions/ValueType"
        },
        "tupleTypes": {
          "items": {
            "$ref": "#/definitions/ValueType"
          },
          "type": "array"
        },
        "typeName": {
          "description": "The type of this value",
          "enum": [
            "String",
            "File",
            "Directory",
            "Float",
            "Int",
            "Boolean",
            "Optional",
            "Array",
            "Tuple",
            "Map",
            "Object"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "VersionResponse": {
      "description": "Returns the version of Cromwell",
      "properties": {
        "cromwell": {
          "description": "The version of the Cromwell Engine",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Workflow": {
      "description": "",
      "properties": {
        "cost": {
          "description": "The run cost of this workflow",
          "format": "float",
          "type": "number"
        },
        "inputResolutions": {
          "description": "The evaluation of each input",
          "items": {
            "$ref": "#/definitions/SubmissionValidationValue"
          },
          "type": "array"
        },
        "messages": {
          "description": "List of messages about this workflow",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/WorkflowStatus"
        },
        "statusLastChangedDate": {
          "description": "Status last-changed date",
          "format": "date-time",
          "type": "string"
        },
        "workflowEntity": {
          "$ref": "#/definitions/AttributeEntityReference"
        },
        "workflowId": {
          "description": "Workflow unique identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowCacheDiffResponse": {
      "properties": {
        "callA": {
          "$ref": "#/definitions/WorkflowCallDiff"
        },
        "callB": {
          "$ref": "#/definitions/WorkflowCallDiff"
        },
        "hashDifferential": {
          "items": {
            "$ref": "#/definitions/WorkflowCallDiffCallHashDiff"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "WorkflowCallDiff": {
      "properties": {
        "allowResultReuse": {
          "type": "boolean"
        },
        "callFqn": {
          "type": "string"
        },
        "executionStatus": {
          "type": "string"
        },
        "jobIndex": {
          "type": "number"
        },
        "workflowId": {
          "$ref": "#/x-components/parameters/workflowIdParam"
        }
      },
      "type": "object"
    },
    "WorkflowCallDiffCallHashDiff": {
      "properties": {
        "callA": {
          "type": "string"
        },
        "callB": {
          "type": "string"
        },
        "hashKey": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowCost": {
      "description": "The cost of a workflow, if available",
      "properties": {
        "cost": {
          "description": "Workflow cost",
          "format": "float",
          "type": "number"
        },
        "workflowId": {
          "description": "The id of this workflow",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowDescription": {
      "properties": {
        "errors": {
          "description": "The set of validation failure messages",
          "example": [
            "The 'errors' field will be filled if 'valid' is false",
            "We might also provide warnings to a 'valid' workflow here",
            "Otherwise, 'errors' will be the empty array"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "inputs": {
          "description": "A list of inputs for this tool",
          "example": [
            {
              "name": "my_wf.string_input",
              "optional": false,
              "typeDisplayName": "String",
              "valueType": {
                "typeName": "String"
              }
            },
            {
              "name": "my_wf.array_input",
              "optional": false,
              "typeDisplayName": "Array[String]",
              "valueType": {
                "arrayType": {
                  "typeName": "String"
                },
                "typeName": "Array"
              }
            },
            {
              "default": "hello",
              "name": "my_wf.optional_input",
              "optional": true,
              "typeDisplayName": "String?",
              "valueType": {
                "optionalType": {
                  "typeName": "String"
                },
                "typeName": "Optional"
              }
            },
            {
              "name": "my_wf.map_input",
              "optional": false,
              "typeDisplayName": "Map[String, Int]",
              "valueType": {
                "mapType": {
                  "keyType": {
                    "typeName": "String"
                  },
                  "valueType": {
                    "typeName": "Int"
                  }
                },
                "typeName": "Map"
              }
            },
            {
              "name": "my_wf.object_input",
              "optional": false,
              "typeDisplayName": "Object",
              "valueType": {
                "objectFieldTypes": [
                  {
                    "fieldName": "int_field",
                    "fieldType": {
                      "typeName": "Int"
                    }
                  },
                  {
                    "fieldName": "int_array_field",
                    "fieldType": {
                      "arrayType": {
                        "typeName": "Int"
                      },
                      "typeName": "Array"
                    }
                  }
                ],
                "typeName": "Object"
              }
            },
            {
              "name": "my_wf.int_string_pair_input",
              "optional": false,
              "typeDisplayName": "Pair[Int, String]",
              "valueType": {
                "pairTypes": [
                  {
                    "leftType": [
                      {
                        "typeName": "Int"
                      }
                    ]
                  },
                  {
                    "rightType": [
                      {
                        "typeName": "String"
                      }
                    ]
                  }
                ],
                "typeName": "Pair"
              }
            }
          ],
          "items": {
            "$ref": "#/definitions/ToolInputParameter"
          },
          "type": "array"
        },
        "name": {
          "description": "For a source file with one workflow and zero or more tasks, the name of the workflow. For a single task, the name of the task. For a source file with multiple tasks but no workflows, the empty string.",
          "type": "string"
        },
        "outputs": {
          "description": "A list of outputs for this tool",
          "example": [
            {
              "name": "my_wf.string_output",
              "typeDisplayName": "String",
              "valueType": {
                "typeName": "String"
              }
            },
            {
              "name": "my_wf.array_output",
              "typeDisplayName": "Array[String]",
              "valueType": {
                "arrayType": {
                  "typeName": "String"
                },
                "typeName": "Array"
              }
            },
            {
              "name": "my_wf.map_output",
              "typeDisplayName": "Map[String, Int]",
              "valueType": {
                "mapType": {
                  "keyType": {
                    "typeName": "String"
                  },
                  "valueType": {
                    "typeName": "Int"
                  }
                },
                "typeName": "Map"
              }
            },
            {
              "name": "my_wf.object_output",
              "typeDisplayName": "Object",
              "valueType": {
                "objectFieldTypes": [
                  {
                    "fieldName": "int_field",
                    "fieldType": {
                      "typeName": "Int"
                    }
                  },
                  {
                    "fieldName": "int_array_field",
                    "fieldType": {
                      "arrayType": {
                        "typeName": "Int"
                      },
                      "typeName": "Array"
                    }
                  }
                ],
                "typeName": "Object"
              }
            },
            {
              "name": "my_wf.int_string_pair_output",
              "typeDisplayName": "Pair[Int, String]",
              "valueType": {
                "tupleTypes": [
                  {
                    "typeName": "Int"
                  },
                  {
                    "typeName": "String"
                  }
                ],
                "typeName": "Pair"
              }
            }
          ],
          "items": {
            "$ref": "#/definitions/ToolOutputParameter"
          },
          "type": "array"
        },
        "submittedDescriptorType": {
          "$ref": "#/definitions/DescriptorTypeAndVersion"
        },
        "valid": {
          "description": "Whether the workflow and inputs as submitted passed validation",
          "type": "boolean"
        }
      },
      "required": [
        "errors",
        "inputs",
        "name",
        "outputs",
        "submittedDescriptorType",
        "valid"
      ],
      "type": "object"
    },
    "WorkflowMetadataResponse": {
      "description": "Workflow and call level metadata",
      "properties": {
        "calls": {
          "$ref": "#/definitions/CallMetadata"
        },
        "end": {
          "description": "End datetime of the workflow in ISO8601 format with milliseconds",
          "format": "date-time",
          "type": "string"
        },
        "failures": {
          "$ref": "#/definitions/FailureMessage"
        },
        "id": {
          "description": "The identifier of the workflow",
          "type": "string"
        },
        "inputs": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "Map of input keys to input values",
          "type": "object"
        },
        "outputs": {
          "additionalProperties": {
            "type": "object"
          },
          "description": "Map of output keys to output values",
          "type": "object"
        },
        "start": {
          "description": "Start datetime of the workflow in ISO8601 format with milliseconds",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "The status of the workflow",
          "type": "string"
        },
        "submission": {
          "description": "Submission datetime of the workflow in ISO8601 format with milliseconds",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "id",
        "status",
        "submission"
      ],
      "type": "object"
    },
    "WorkflowQueryParameter": {
      "description": "Workflow query parameters",
      "properties": {
        "end": {
          "description": "Returns only workflows with an equal or earlier end datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.\n",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Returns only workflows with the specified workflow id.  If specified multiple times, returns workflows with any of the specified workflow ids.\n",
          "pattern": "^[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}$",
          "type": "string"
        },
        "name": {
          "description": "Returns only workflows with the specified name.  If specified multiple times, returns workflows with any of the specified names.\n",
          "pattern": "^[a-zA-Z][a-zA-Z0-9_]*$",
          "type": "string"
        },
        "start": {
          "description": "Returns only workflows with an equal or later start datetime.  Can be specified at most once. If both start and end date are specified, start date must be before or equal to end date.\n",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Returns only workflows with the specified status.  If specified multiple times, returns workflows in any of the specified statuses.\n",
          "enum": [
            "Submitted",
            "Running",
            "Aborting",
            "Failed",
            "Succeeded",
            "Aborted"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowQueryResponse": {
      "description": "Response to a workflow query",
      "properties": {
        "results": {
          "items": {
            "$ref": "#/definitions/WorkflowQueryResult"
          },
          "type": "array"
        }
      },
      "required": [
        "results"
      ],
      "type": "object"
    },
    "WorkflowQueryResult": {
      "description": "Result for an individual workflow returned by a workflow query",
      "properties": {
        "end": {
          "description": "Workflow end datetime",
          "format": "date-time",
          "type": "string"
        },
        "id": {
          "description": "Workflow ID",
          "type": "string"
        },
        "name": {
          "description": "Workflow name",
          "type": "string"
        },
        "start": {
          "description": "Workflow start datetime",
          "format": "date-time",
          "type": "string"
        },
        "status": {
          "description": "Workflow status",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "start",
        "status"
      ],
      "type": "object"
    },
    "WorkflowQueueStatusResponse": {
      "description": "Information about the status of workflows and the workflow queue",
      "properties": {
        "estimatedQueueTimeMS": {
          "description": "estimated milliseconds until the current queue is submitted",
          "format": "int64",
          "type": "integer"
        },
        "workflowCountsByStatus": {
          "additionalProperties": {
            "format": "int32",
            "type": "integer"
          },
          "description": "Map[String,Int]",
          "type": "object"
        },
        "workflowsBeforeNextUserWorkflow": {
          "description": "the number of workflows in the queue ahead of the user's first workflow",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "estimatedQueueTimeMS",
        "workflowCountsByStatus",
        "workflowsBeforeNextUserWorkflow"
      ],
      "type": "object"
    },
    "WorkflowStatus": {
      "description": "workflow status",
      "enum": [
        "Queued",
        "Launching",
        "Submitted",
        "Running",
        "Failed",
        "Succeeded",
        "Aborting",
        "Aborted",
        "Unknown"
      ],
      "type": "string"
    },
    "WorkflowStatusResponse": {
      "properties": {
        "id": {
          "description": "The identifier of the workflow",
          "type": "string"
        },
        "status": {
          "description": "The status of the workflow",
          "type": "string"
        }
      },
      "required": [
        "id",
        "status"
      ],
      "type": "object"
    },
    "Workspace": {
      "description": "",
      "properties": {
        "accessLevels": {
          "additionalProperties": {
            "$ref": "#/definitions/RawlsGroupRef"
          },
          "description": "Map[String, RawlsGroupRef]",
          "type": "object"
        },
        "attributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map[String, Attribute]",
          "type": "object"
        },
        "authDomainACLs": {
          "additionalProperties": {
            "$ref": "#/definitions/RawlsGroupRef"
          },
          "description": "Map[String, RawlsGroupRef]",
          "type": "object"
        },
        "authorizationDomain": {
          "description": "The list of groups to form the Authorization Domain (empty if no Authorization Domain is set)",
          "items": {
            "$ref": "#/definitions/ManagedGroupRef"
          },
          "type": "array"
        },
        "bucketName": {
          "description": "The name of the bucket associated with the workspace",
          "type": "string"
        },
        "createdBy": {
          "description": "The user who created the workspace",
          "type": "string"
        },
        "createdDate": {
          "description": "The date the workspace was created in yyyy-MM-ddTHH:mm:ss.SSSZZ format",
          "format": "date-time",
          "type": "string"
        },
        "isLocked": {
          "description": "Can the Workspace currently be modified?",
          "type": "boolean"
        },
        "lastModified": {
          "description": "The date the workspace was last modified in yyyy-MM-ddTHH:mm:ss.SSSZZ format",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace the workspace belongs to",
          "type": "string"
        },
        "workspaceId": {
          "description": "A UUID associated with the workspace",
          "type": "string"
        }
      },
      "required": [
        "accessLevels",
        "attributes",
        "authDomainACLs",
        "authorizationDomain",
        "bucketName",
        "createdBy",
        "createdDate",
        "isLocked",
        "lastModified",
        "name",
        "namespace",
        "workspaceId"
      ],
      "type": "object"
    },
    "WorkspaceACL": {
      "description": "",
      "properties": {
        "acl": {
          "additionalProperties": {
            "$ref": "#/definitions/WorkspaceAccessEntry"
          },
          "description": "Map[String, WorkspaceAccessEntry]",
          "type": "object"
        }
      },
      "required": [
        "acl"
      ],
      "type": "object"
    },
    "WorkspaceACLUpdate": {
      "description": "",
      "properties": {
        "accessLevel": {
          "description": "The access level to grant to this user or group (OWNER, READER, WRITER, NO ACCESS)",
          "type": "string"
        },
        "canCompute": {
          "description": "Set to true if you want this user to be able to launch compute in this workspace, may not be true for readers, default false for reader, true otherwise",
          "type": "boolean"
        },
        "canShare": {
          "description": "Set to true if you want this user to be able to share the workspace with other users, only meaningful for readers and writers, default false",
          "type": "boolean"
        },
        "email": {
          "description": "email address of the user or group whose permissions will be changed",
          "type": "string"
        }
      },
      "required": [
        "accessLevel",
        "email"
      ],
      "type": "object"
    },
    "WorkspaceACLUpdateResponse": {
      "description": "",
      "properties": {
        "accessLevel": {
          "description": "The access level granted to this user or group (OWNER, READER, WRITER, NO ACCESS)",
          "type": "string"
        },
        "subjectId": {
          "description": "id of the user or group whose permissions will be changed",
          "type": "string"
        }
      },
      "required": [
        "accessLevel",
        "subjectId"
      ],
      "type": "object"
    },
    "WorkspaceACLUpdateResponseList": {
      "description": "",
      "properties": {
        "invitesSent": {
          "description": "the list of invites that were sent",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdate"
          },
          "type": "array"
        },
        "invitesUpdated": {
          "description": "the list of invites that were updated",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdate"
          },
          "type": "array"
        },
        "usersNotFound": {
          "description": "the users or groups who were not found",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdate"
          },
          "type": "array"
        },
        "usersUpdated": {
          "description": "the users or groups who were updated",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdateResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "invitesSent",
        "invitesUpdated",
        "usersNotFound",
        "usersUpdated"
      ],
      "type": "object"
    },
    "WorkspaceAccessEntry": {
      "description": "",
      "properties": {
        "accessLevel": {
          "description": "The access level granted to this user or group (OWNER, READER, WRITER, NO ACCESS)",
          "type": "string"
        },
        "canCompute": {
          "description": "True if the user can launch compute in this workspace, false otherwise",
          "type": "boolean"
        },
        "canShare": {
          "description": "True if the user can share the workspace with others, false otherwise",
          "type": "boolean"
        },
        "pending": {
          "description": "The status of the users access",
          "type": "boolean"
        }
      },
      "required": [
        "accessLevel",
        "canCompute",
        "canShare",
        "pending"
      ],
      "type": "object"
    },
    "WorkspaceAccessLevel": {
      "description": "The level of access a user or group has on a Workspace. NoAccess, Read, Write, Owner, ProjectOwner",
      "enum": [
        "PROJECT_OWNER",
        "OWNER",
        "WRITER",
        "READER",
        "NO ACCESS"
      ],
      "type": "string"
    },
    "WorkspaceBucketOptions": {
      "description": "Extra information about a GCS bucket attached to a workspace",
      "properties": {
        "requesterPays": {
          "description": "Whether the bucket is requester pays",
          "type": "boolean"
        }
      },
      "required": [
        "requesterPays"
      ],
      "type": "object"
    },
    "WorkspaceCatalog": {
      "description": "",
      "properties": {
        "catalog": {
          "description": "Set to true if you want this user to be able to perform library related operations on the workspace",
          "type": "boolean"
        },
        "email": {
          "description": "email address of the user or group whose permissions will be changed",
          "type": "string"
        }
      },
      "required": [
        "catalog",
        "email"
      ],
      "type": "object"
    },
    "WorkspaceCatalogResponse": {
      "description": "",
      "properties": {
        "catalog": {
          "description": "Set to true if you want this user to be able to perform library related operations on the workspace",
          "type": "boolean"
        },
        "subjectId": {
          "description": "subject id of the user or group whose permissions were changed",
          "type": "string"
        }
      },
      "required": [
        "catalog",
        "subjectId"
      ],
      "type": "object"
    },
    "WorkspaceCatalogUpdateResponseList": {
      "description": "",
      "properties": {
        "emailsNotFound": {
          "description": "the emails of users or groups who were not found",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "usersUpdated": {
          "description": "the users or groups who were updated",
          "items": {
            "$ref": "#/definitions/WorkspaceCatalogResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "emailsNotFound",
        "usersUpdated"
      ],
      "type": "object"
    },
    "WorkspaceDetails": {
      "description": "",
      "properties": {
        "attributes": {
          "description": "Map[String, Attribute]",
          "properties": {},
          "type": "object"
        },
        "authorizationDomain": {
          "description": "The list of groups in the Authorization Domain (empty if no AD is set)",
          "items": {
            "$ref": "#/definitions/ManagedGroupRef"
          },
          "type": "array"
        },
        "bucketName": {
          "description": "The name of the bucket associated with the workspace",
          "type": "string"
        },
        "createdBy": {
          "description": "The user who created the workspace",
          "type": "string"
        },
        "createdDate": {
          "description": "The date the workspace was created in yyyy-MM-ddTHH:mm:ss.SSSZZ format",
          "format": "date-time",
          "type": "string"
        },
        "isLocked": {
          "description": "Can the Workspace currently be modified?",
          "type": "boolean"
        },
        "lastModified": {
          "description": "The date the workspace was last modified in yyyy-MM-ddTHH:mm:ss.SSSZZ format",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace the workspace belongs to",
          "type": "string"
        },
        "workflowCollectionName": {
          "description": "The name of the workflow collection associated with the workspace",
          "type": "string"
        },
        "workspaceId": {
          "description": "A UUID associated with the workspace",
          "type": "string"
        }
      },
      "required": [
        "bucketName",
        "createdBy",
        "createdDate",
        "isLocked",
        "lastModified",
        "name",
        "namespace",
        "workspaceId"
      ],
      "type": "object"
    },
    "WorkspaceListResponse": {
      "description": "",
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/WorkspaceAccessLevel"
        },
        "public": {
          "type": "boolean"
        },
        "workspace": {
          "$ref": "#/definitions/WorkspaceDetails"
        },
        "workspaceSubmissionStats": {
          "$ref": "#/definitions/WorkspaceSubmissionStats"
        }
      },
      "type": "object"
    },
    "WorkspaceRequest": {
      "description": "",
      "properties": {
        "attributes": {
          "properties": {},
          "type": "object"
        },
        "authorizationDomain": {
          "description": "The list of groups in the Authorization Domain (empty if no AD is set)",
          "items": {
            "$ref": "#/definitions/ManagedGroupRef"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace (billing project) the workspace belongs to",
          "type": "string"
        },
        "noWorkspaceOwner": {
          "default": false,
          "description": "Optional, false if not specified. If true, the workspace is created with a Billing Project owner but no workspace owner. Requires being a Billing Project owner.",
          "type": "boolean"
        }
      },
      "required": [
        "attributes",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "WorkspaceRequestClone": {
      "description": "",
      "properties": {
        "attributes": {
          "properties": {},
          "type": "object"
        },
        "authorizationDomain": {
          "description": "The list of groups in the Authorization Domain (empty if no AD is set)",
          "items": {
            "$ref": "#/definitions/ManagedGroupRef"
          },
          "type": "array"
        },
        "copyFilesWithPrefix": {
          "description": "Used for clone operations only; the prefix for files to copy between source and destination workspace buckets",
          "type": "string"
        },
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace (billing project) the workspace belongs to",
          "type": "string"
        },
        "noWorkspaceOwner": {
          "default": false,
          "description": "Optional, false if not specified. If true, the workspace is created with a Billing Project owner but no workspace owner. Requires being a Billing Project owner.",
          "type": "boolean"
        }
      },
      "required": [
        "attributes",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "WorkspaceResponse": {
      "description": "",
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/WorkspaceAccessLevel"
        },
        "bucketOptions": {
          "$ref": "#/definitions/WorkspaceBucketOptions"
        },
        "canCompute": {
          "type": "boolean"
        },
        "canShare": {
          "type": "boolean"
        },
        "catalog": {
          "type": "boolean"
        },
        "owners": {
          "description": "Owners of this workspace. This API only lists owners; use the get-workspace-ACL API to get the full list of all users at all permission levels.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workspace": {
          "$ref": "#/definitions/WorkspaceDetails"
        },
        "workspaceSubmissionStats": {
          "$ref": "#/definitions/WorkspaceSubmissionStats"
        }
      },
      "type": "object"
    },
    "WorkspaceSubmissionStats": {
      "description": "Statistics about submissions in a workspace",
      "properties": {
        "lastFailureDate": {
          "description": "The date of the last failed submission",
          "format": "date-time",
          "type": "string"
        },
        "lastSuccessDate": {
          "description": "The date of the last successful submission",
          "format": "date-time",
          "type": "string"
        },
        "runningSubmissionsCount": {
          "description": "Count of all the running submissions",
          "type": "integer"
        }
      },
      "required": [
        "runningSubmissionsCount"
      ],
      "type": "object"
    },
    "WorkspaceTag": {
      "properties": {
        "count": {
          "description": "number of usages of the tag across Firecloud",
          "example": 5,
          "format": "int32",
          "type": "integer"
        },
        "tag": {
          "description": "tag string",
          "example": "a tag",
          "type": "string"
        }
      },
      "required": [
        "count",
        "tag"
      ],
      "type": "object"
    },
    "structuredDataRequest": {
      "properties": {
        "aggregateLevelDataProhibited": {
          "description": "Is future use of aggregate-level data for general research purposes prohibited?",
          "type": "boolean"
        },
        "commercialUseProhibited": {
          "description": "Is future commercial use prohibited?",
          "type": "boolean"
        },
        "controlsUseProhibited": {
          "description": "Is future use as a control set for diseases other than those specified prohibited?",
          "type": "boolean"
        },
        "diseaseUseRequired": {
          "description": "Future use is limited to research involving the following disease area(s). These values must be urls such as \"http://purl.obolibrary.org/obo/DOID_12345\".",
          "items": {
            "example": "http://purl.obolibrary.org/obo/DOID_4",
            "type": "string"
          },
          "type": "array"
        },
        "forProfitUseProhibited": {
          "description": "Is future use by for-profit entities prohibited?",
          "type": "boolean"
        },
        "genderUseRequired": {
          "description": "If future use is limited to research involving a particular gender, specify \"male\" or \"female\". Any other value will be read as false. This field is case-insensitive.",
          "type": "string"
        },
        "generalResearchUse": {
          "description": "Is the data available for future general research use?",
          "type": "boolean"
        },
        "healthMedicalBiomedicalUseRequired": {
          "description": "Is future use limited for health/medical/biomedical research?",
          "type": "boolean"
        },
        "irbRequired": {
          "description": "Should the requester provide documentation of local IRB/REC approval?",
          "type": "boolean"
        },
        "methodsResearchProhibited": {
          "description": "Is future use for methods research (analytic/software/technology development) outside the bounds of the other specified restrictions prohibited?",
          "type": "boolean"
        },
        "pediatricResearchRequired": {
          "description": "Is future use limited to pediatric research?",
          "type": "boolean"
        },
        "prefix": {
          "description": "Optional. A prefix that is prepended to the field names of the responses. This is purely for personalization.",
          "type": "string"
        }
      },
      "required": [
        "aggregateLevelDataProhibited",
        "commercialUseProhibited",
        "controlsUseProhibited",
        "diseaseUseRequired",
        "forProfitUseProhibited",
        "genderUseRequired",
        "generalResearchUse",
        "healthMedicalBiomedicalUseRequired",
        "irbRequired",
        "methodsResearchProhibited",
        "pediatricResearchRequired"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "googleoauth": {
      "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
      "flow": "implicit",
      "scopes": {
        "email": "email authorization",
        "https://www.googleapis.com/auth/cloud-billing": "GCS billing",
        "openid": "open id authorization",
        "profile": "profile authorization"
      },
      "type": "oauth2"
    }
  },
  "security": [
    {
      "googleoauth": [
        "openid",
        "email",
        "profile"
      ]
    }
  ],
  "x-components": {
    "parameters": {
      "configNameParam": {
        "description": "Method Configuration Name",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "configNamespaceParam": {
        "description": "Method Configuration Namespace",
        "in": "path",
        "name": "namespace",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "configSnapshotId": {
        "description": "Method Configuration snapshot ID",
        "in": "path",
        "name": "snapshotId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "entityNameParam": {
        "description": "Entity Name",
        "in": "path",
        "name": "entityName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "entityTypeParam": {
        "description": "Entity Type",
        "in": "path",
        "name": "entityType",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "jobIdParam": {
        "description": "Operations job ID from Google Genomics API",
        "in": "path",
        "name": "jobId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "methodNameParam": {
        "description": "Method Name",
        "in": "path",
        "name": "name",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "methodNamespaceParam": {
        "description": "Method Namespace",
        "in": "path",
        "name": "namespace",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "methodSnapshotId": {
        "description": "Method snapshot ID",
        "in": "path",
        "name": "snapshotId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "submissionIdParam": {
        "description": "Submission ID",
        "in": "path",
        "name": "submissionId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "versionParam": {
        "description": "Cromwell API Version",
        "in": "path",
        "name": "version",
        "required": true,
        "schema": {
          "default": "v1",
          "type": "string"
        }
      },
      "workflowIdParam": {
        "description": "Workflow ID",
        "in": "path",
        "name": "workflowId",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "workspaceNameParam": {
        "description": "Workspace Name",
        "in": "path",
        "name": "workspaceName",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "workspaceNamespaceParam": {
        "description": "Workspace Namespace",
        "in": "path",
        "name": "workspaceNamespace",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    },
    "requestBodies": {
      "configACLPayload": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/definitions/MethodConfigACL"
            }
          }
        },
        "description": "the ACLs to upsert",
        "required": true
      },
      "preferencesParam": {
        "content": {
          "application/json": {
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          }
        },
        "description": "The preferences to set as a Map[String, String]",
        "required": true
      }
    }
  }
}
