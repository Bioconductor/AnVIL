{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "workspace@broadinstitute.org"
    },
    "description": "Workspace",
    "license": {
      "name": "BSD",
      "url": "http://opensource.org/licenses/BSD-3-Clause"
    },
    "termsOfService": "http://www.github.com/broadinstitute/rawls",
    "title": "Workspace API",
    "version": "1.0.0"
  },
  "basePath": "/",
  "paths": {
    "/api/admin/project/registration": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "create project request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RawlsBillingProjectTransfer"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful project record creation"
          },
          "403": {
            "description": "You must be an admin to call this endpoint."
          },
          "404": {
            "description": "Missing required parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "operationId": "recordProjectOwnership",
        "summary": "create a record of project ownership",
        "x-codegen-request-body-name": "createProjectRequest"
      }
    },
    "/api/admin/project/registration/{projectName}": {
      "delete": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of the project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "properties": {
                "newOwnerEmail": {
                  "description": "Email of the current owner",
                  "type": "string"
                },
                "newOwnerToken": {
                  "description": "OAuth2Token of the current owner",
                  "type": "string"
                }
              },
              "required": [
                "newOwnerEmail",
                "newOwnerToken"
              ],
              "type": "object"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful project record removal"
          },
          "403": {
            "description": "You must be an admin to call this endpoint."
          },
          "404": {
            "description": "Missing required parameter"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "operationId": "unregisterBillingProject",
        "summary": "remove the record for a billing project",
        "x-codegen-request-body-name": "ownerInfo"
      }
    },
    "/api/admin/refreshToken/{userSubjectId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "user's subject id",
            "in": "path",
            "name": "userSubjectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "user's refresh token revoked and removed"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "revoke and remove a user's refresh token",
        "operationId": "admin_delete_refresh_token",
        "summary": "Admin revoke and remove a user's refresh token"
      }
    },
    "/api/admin/statistics": {
      "get": {
        "parameters": [
          {
            "description": "start date (YYYY-MM-DD, or any string valid for Java's DateTime.parse())",
            "format": "date",
            "in": "query",
            "name": "startDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "end date (YYYY-MM-DD, or any string valid for Java's DateTime.parse())",
            "format": "date",
            "in": "query",
            "name": "endDate",
            "required": true,
            "type": "string"
          },
          {
            "description": "namespace to query when calculating entity statistics; leave blank for all",
            "in": "query",
            "name": "workspaceNamespace",
            "type": "string"
          },
          {
            "description": "name to query when calculating entity statistics; leave blank for all",
            "in": "query",
            "name": "workspaceName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "FireCloud statistics"
          },
          "403": {
            "description": "You must be an admin"
          },
          "500": {
            "description": "Rawls Internal Error"
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin"
        ],
        "description": "retrieve statistics for a window on FireCloud",
        "operationId": "admin_statistics_get",
        "summary": "retrieve statistics on FireCloud"
      }
    },
    "/api/admin/submissions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/ActiveSubmission"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "You must be an admin to list active submissions",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "502": {
            "description": "Trouble talking to Google",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin",
          "submissions"
        ],
        "description": "List all active submissions in all workspaces",
        "operationId": "listAllActiveSubmissions",
        "summary": "list active submissions"
      }
    },
    "/api/admin/submissions/queueStatusByUser": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "$ref": "#/definitions/WorkflowQueueStatusByUserResponse"
            }
          },
          "403": {
            "description": "You must be an admin",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin",
          "submissions"
        ],
        "description": "List workflow counts by queueing state and by user",
        "operationId": "workflowQueueStatusByUser",
        "summary": "workflow queue status by user"
      }
    },
    "/api/admin/submissions/{workspaceNamespace}/{workspaceName}/{submissionId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "workspaceNamespace of the submission",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "workspaceName of the submission",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "id of the submission",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "403": {
            "description": "You must be an admin to abort a submission",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "502": {
            "description": "Trouble talking to Google or Cromwell",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin",
          "submissions"
        ],
        "description": "Administratively abort an active submission",
        "operationId": "adminAbortSubmission",
        "summary": "abort a submission"
      }
    },
    "/api/admin/user/role/curator/{userEmail}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "email of user",
            "in": "path",
            "name": "userEmail",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin",
          "users"
        ],
        "description": "removes a user from the list of curators",
        "operationId": "adminRemoveCurator",
        "summary": "Remove a library curator"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "email of user",
            "in": "path",
            "name": "userEmail",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin",
          "users"
        ],
        "description": "adds a user to the list of curators",
        "operationId": "adminAddCurator",
        "summary": "Add a library curator"
      }
    },
    "/api/admin/workspaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Optional workspace attribute to filter on",
            "in": "query",
            "name": "attributeName",
            "type": "string"
          },
          {
            "description": "attribute value (for String attributes)",
            "in": "query",
            "name": "valueString",
            "type": "string"
          },
          {
            "description": "attribute value (for numerical attributes)",
            "in": "query",
            "name": "valueNumber",
            "type": "number"
          },
          {
            "description": "attribute value (for boolean attributes)",
            "in": "query",
            "name": "valueBoolean",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceDetails"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "You must be an admin to list workspaces",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "admin",
          "workspaces"
        ],
        "description": "List all workspaces",
        "operationId": "listAllWorkspaces",
        "summary": "list all workspaces"
      }
    },
    "/api/billing": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "create project request",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRawlsBillingProjectFullRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully Created Billing Project in Rawls and Google"
          },
          "400": {
            "description": "firecloud billing user must be a user of the billing account",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "You must be a user of the google billing account and have permissions on the service perimeter if one is specified",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "project already exists in rawls or google"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile",
              "https://www.googleapis.com/auth/cloud-billing"
            ]
          }
        ],
        "tags": [
          "billing"
        ],
        "description": "create new billing project in rawls and google",
        "operationId": "createBillingProjectFull",
        "summary": "create billing project in rawls and google",
        "x-codegen-request-body-name": "createProjectRequest"
      }
    },
    "/api/billing/{projectId}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/RawlsBillingProjectMember"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "You must be a project owner to view the members of a project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "billing"
        ],
        "description": "list members of billing project the caller owns",
        "operationId": "listBillingProjectMembers",
        "summary": "list members of billing project the caller owns"
      }
    },
    "/api/billing/{projectId}/{workbenchRole}/{email}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "role of user for project",
            "enum": [
              "user",
              "owner"
            ],
            "in": "path",
            "name": "workbenchRole",
            "required": true,
            "type": "string"
          },
          {
            "description": "email of user or group to remove",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Removed User From Billing Project"
          },
          "403": {
            "description": "You must be a project owner to add a user to a billing project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "billing"
        ],
        "description": "remove user or group from billing project the caller owns",
        "operationId": "removeUserFromBillingProject",
        "summary": "remove user or group from billing project the caller owns"
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Project ID",
            "in": "path",
            "name": "projectId",
            "required": true,
            "type": "string"
          },
          {
            "description": "role of user for project",
            "enum": [
              "user",
              "owner"
            ],
            "in": "path",
            "name": "workbenchRole",
            "required": true,
            "type": "string"
          },
          {
            "description": "email of user or group to add",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully Added User/Group To Billing Project"
          },
          "403": {
            "description": "You must be a project owner to add a user to a billing project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "billing"
        ],
        "description": "add user or group to billing project the caller owns",
        "operationId": "addUserToBillingProject",
        "summary": "add user or group to billing project the caller owns"
      }
    },
    "/api/methodconfigs/copy": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Source and destination method configuration names",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfigurationNamePair"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "headers": {
              "Location": {
                "description": "The path to the copied method configuration",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/MethodConfiguration"
            }
          },
          "403": {
            "description": "Invalid attribute namespace(s) in outputs",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Source workspace or method configuration not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Destination method configuration by that name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Copy method configuration from another workspace",
        "operationId": "copy_method_configuration",
        "summary": "Copy method configuration in a workspace from another workspace",
        "x-codegen-request-body-name": "methodConfigurationNamePair"
      }
    },
    "/api/methodconfigs/copyFromMethodRepo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Import from Method Repository",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodRepoConfigurationImport"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "headers": {
              "Location": {
                "description": "The path to the newly created method configuration",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/MethodConfiguration"
            }
          },
          "403": {
            "description": "Invalid attribute namespace(s) in outputs",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Source method configuration not found in method repo",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Destination method configuration by that name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "422": {
            "description": "Error parsing source method configuration",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Copy a method configuration from method repo to a workspace",
        "operationId": "copy_repo_configuration",
        "summary": "Copy method configuration from the method repository",
        "x-codegen-request-body-name": "methodRepoImport"
      }
    },
    "/api/methodconfigs/copyToMethodRepo": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Export to Method Repository",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodRepoConfigurationExport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/AgoraEntity"
            }
          },
          "404": {
            "description": "Source method configuration not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Copy method configuration from workspace to method repo",
        "operationId": "copy_configuration_to_repo",
        "summary": "Copy method configuration from workspace to the method repository",
        "x-codegen-request-body-name": "methodRepoExport"
      }
    },
    "/api/methodconfigs/inputsOutputs": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of method to use for template",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodRepoMethod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/MethodInputsOutputs"
            }
          },
          "400": {
            "description": "Method WDL can't be parsed",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "No such method",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Get information about a method's inputs and outputs",
        "operationId": "method_inputs_outputs",
        "summary": "Get information about a method's inputs and outputs",
        "x-codegen-request-body-name": "methodName"
      }
    },
    "/api/methodconfigs/template": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "name of method to use for template",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodRepoMethod"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/MethodConfiguration"
            }
          },
          "400": {
            "description": "Method WDL can't be parsed",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "No such method",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Create a template for a method configuration from a method in the method repository",
        "operationId": "method_config_template",
        "summary": "Create a template for a method configuration from a method in the method repository",
        "x-codegen-request-body-name": "methodName"
      }
    },
    "/api/notifications/general": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/NotificationType"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "notifications"
        ],
        "operationId": "generalNotifications",
        "summary": "Gets the general notifications available"
      }
    },
    "/api/notifications/workspace/{workspaceNamespace}/{workspaceName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "workspace namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "workspace name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/NotificationType"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "notifications"
        ],
        "operationId": "workspaceNotifications",
        "summary": "Gets the notifications available for a workspace"
      }
    },
    "/api/servicePerimeters/{servicePerimeterName}/projects/{projectName}": {
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Fully qualified google service perimeter name in the form of accessPolicies/[POLICY NUMBER]/servicePerimeters/[NAME], url encoded",
            "in": "path",
            "name": "servicePerimeterName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Project name",
            "in": "path",
            "name": "projectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful request, check the project's status for completion"
          },
          "400": {
            "description": "Project is already in perimeter or is not in 'Ready' state",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "Project does not exist or you do not have access",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Service Perimeter does not exist or you do not have access",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "servicePerimeters"
        ],
        "description": "Add a project to a service perimeter, must have 'add_to_service_perimeter' action on project and 'add_project' action on perimeter, included in owner role for both",
        "operationId": "addProjectToServicePerimeter",
        "summary": "Add a project to a service perimeter"
      }
    },
    "/api/submissions/queueStatus": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowQueueStatusResponse"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "List workflow counts by queueing state",
        "operationId": "workflowQueueStatus",
        "summary": "workflow queue status"
      }
    },
    "/api/user/billing": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "description": "list of billing projects for this user",
              "items": {
                "$ref": "#/definitions/RawlsBillingProjectMembership"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "User not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "billing",
          "users"
        ],
        "description": "list billing projects for a user",
        "operationId": "listUserBillingProjects",
        "summary": "list billing projects for a user"
      }
    },
    "/api/user/billing/{projectName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name of the billing project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully delete billing project"
          },
          "400": {
            "description": "Project cannot be deleted because it contains workspaces.",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "You must be a project owner to delete billing project",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "billing",
          "users"
        ],
        "description": "delete billing project",
        "operationId": "deleteBillingProject",
        "summary": "delete billing project"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name of the billing project",
            "in": "path",
            "name": "projectName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/RawlsBillingProjectStatus"
            }
          },
          "404": {
            "description": "Project Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "billing",
          "users"
        ],
        "description": "billing project status",
        "operationId": "billingProjectStatus",
        "summary": "billing project status"
      }
    },
    "/api/user/billingAccounts": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "description": "list of billing accounts for this user",
              "items": {
                "$ref": "#/definitions/BillingAccount"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden. You probably missed a scope; more details in the ErrorReport's message field",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile",
              "https://www.googleapis.com/auth/cloud-billing"
            ]
          }
        ],
        "tags": [
          "billing",
          "users"
        ],
        "description": "list billing accounts for a user",
        "operationId": "listUserBillingAccounts",
        "summary": "list billing accounts for a user"
      }
    },
    "/api/user/refreshToken": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "refresh token",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRefreshToken"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "description": "store a user's refresh token",
        "operationId": "refreshToken",
        "summary": "Store refresh token",
        "x-codegen-request-body-name": "refreshToken"
      }
    },
    "/api/user/refreshTokenDate": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/UserRefreshTokenDate"
            }
          },
          "400": {
            "description": "Token for the user is invalid",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "There is no refresh token for the user",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "description": "get the date the refresh token last updated",
        "operationId": "refreshTokenDate",
        "summary": "Get refresh token date"
      }
    },
    "/api/user/role/admin": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User is an admin"
          },
          "404": {
            "description": "User is not an admin"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "description": "gets the admin status of a user",
        "operationId": "isAdmin",
        "summary": "Query to see if you're an admin"
      }
    },
    "/api/user/role/curator": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User is a curator"
          },
          "404": {
            "description": "User is not a curator"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "users"
        ],
        "description": "gets the curator status of a user",
        "operationId": "isCurator",
        "summary": "Query to see if you're a library curator"
      }
    },
    "/api/workflows/{workflowId}/genomics/{operationId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workflow Id",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "string"
          },
          {
            "description": "operations job id; for PAPIv1 in the form of \"operations/{id}\", for PAPIv2 \"projects/{project}/operations/{id}\"",
            "in": "path",
            "name": "operationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "operations info"
          },
          "404": {
            "description": "workflow or jobId not found or no access",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "retrieve operations info from Google Genomics API",
        "operationId": "genomics_operations_get",
        "summary": "retrieve operations info from Google Genomics API"
      }
    },
    "/api/workspaces": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "collectionFormat": "csv",
            "description": "When specified, include only these keys in the response payload and exclude other keys. Accepts a comma-delimited list of values. To include a nested key, specify the key's path using a dot delimiter; for example, to include {\"workspace\": {\"attributes\": {}}}, specify \"workspace.attributes\". Legal values are any first-level key in the response, any first-level key inside the {\"workspace\": {}} object, and any first-level key inside the {\"workspace\": {\"attributes\": {}}} object. If omitted, will return the full response payload.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceListResponse"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Unrecognized query parameters",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "List all workspaces to which you have access, optionally filtered to only the specified fields. See the get-workspace API at GET /api/workspaces/{workspaceNamespace}/{workspaceName} to retrieve additional information about a given workspace.\n",
        "operationId": "listWorkspaces",
        "summary": "List workspaces"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace contents",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkspaceRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "headers": {
              "Location": {
                "description": "The path to the newly created workspace",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/WorkspaceDetails"
            }
          },
          "400": {
            "description": "Workspace namespace is not ready",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "User does not have access to create workspace in namespace or user does not have permission to set attributes in the namespace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Workspace by that name already exists",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Create a new workspace",
        "operationId": "createWorkspace",
        "summary": "Create new workspace",
        "x-codegen-request-body-name": "workspaceJson"
      }
    },
    "/api/workspaces/entities/copy": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": false,
            "description": "true to link new entities to existing entities, false to fail instead of link",
            "in": "query",
            "name": "linkExistingEntities",
            "type": "boolean"
          },
          {
            "description": "Source and destination for entities",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntityCopyDefinition"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/EntityCopyResponse"
            }
          },
          "404": {
            "description": "Source workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "There are conflicts in your copy operation. Retry with the paramater linkExistingEntities=true to link all soft conflicts to the entities that already exist in your workspace.",
            "schema": {
              "$ref": "#/definitions/EntityCopyResponse"
            }
          },
          "422": {
            "description": "Destination workspace must match source's authorization domain, if the source has one",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Copy entities from one workspace to another",
        "operationId": "copy_entities",
        "summary": "copy entities from one workspace into another workspace",
        "x-codegen-request-body-name": "entityCopyDefinition"
      }
    },
    "/api/workspaces/tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Query string",
            "in": "query",
            "name": "q",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "description": "list of all tags used in FireCloud and their associated frequencies",
              "items": {
                "$ref": "#/definitions/WorkspaceTag"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Get all tags used in FireCloud (for autocomplete)",
        "operationId": "getTags",
        "summary": "Get tags"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "202": {
            "description": "Delete request accepted. Workspace bucket will be deleted within 24 hours."
          },
          "403": {
            "description": "Insufficient permissions to delete workspace (must be owner)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Delete a workspace",
        "operationId": "delete_workspace",
        "summary": "Delete workspace"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "csv",
            "description": "When specified, include only these keys in the response payload and exclude other keys. Accepts a comma-delimited list of values. To include a nested key, specify the key's path using a dot delimiter; for example, to include {\"workspace\": {\"attributes\": {}}}, specify \"workspace.attributes\". Legal values are any first-level key in the response, any first-level key inside the {\"workspace\": {}} object, and any first-level key inside the {\"workspace\": {\"attributes\": {}}} object. If omitted, will return the full response payload.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "fields",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceResponse"
            }
          },
          "400": {
            "description": "Unrecognized query parameters",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Get a single workspace's details, optionally filtered to only the specified fields. See additional GET methods in this section to retrieve additional details about the workspace. For instance, this API only returns the workspace's owners; use the GET .../acl method to retrieve the full list of all users at all permission levels.\n",
        "operationId": "listWorkspaceDetails",
        "summary": "Get workspace details"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update operations",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AttributeUpdateOperationArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceDetails"
            }
          },
          "400": {
            "description": "Attribute does not exist or is of an unexpected type",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "Insufficient permissions to edit workspace attributes",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Update workspace attributes",
        "operationId": "update_workspace",
        "summary": "Update attributes of a workspace",
        "x-codegen-request-body-name": "entityUpdateJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/accessInstructions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "workspace namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "workspace name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "items": {
                "$ref": "#/definitions/ManagedGroupAccessInstructions"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "operationId": "getWorkspaceAccessInstructions",
        "summary": "Get access instructions for the workspace"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/acl": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceACL"
            }
          },
          "403": {
            "description": "Insufficient permissions to get workspace ACLs (must be owner)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Get access control list for a workspace",
        "operationId": "getACL",
        "summary": "Get workspace ACL"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "true to invite unregistered users, false to ignore",
            "in": "query",
            "name": "inviteUsersNotFound",
            "required": true,
            "type": "boolean"
          },
          {
            "description": "Series of ACL updates for workspace",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceACLUpdate"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceACLUpdateResponseList"
            }
          },
          "400": {
            "description": "Attempting to change access controls you can't (your own, or public-access group)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "Insufficient permissions to edit workspace ACLs (must be owner)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace, user or group not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Edit access control list for a workspace",
        "operationId": "updateACL",
        "summary": "Update workspace ACL",
        "x-codegen-request-body-name": "aclUpdates"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/bucketOptions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceBucketOptions"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Returns metadata about the workspace bucket.",
        "operationId": "getWorkspaceBucketOptions",
        "summary": "Get metadata about the workspace bucket"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/bucketUsage": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/BucketUsageResponse"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Get the storage bucket usage",
        "operationId": "getBucketUsage",
        "summary": "Get bucket usage"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/catalog": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceCatalog"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Returns workspace catalog permissions for users and groups with the permission for the workspace",
        "operationId": "getCatalog",
        "summary": "Get catalog permissions"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Series of Catalog updates for workspace",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkspaceCatalog"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkspaceCatalogUpdateResponseList"
            }
          },
          "404": {
            "description": "Workspace, user or group not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Edit catalog permissions for a workspace",
        "operationId": "updateCatalog",
        "summary": "Update catalog permission",
        "x-codegen-request-body-name": "catalogUpdates"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/checkBucketReadAccess": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "403": {
            "description": "Insufficient permissions to access workspace bucket",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Read a workspace bucket",
        "operationId": "readBucket",
        "summary": "Read workspace bucket"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/checkIamActionWithLock/{samActionName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Sam action",
            "in": "path",
            "name": "samActionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "User can perform the given action on the workspace"
          },
          "403": {
            "description": "User may not perform the given action on the workspace (including if it doesn't exist)"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Check to see if the user has the given action on a workspace in Sam. Takes into account if the workspace is locked too.",
        "operationId": "checkIamActionWithLock",
        "summary": "Check IAM action with lock"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/clone": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Request for new workspace",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WorkspaceRequestClone"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "headers": {
              "Location": {
                "description": "The path to the newly cloned workspace",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/WorkspaceDetails"
            }
          },
          "400": {
            "description": "Workspace namespace is not ready",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "User does not have access to create workspace in namespace or user does not have permission to set attributes in the namespace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Source workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Destination workspace already exists",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "422": {
            "description": "Destination workspace must match source's authorization domain, if the dest has one",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Clone a workspace",
        "operationId": "clone",
        "summary": "Clone workspace",
        "x-codegen-request-body-name": "workspaceRequest"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/disableRequesterPaysForLinkedServiceAccounts": {
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "In all cases whether or not the workspace exists or user has access. If there were linked service accounts they were removed from the workspace but this api does not indicate that anything was done (for security reasons).\n"
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Disable Requester Pays for the user's linked service accounts in a workspace",
        "operationId": "disableRequesterPaysForLinkedServiceAccounts",
        "summary": "Disable Requester Pays for linked service accounts"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/enableRequesterPaysForLinkedServiceAccounts": {
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "403": {
            "description": "Insufficient permissions to enable Requester Pays for workspace. Writer and higher permissions required on workspace.",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Enable Requester Pays for the user's linked service accounts in a workspace. Grants the serviceusage.services.use permission in the project associated to the workspace to each service account linked in the account linking service (Bond).\n",
        "operationId": "enableRequesterPaysForLinkedServiceAccounts",
        "summary": "Enable Requester Pays for linked service accounts"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "description": "Map[String,EntityTypeMetadata]",
              "type": "object"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Get entity type metadata: for each type, the number of entities of that type and all attribute names used",
        "operationId": "entity_type_metadata",
        "summary": "Entity type metadata"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity data",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Entity created",
            "headers": {
              "Location": {
                "description": "The path to the newly created entity",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "403": {
            "description": "User does not have permission to update attributes in the namespace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Entity already exists",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Create entity",
        "operationId": "create_entity",
        "summary": "Create entity in a workspace",
        "x-codegen-request-body-name": "entityJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/batchUpdate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity update definitions",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntityUpdateDefinition"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entities updated"
          },
          "400": {
            "description": "Invalid attribute update operation",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "User does not have permission to update attributes in the namespace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Batch update entities into a workspace. All referenced entities must already exist.",
        "operationId": "batch_update_entities",
        "summary": "Batch update entities",
        "x-codegen-request-body-name": "batchUpdateJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/batchUpsert": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity update definitions",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/EntityUpdateDefinition"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entities upserted"
          },
          "400": {
            "description": "Invalid attribute update operation",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "User does not have permission to update attributes in the namespace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Batch upsert (update or insert if not already there) entities into a workspace",
        "operationId": "batch_upsert_entities",
        "summary": "batch upsert entities into a workspace",
        "x-codegen-request-body-name": "batchUpsertJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/delete": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Set of entities to delete",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/AttributeEntityReference"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Not all Entities exist",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Cannot create dangling references when deleting Entities - must specify whole set",
            "schema": {
              "items": {
                "$ref": "#/definitions/AttributeEntityReference"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Delete entities",
        "operationId": "delete_entities",
        "summary": "delete entities in a workspace",
        "x-codegen-request-body-name": "entities"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/Entity"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace or entityType not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "List all entities of a given type",
        "operationId": "list_entities",
        "summary": "list all entities of given type in a workspace"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}/{entityName}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Name",
            "in": "path",
            "name": "entityName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "404": {
            "description": "Workspace or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Get an entity",
        "operationId": "get_entity",
        "summary": "Get entity in a workspace"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Name",
            "in": "path",
            "name": "entityName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Update operations for attributes",
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/AttributeUpdateOperationArray"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entity updated",
            "schema": {
              "$ref": "#/definitions/Entity"
            }
          },
          "400": {
            "description": "Attribute does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "User does not have permission to update attributes in the namespace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Update an entity",
        "operationId": "update_entity",
        "summary": "Update entity in a workspace",
        "x-codegen-request-body-name": "attributeUpdateJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}/{entityName}/evaluate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Name",
            "in": "path",
            "name": "entityName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Expression",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Invalid entity expression",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Evaluates an attribute expression taking the given entity as root",
        "operationId": "evaluateExpression",
        "summary": "evaluate expression on an entity",
        "x-codegen-request-body-name": "expression"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entities/{entityType}/{entityName}/rename": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Name",
            "in": "path",
            "name": "entityName",
            "required": true,
            "type": "string"
          },
          {
            "description": "New entity name",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntityName"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "404": {
            "description": "Workspace or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "New name for entity already exists in workspace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "description": "Rename an entity",
        "operationId": "renameEntity",
        "summary": "rename entity in a workspace",
        "x-codegen-request-body-name": "newEntityNameJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/entityQuery/{entityType}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Entity Type",
            "in": "path",
            "name": "entityType",
            "required": true,
            "type": "string"
          },
          {
            "default": 1,
            "description": "Page number, 1-indexed (default 1)",
            "in": "query",
            "minimum": 1,
            "name": "page",
            "type": "number"
          },
          {
            "default": 10,
            "description": "Page size (default 10)",
            "in": "query",
            "minimum": 1,
            "name": "pageSize",
            "type": "number"
          },
          {
            "default": "name",
            "description": "Sort field (default \"name\")",
            "in": "query",
            "name": "sortField",
            "type": "string"
          },
          {
            "default": "asc",
            "description": "Sort direction (asc or desc, default asc)",
            "enum": [
              "asc",
              "desc"
            ],
            "in": "query",
            "name": "sortDirection",
            "type": "string"
          },
          {
            "description": "Filter terms",
            "in": "query",
            "name": "filterTerms",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "List of entities in workspace",
            "schema": {
              "$ref": "#/definitions/EntityQueryResponse"
            }
          },
          "404": {
            "description": "Workspace or entity type does not exist"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "entities"
        ],
        "operationId": "entityQuery",
        "summary": "Paginated query for entities in a workspace"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/lock": {
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "403": {
            "description": "Insufficient permissions to lock workspace (must be owner)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Workspace cannot be locked due to running submissions",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Lock a workspace",
        "operationId": "lockWorkspace",
        "summary": "Lock workspace"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "default": false,
            "description": "Configs for all repos, not just Agora",
            "in": "query",
            "name": "allRepos",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/MethodConfiguration"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "List method configurations in a workspace. By default, only Agora method configs are returned. To return configs for all repos, specify `allRepos` to be `true`.\n\n#### Expanded discussion on the methodRepoMethod field\n\nThis endpoint returns method references to Agora in the format\n```\n\"methodRepoMethod\": {\n  \"methodNamespace\": \"namespace\",\n  \"methodName\": \"name\",\n  \"methodVersion\": 1,\n  \"sourceRepo\": \"agora\",\n  \"methodUri\": \"agora://namespace/name/1\"\n}\n```\nand for Dockstore in the format\n```\n\"methodRepoMethod\": {\n  \"methodPath\": \"path\",\n  \"methodVersion\": \"version\",\n  \"sourceRepo\": \"agora\",\n  \"methodUri\": \"dockstore://path/version\"\n}\n```\nIf you are only working with Agora methods, the fields `\"sourceRepo\"` and `\"methodUri\"` can be considered informational and do not need to be round-tripped (see the corresponding `POST /api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs` for more details).\n",
        "operationId": "list_method_configurations",
        "summary": "List method configurations in a workspace"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration contents",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfiguration"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "headers": {
              "Location": {
                "description": "The path to the newly created method configuration",
                "type": "string"
              }
            },
            "schema": {
              "$ref": "#/definitions/ValidatedMethodConfiguration"
            }
          },
          "403": {
            "description": "Invalid attribute namespace(s) in outputs",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "MethodConfiguration already exists",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Create method configurations.\n\n#### Expanded discussion on the methodRepoMethod field\n\nTo create a method config for an Agora method, `\"sourceRepo\": \"agora\"` is optional; the following is sufficient:\n```\n\"methodRepoMethod\": {\n  \"methodNamespace\": \"namespace\",\n  \"methodName\": \"name\",\n  \"methodVersion\": 1\n}\n```\nTo create a method config for a Dockstore method, `\"sourceRepo\": \"dockstore\"` is required:\n```\n\"methodRepoMethod\": {\n  \"sourceRepo\": \"dockstore\",\n  \"methodPath\": \"path\",\n  \"methodVersion\": \"version\"\n}\n```\nYou may also use the URI on its own to create a config referencing any supported repo (currently Agora and Dockstore):\n```\n\"methodRepoMethod\": {\n  \"methodUri\": \"agora://namespace/name/1\"\n}\n```\n```\n\"methodRepoMethod\": {\n  \"methodUri\": \"dockstore://path/version\"\n}\n```\nThe system is specified to check for a URI first before falling back to the legacy fields. Unsupported repos will return a 400 Bad Request.\n",
        "operationId": "create_method_configuration",
        "summary": "Create Method configuration in a workspace",
        "x-codegen-request-body-name": "methodConfigJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs/{configNamespace}/{configName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "404": {
            "description": "Workspace or Method Configuration not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Delete a method configuration",
        "operationId": "delete_method_configuration",
        "summary": "delete method configuration in a workspace"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/MethodConfiguration"
            }
          },
          "404": {
            "description": "Workspace or Method Configuration not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Get a method configuration",
        "operationId": "get_method_configuration",
        "summary": "get method configuration in a workspace"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          },
          {
            "description": "New Method Configuration contents",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/ValidatedMethodConfiguration"
            }
          },
          "403": {
            "description": "Invalid attribute namespace(s) in outputs",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace or method configuration not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Method config with the new name already exists in workspace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Update method configuration.\nUpdates and moves the method configuration at the URI to the location in the request body.\nThe location in the URI may be the same as the location in the request body.\nIf the location in the request body matches the location in the URI, it is overwritten.\nIf the location in the request body is different to the location in the URI, and there is a method config already at that location, 409 is returned.\n",
        "operationId": "update_method_configuration",
        "summary": "Update method configuration in a workspace",
        "x-codegen-request-body-name": "newMethodConfigJson"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          },
          {
            "description": "New Method Configuration contents",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/ValidatedMethodConfiguration"
            }
          },
          "400": {
            "description": "Method configuration name and namespace in URI do not match those in JSON body",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "403": {
            "description": "Invalid attribute namespace(s) in outputs",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Add or overwrite a method configuration in a workspace.\nThe method configuration name and namespace in the URI must match the values in the JSON.\n",
        "operationId": "overwrite_method_configuration",
        "summary": "Add or overwrite method configuration in a workspace",
        "x-codegen-request-body-name": "newMethodConfigJson"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs/{configNamespace}/{configName}/rename": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          },
          {
            "description": "New Method Configuration Name",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MethodConfigurationName"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "400": {
            "description": "Workspace details in payload don't match the URI",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace or Method Configuration not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "409": {
            "description": "Method config with the new name already exists in workspace",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Rename method configuration.\nThe workspace name and namespace in the HTTP body must match those in the URI.\n409 may be returned if there's already a method configuration at the target location.\n",
        "operationId": "rename_method_config",
        "summary": "rename method configuration in a workspace",
        "x-codegen-request-body-name": "newMethodConfigurationName"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/methodconfigs/{configNamespace}/{configName}/validate": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Namespace",
            "in": "path",
            "name": "configNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Method Configuration Name",
            "in": "path",
            "name": "configName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/ValidatedMethodConfiguration"
            }
          },
          "404": {
            "description": "Workspace or Method Configuration not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "methodconfigs"
        ],
        "description": "Validate a method configuration",
        "operationId": "validate_method_configuration",
        "summary": "get syntax validation information for a method configuration"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/sendChangeNotification": {
      "post": {
        "parameters": [
          {
            "description": "workspace namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "workspace name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "operationId": "sendChangeNotification",
        "summary": "Send Notification of data added to Workspace"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "items": {
                "$ref": "#/definitions/SubmissionListResponse"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "List all submissions run in this workspace",
        "operationId": "listSubmissions",
        "summary": "List all submissions"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Description of a submission.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmissionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/SubmissionReport"
            }
          },
          "400": {
            "description": "Expression evaluation failed or entities are not of type required by method config",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace, Method Configuration or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "502": {
            "description": "Trouble talking to Agora",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Submit a new job",
        "operationId": "createSubmission",
        "summary": "Create submission",
        "x-codegen-request-body-name": "submission"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/validate": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Description of a submission.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubmissionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Validation Response",
            "schema": {
              "$ref": "#/definitions/SubmissionValidationReport"
            }
          },
          "400": {
            "description": "Expression evaluation failed or entities are not of type required by method config",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace, Method Configuration or Entity not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "502": {
            "description": "Trouble talking to Agora",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Validate expression syntax for a submission",
        "operationId": "validateSubmission",
        "summary": "Validate submission",
        "x-codegen-request-body-name": "submission"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission Id",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Submission successfully aborted"
          },
          "404": {
            "description": "Workspace or submission not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "502": {
            "description": "Unable to abort all workflows in this submission",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Abort a currently running submission",
        "operationId": "abortSubmission",
        "summary": "Abort submission"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission Id",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/Submission"
            }
          },
          "404": {
            "description": "Workspace or submission not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Monitor submission status",
        "operationId": "getSubmissionStatus",
        "summary": "Monitor submission status"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}/workflows/{workflowId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission Id",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow Id",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "description": "When specified key(s) to include from the metadata. Matches any key starting with the value. May not be used with excludeKey. This applies to all keys in the response, including within nested blocks.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "includeKey",
            "type": "array"
          },
          {
            "collectionFormat": "multi",
            "description": "When specified key(s) to exclude from the metadata. Matches any key starting with the value. May not be used with includeKey. This applies to all keys in the response, including within nested blocks.\n",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "excludeKey",
            "type": "array"
          },
          {
            "default": false,
            "description": "When true, metadata for sub workflows will be fetched and inserted automatically in the metadata response.\n",
            "in": "query",
            "name": "expandSubWorkflows",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request"
          },
          "404": {
            "description": "Workspace, Submission or Workflow not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Get call-level metadata for workflow",
        "operationId": "workflowMetadata",
        "summary": "Get call-level metadata for workflow"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}/workflows/{workflowId}/cost": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission Id",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow Id",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowCost"
            }
          },
          "404": {
            "description": "Workspace, Submission or Workflow not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Retrieve workflow cost, if available",
        "operationId": "getWorkflowCost",
        "summary": "Get workflow cost"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissions/{submissionId}/workflows/{workflowId}/outputs": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Submission Id",
            "in": "path",
            "name": "submissionId",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workflow Id",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "$ref": "#/definitions/WorkflowOutputs"
            }
          },
          "404": {
            "description": "Workspace, Submission or Workflow not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "502": {
            "description": "Unable to retrieve outputs or logs from Cromwell",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Retrieve outputs for a workflow",
        "operationId": "getWorkflowOutputs",
        "summary": "Get workflow outputs"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/submissionsCount": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Request",
            "schema": {
              "description": "Map[String,Int]",
              "type": "object"
            }
          },
          "404": {
            "description": "Workspace not found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "submissions"
        ],
        "description": "Counts all submissions run in this workspace, grouped by status. Returns a map of status:count.",
        "operationId": "countSubmissions",
        "summary": "Count submissions by status"
      }
    },
    "/api/workspaces/{workspaceNamespace}/{workspaceName}/unlock": {
      "put": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workspace Namespace",
            "in": "path",
            "name": "workspaceNamespace",
            "required": true,
            "type": "string"
          },
          {
            "description": "Workspace Name",
            "in": "path",
            "name": "workspaceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Request"
          },
          "403": {
            "description": "Insufficient permissions to lock workspace (must be owner)",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "404": {
            "description": "Workspace Not Found",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          },
          "500": {
            "description": "Rawls Internal Error",
            "schema": {
              "$ref": "#/definitions/ErrorReport"
            }
          }
        },
        "security": [
          {
            "authorization": [
              "openid",
              "email",
              "profile"
            ]
          }
        ],
        "tags": [
          "workspaces"
        ],
        "description": "Unlock a workspace",
        "operationId": "unlockWorkspace",
        "summary": "Unlock workspace"
      }
    },
    "/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "All systems OK"
          },
          "500": {
            "description": "Problem with one or more systems. See response for details.",
            "schema": {
              "$ref": "#/definitions/SystemStatus"
            }
          }
        },
        "tags": [
          "status"
        ],
        "description": "status check for underlying systems",
        "operationId": "systemStatus",
        "summary": "status check for underlying systems"
      }
    },
    "/version": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Version information of this application",
            "schema": {
              "$ref": "#/definitions/ApplicationVersion"
            }
          }
        },
        "tags": [
          "version"
        ],
        "description": "get version information of this application",
        "operationId": "version",
        "summary": "get version information of this application"
      }
    },
    "/version/executionEngine": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The currently running version of the execution engine",
            "schema": {
              "$ref": "#/definitions/ExecutionEngineVersion"
            }
          }
        },
        "tags": [
          "version"
        ],
        "description": "get version information of the execution engine",
        "operationId": "execVersion",
        "summary": "get version information of the execution engine"
      }
    }
  },
  "definitions": {
    "ActiveSubmission": {
      "description": "a submission that's still a going concern",
      "properties": {
        "submission": {
          "$ref": "#/definitions/Submission"
        },
        "workspaceName": {
          "description": "workspaceName of the submission",
          "type": "string"
        },
        "workspaceNamespace": {
          "description": "workspaceNamespace of the submission",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AddListMember": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeListName": {
              "description": "The name of the attribute list",
              "type": "string"
            },
            "newMember": {
              "description": "The attribute to add to the list",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "AddUpdateAttribute": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "addUpdateAttribute": {
              "description": "Value to add/update. Accepts strings, numbers, booleans.",
              "type": "string"
            },
            "attributeName": {
              "description": "Name of attribute to add/update",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "AgoraEntity": {
      "description": "response from Method Repo",
      "properties": {
        "createDate": {
          "type": "string"
        },
        "documentation": {
          "type": "string"
        },
        "entityType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "payload": {
          "type": "string"
        },
        "snapshotId": {
          "type": "string"
        },
        "synopsis": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ApplicationVersion": {
      "description": "version of the application",
      "properties": {
        "buildNumber": {
          "type": "string"
        },
        "gitHash": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Attribute": {
      "description": "",
      "properties": {
        "value": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AttributeEntityReference": {
      "description": "",
      "properties": {
        "entityName": {
          "description": "The name of the entity",
          "type": "string"
        },
        "entityType": {
          "description": "The type of the entity",
          "type": "string"
        }
      },
      "required": [
        "entityName",
        "entityType"
      ],
      "type": "object"
    },
    "AttributeUpdateOperation": {
      "discriminator": "op",
      "properties": {
        "op": {
          "description": "The operation to perform on the attribute",
          "enum": [
            "AddUpdateAttribute",
            "RemoveAttribute",
            "AddListMember",
            "RemoveListMember",
            "CreateAttributeEntityReferenceList",
            "CreateAttributeValueList"
          ],
          "type": "string"
        }
      },
      "required": [
        "op"
      ],
      "type": "object"
    },
    "AttributeUpdateOperationArray": {
      "description": "",
      "example": "[\n  {\n    \"op\": \"AddUpdateAttribute\",\n    \"attributeName\": \"name of attribute to add/update\",\n    \"addUpdateAttribute\": \"value to add/update\"\n  },\n  {\n    \"op\": \"RemoveAttribute\",\n    \"attributeName\": \"name of attribute to remove\"\n  },\n  {\n    \"op\": \"AddListMember\",\n    \"attributeListName\": \"name of list attribute\",\n    \"newMember\": \"value to add to list\"\n  },\n  {\n    \"op\": \"RemoveListMember\",\n    \"attributeListName\": \"name of list attribute\",\n    \"removeMember\": \"value to remove from list\"\n  },\n  {\n    \"op\": \"CreateAttributeEntityReferenceList\",\n    \"attributeListName\": \"name of entity-reference list attribute to create\"\n  },\n  {\n    \"op\": \"CreateAttributeValueList\",\n    \"attributeName\": \"name of value-list attribute to create\"\n  }\n]\n",
      "items": {
        "$ref": "#/definitions/AttributeUpdateOperation"
      },
      "type": "array"
    },
    "BillingAccount": {
      "description": "Details for a single billing account",
      "properties": {
        "accountName": {
          "description": "name of billing account",
          "type": "string"
        },
        "displayName": {
          "description": "display name of billing account",
          "type": "string"
        },
        "firecloudHasAccess": {
          "description": "whether the Firecloud service has been given access to this billing account",
          "type": "boolean"
        }
      },
      "required": [
        "accountName",
        "displayName",
        "firecloudHasAccess"
      ],
      "type": "object"
    },
    "BucketUsageResponse": {
      "description": "",
      "properties": {
        "usageInBytes": {
          "description": "The current storage bucket usage in bytes",
          "type": "integer"
        }
      },
      "required": [
        "usageInBytes"
      ],
      "type": "object"
    },
    "CallMetadata": {
      "description": "Stuff you need to know about calls",
      "properties": {
        "backend": {
          "description": "type of backend executing the call",
          "type": "string"
        },
        "backendLogs": {
          "description": "map of log files from backend",
          "properties": {},
          "type": "object"
        },
        "backendStatus": {
          "description": "status of the backend",
          "type": "string"
        },
        "end": {
          "description": "ending time of call",
          "format": "date-time",
          "type": "string"
        },
        "executionEvents": {
          "items": {
            "$ref": "#/definitions/ExecutionEvent"
          },
          "type": "array"
        },
        "executionStatus": {
          "description": "status of call",
          "type": "string"
        },
        "inputs": {
          "description": "map from input names onto resolved values",
          "properties": {},
          "type": "object"
        },
        "jobId": {
          "description": "unique ID of job",
          "type": "string"
        },
        "outputs": {
          "description": "map from output names to local files",
          "properties": {},
          "type": "object"
        },
        "returnCode": {
          "description": "result code",
          "type": "integer"
        },
        "shardIndex": {
          "description": "call index within a scatter block, as reported by execution service",
          "type": "integer"
        },
        "start": {
          "description": "starting time of call",
          "format": "date-time",
          "type": "string"
        },
        "stderr": {
          "description": "location of stderr",
          "type": "string"
        },
        "stdout": {
          "description": "location of stdout",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateAttributeEntityReferenceList": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeListName": {
              "description": "The name of the empty attribute entity-reference list to create. This is a non-destructive operation.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "CreateAttributeValueList": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeName": {
              "description": "The name of the empty attribute value-list to create. This is a non-destructive operation.",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "CreateRawlsBillingProjectFullRequest": {
      "description": "",
      "properties": {
        "billingAccount": {
          "description": "the id of the billing account to use, must start with 'billingAccounts/'",
          "type": "string"
        },
        "enableFlowLogs": {
          "description": "Optional, false if not specified. If true, enable flow logs within the high security network. Requires highSecurityNetwork = true.",
          "type": "boolean"
        },
        "highSecurityNetwork": {
          "description": "Optional, false if not specified. If true, spin up all compute in a VPC network.",
          "type": "boolean"
        },
        "privateIpGoogleAccess": {
          "description": "Optional, false if not specified. If true, it configures the VPC network to only allow access to GCP APIs that are protected by the project's service perimeter and routes all allowed API traffic through a narrow IP range. Requires highSecurityNetwork = true.",
          "type": "boolean"
        },
        "projectName": {
          "description": "the name of the project to create",
          "type": "string"
        },
        "servicePerimeter": {
          "description": "The fully qualified name of the GCP service perimeter to put this project into in the form accessPolicies/[POLICY NUMBER]/servicePerimeters/[NAME]. Caller must have the add_project action for this service perimeter in Sam.",
          "type": "string"
        }
      },
      "required": [
        "billingAccount",
        "projectName"
      ],
      "type": "object"
    },
    "Entity": {
      "description": "",
      "properties": {
        "attributes": {
          "description": "Map[String,Attribute]",
          "properties": {},
          "type": "object"
        },
        "entityType": {
          "description": "The type of the entity",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity",
          "type": "string"
        }
      },
      "required": [
        "attributes",
        "entityType",
        "name"
      ],
      "type": "object"
    },
    "EntityCopyDefinition": {
      "description": "",
      "properties": {
        "destinationWorkspace": {
          "$ref": "#/definitions/WorkspaceName"
        },
        "entityNames": {
          "description": "Names of entities to copy",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "entityType": {
          "description": "Type of top level entities to copy",
          "type": "string"
        },
        "sourceWorkspace": {
          "$ref": "#/definitions/WorkspaceName"
        }
      },
      "required": [
        "destinationWorkspace",
        "entityNames",
        "entityType",
        "sourceWorkspace"
      ],
      "type": "object"
    },
    "EntityCopyResponse": {
      "description": "",
      "properties": {
        "entitiesCopied": {
          "description": "the entities that were successfully copied into the workspace",
          "items": {
            "$ref": "#/definitions/AttributeEntityReference"
          },
          "type": "array"
        },
        "hardConflicts": {
          "description": "these entities already exist in your workspace",
          "items": {
            "$ref": "#/definitions/EntityHardConflict"
          },
          "type": "array"
        },
        "softConflicts": {
          "description": "the conflicts within your entity subtrees. note that this will be empty if there are hard conflicts",
          "items": {
            "$ref": "#/definitions/EntitySoftConflict"
          },
          "type": "array"
        }
      },
      "required": [
        "entitiesCopied",
        "hardConflicts",
        "softConflicts"
      ],
      "type": "object"
    },
    "EntityHardConflict": {
      "description": "",
      "properties": {
        "entityName": {
          "description": "the name of the entity",
          "type": "string"
        },
        "entityType": {
          "description": "the type of the entity",
          "type": "string"
        }
      },
      "required": [
        "entityName",
        "entityType"
      ],
      "type": "object"
    },
    "EntityName": {
      "description": "",
      "properties": {
        "name": {
          "description": "The name of the entity",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "EntityQuery": {
      "description": "",
      "properties": {
        "filterTerms": {
          "description": "terms to filter results by",
          "type": "string"
        },
        "page": {
          "description": "page number, 1-indexed positive integer",
          "type": "number"
        },
        "pageSize": {
          "description": "count of items per page, positive integer",
          "type": "number"
        },
        "sortDirection": {
          "description": "asc or desc",
          "type": "string"
        },
        "sortField": {
          "description": "field to sort by",
          "type": "string"
        }
      },
      "required": [
        "page",
        "pageSize",
        "sortDirection",
        "sortField"
      ],
      "type": "object"
    },
    "EntityQueryResponse": {
      "description": "",
      "properties": {
        "parameters": {
          "$ref": "#/definitions/EntityQuery"
        },
        "resultMetadata": {
          "$ref": "#/definitions/EntityQueryResultMetadata"
        },
        "results": {
          "items": {
            "$ref": "#/definitions/Entity"
          },
          "type": "array"
        }
      },
      "required": [
        "parameters",
        "resultMetadata",
        "results"
      ],
      "type": "object"
    },
    "EntityQueryResultMetadata": {
      "description": "",
      "properties": {
        "filteredCount": {
          "description": "count of results after filtering",
          "type": "number"
        },
        "filteredPageCount": {
          "description": "count of pages after filtering; honors pageSize parameter",
          "type": "number"
        },
        "unfilteredCount": {
          "description": "count of results before filtering",
          "type": "number"
        }
      },
      "required": [
        "filteredCount",
        "filteredPageCount",
        "unfilteredCount"
      ],
      "type": "object"
    },
    "EntitySoftConflict": {
      "description": "",
      "properties": {
        "conflicts": {
          "description": "the next entity in the path to the conflict",
          "items": {
            "$ref": "#/definitions/EntitySoftConflict"
          },
          "type": "array"
        },
        "entityName": {
          "description": "the name of the entity",
          "type": "string"
        },
        "entityType": {
          "description": "the type of the entity",
          "type": "string"
        }
      },
      "required": [
        "conflicts",
        "entityName",
        "entityType"
      ],
      "type": "object"
    },
    "EntityTypeMetadata": {
      "description": "",
      "properties": {
        "attributeNames": {
          "description": "A list of all attribute names used",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "count": {
          "description": "The number of entities of this type",
          "type": "integer"
        },
        "idName": {
          "description": "The name if the id field for the entity",
          "type": "string"
        }
      },
      "required": [
        "attributeNames",
        "count"
      ],
      "type": "object"
    },
    "EntityUpdateDefinition": {
      "description": "",
      "properties": {
        "entityType": {
          "description": "The type of the entity",
          "type": "string"
        },
        "name": {
          "description": "The name of the entity",
          "type": "string"
        },
        "operations": {
          "$ref": "#/definitions/AttributeUpdateOperationArray"
        }
      },
      "required": [
        "entityType",
        "name",
        "operations"
      ],
      "type": "object"
    },
    "ErrorReport": {
      "description": "",
      "properties": {
        "causes": {
          "description": "errors triggering this one",
          "items": {
            "$ref": "#/definitions/ErrorReport"
          },
          "type": "array"
        },
        "exceptionClass": {
          "description": "class of exception thrown",
          "type": "string"
        },
        "message": {
          "description": "what went wrong",
          "type": "string"
        },
        "source": {
          "description": "service causing error",
          "type": "string"
        },
        "stackTrace": {
          "description": "stack trace",
          "items": {
            "$ref": "#/definitions/StackTraceElement"
          },
          "type": "array"
        },
        "statusCode": {
          "description": "HTTP status code",
          "type": "integer"
        }
      },
      "required": [
        "causes",
        "message",
        "source",
        "stackTrace"
      ],
      "type": "object"
    },
    "ExecutionEngineVersion": {
      "description": "version of the execution engine",
      "properties": {
        "cromwell": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExecutionEvent": {
      "description": "",
      "properties": {
        "description": {
          "description": "Description of the event",
          "type": "string"
        },
        "endTime": {
          "description": "When the event finished",
          "format": "date-time",
          "type": "string"
        },
        "startTime": {
          "description": "When the event started",
          "format": "date-time",
          "type": "string"
        }
      },
      "required": [
        "description",
        "startTime"
      ],
      "type": "object"
    },
    "ExecutionServiceCallLogs": {
      "description": "Execution service logs per call",
      "properties": {
        "backendLogs": {
          "description": "Map[String,String]",
          "properties": {},
          "type": "object"
        },
        "stderr": {
          "description": "Google bucket location for standard error",
          "type": "string"
        },
        "stdout": {
          "description": "Google bucket location for standard output",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExternalEntityInfo": {
      "properties": {
        "dataStoreId": {
          "description": "external datastore id for the collection of data",
          "type": "string"
        },
        "rootEntityType": {
          "description": "type of data within the external datastore",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ManagedGroupAccessInstructions": {
      "description": "",
      "properties": {
        "groupName": {
          "description": "The name of the Group with instructions",
          "type": "string"
        },
        "instructions": {
          "description": "The instructions for applying to the Group",
          "type": "string"
        }
      },
      "required": [
        "groupName",
        "instructions"
      ],
      "type": "object"
    },
    "ManagedGroupRef": {
      "description": "a reference to a group that can be managed by users",
      "properties": {
        "membersGroupName": {
          "type": "string"
        }
      },
      "required": [
        "membersGroupName"
      ],
      "type": "object"
    },
    "MethodConfiguration": {
      "description": "",
      "properties": {
        "dataReferenceName": {
          "description": "the name of the data reference within this workspace to be used to derive input values",
          "type": "string"
        },
        "deleted": {
          "description": "Is this config marked as deleted?",
          "type": "boolean"
        },
        "inputs": {
          "properties": {},
          "type": "object"
        },
        "methodConfigVersion": {
          "description": "Version number, incremented on edit",
          "type": "integer"
        },
        "methodRepoMethod": {
          "$ref": "#/definitions/MethodRepoMethod"
        },
        "name": {
          "description": "The name of the method configuration",
          "type": "string"
        },
        "namespace": {
          "description": "This method configuration's namespace",
          "type": "string"
        },
        "outputs": {
          "properties": {},
          "type": "object"
        },
        "rootEntityType": {
          "description": "The root entity type that the method will be running on. Optional if this method config doesn't run on an entity (i.e. uses only workspace attributes and literal inputs).",
          "type": "string"
        }
      },
      "required": [
        "inputs",
        "methodRepoMethod",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "MethodConfigurationName": {
      "description": "",
      "properties": {
        "name": {
          "description": "The name of the method configuration",
          "type": "string"
        },
        "namespace": {
          "description": "This method configuration's owning namespace",
          "type": "string"
        },
        "workspaceName": {
          "$ref": "#/definitions/WorkspaceName"
        }
      },
      "required": [
        "name",
        "namespace",
        "workspaceName"
      ],
      "type": "object"
    },
    "MethodConfigurationNamePair": {
      "description": "",
      "properties": {
        "destination": {
          "$ref": "#/definitions/MethodConfigurationName"
        },
        "source": {
          "$ref": "#/definitions/MethodConfigurationName"
        }
      },
      "required": [
        "destination",
        "source"
      ],
      "type": "object"
    },
    "MethodInput": {
      "description": "description of a method input",
      "properties": {
        "inputType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "optional": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "MethodInputsOutputs": {
      "description": "description of a method's inputs and outputs",
      "properties": {
        "inputs": {
          "items": {
            "$ref": "#/definitions/MethodInput"
          },
          "type": "array"
        },
        "outputs": {
          "items": {
            "$ref": "#/definitions/MethodOutput"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "MethodOutput": {
      "description": "description of a method output",
      "properties": {
        "name": {
          "type": "string"
        },
        "outputType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "MethodRepoConfigurationExport": {
      "description": "",
      "properties": {
        "methodRepoName": {
          "description": "Method Repository Name",
          "type": "string"
        },
        "methodRepoNamespace": {
          "description": "Method Repository Namespace",
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/MethodConfigurationName"
        }
      },
      "required": [
        "methodRepoName",
        "methodRepoNamespace",
        "source"
      ],
      "type": "object"
    },
    "MethodRepoConfigurationImport": {
      "description": "",
      "properties": {
        "destination": {
          "$ref": "#/definitions/MethodConfigurationName"
        },
        "methodRepoName": {
          "description": "Method Repository Name",
          "type": "string"
        },
        "methodRepoNamespace": {
          "description": "Method Repository Namespace",
          "type": "string"
        },
        "methodRepoSnapshotId": {
          "description": "Method Repository Snapshot ID",
          "type": "integer"
        }
      },
      "required": [
        "destination",
        "methodRepoName",
        "methodRepoNamespace",
        "methodRepoSnapshotId"
      ],
      "type": "object"
    },
    "MethodRepoMethod": {
      "description": "",
      "properties": {
        "methodName": {
          "description": "The name of the method in Agora",
          "type": "string"
        },
        "methodNamespace": {
          "description": "The namespace of the method in Agora",
          "type": "string"
        },
        "methodPath": {
          "description": "The path of the method in Dockstore",
          "type": "string"
        },
        "methodUri": {
          "description": "URI that specifies the method's repository and captures all the information necessary to identify the method within its repository (e.g. agora://namespace/name/1, dockstore://path/version)",
          "type": "string"
        },
        "methodVersion": {
          "description": "The integer method version in Agora (or a string method version for Dockstore)",
          "type": "integer"
        },
        "sourceRepo": {
          "description": "The method's repository, currently one of \"agora\" or \"dockstore\"",
          "type": "string"
        }
      },
      "required": [
        "methodName",
        "methodNamespace",
        "methodVersion"
      ],
      "type": "object"
    },
    "NotificationType": {
      "description": "key and description of a notification",
      "properties": {
        "description": {
          "type": "string"
        },
        "notificationKey": {
          "type": "string"
        }
      },
      "required": [
        "description",
        "notificationKey"
      ],
      "type": "object"
    },
    "RawlsBillingProjectMember": {
      "description": "an element of a list of project users and their role",
      "properties": {
        "email": {
          "description": "the email of the user",
          "type": "string"
        },
        "role": {
          "description": "the role of the user in the project",
          "type": "string"
        }
      },
      "required": [
        "email",
        "role"
      ],
      "type": "object"
    },
    "RawlsBillingProjectMembership": {
      "description": "an element of a list of projects and related role for a user",
      "properties": {
        "message": {
          "description": "informational message about the project",
          "type": "string"
        },
        "projectName": {
          "description": "the name of the project to create",
          "type": "string"
        },
        "role": {
          "description": "the role of the current user in the project",
          "type": "string"
        },
        "status": {
          "enum": [
            "Creating",
            "Ready",
            "Error"
          ],
          "type": "string"
        }
      },
      "required": [
        "projectName",
        "role",
        "status"
      ],
      "type": "object"
    },
    "RawlsBillingProjectStatus": {
      "description": "a billing project status",
      "properties": {
        "creationStatus": {
          "enum": [
            "Creating",
            "Ready",
            "Error"
          ],
          "type": "string"
        },
        "projectName": {
          "description": "the name of the billing project",
          "type": "string"
        }
      },
      "required": [
        "creationStatus",
        "projectName"
      ],
      "type": "object"
    },
    "RawlsBillingProjectTransfer": {
      "description": "admin request to transfer a pre-created billing project to a new owner",
      "properties": {
        "bucket": {
          "description": "generated Cromwell auth bucket, minus the gs:// prefix",
          "type": "string"
        },
        "newOwnerEmail": {
          "description": "Email of the new billing project owner",
          "type": "string"
        },
        "newOwnerToken": {
          "description": "OAuth2AccessToken of the new billing project owner",
          "type": "string"
        },
        "project": {
          "description": "the name of the new google project",
          "type": "string"
        }
      },
      "required": [
        "bucket",
        "newOwnerEmail",
        "newOwnerToken",
        "project"
      ],
      "type": "object"
    },
    "RawlsGroupRef": {
      "description": "a reference to a group",
      "properties": {
        "groupName": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RawlsGroupShort": {
      "description": "group information without memberships",
      "properties": {
        "groupEmail": {
          "description": "",
          "type": "string"
        },
        "groupName": {
          "description": "",
          "type": "string"
        }
      },
      "type": "object"
    },
    "RemoveAttribute": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeName": {
              "description": "The name of attribute to remove",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "RemoveListMember": {
      "allOf": [
        {
          "$ref": "#/definitions/AttributeUpdateOperation"
        },
        {
          "properties": {
            "attributeListName": {
              "description": "The name of the attribute list",
              "type": "string"
            },
            "removeMember": {
              "description": "The attribute to remove from the list",
              "type": "string"
            }
          },
          "type": "object"
        }
      ]
    },
    "StackTraceElement": {
      "description": "",
      "properties": {
        "className": {
          "description": "class name",
          "type": "string"
        },
        "fileName": {
          "description": "source file name",
          "type": "string"
        },
        "lineNumber": {
          "description": "line number",
          "type": "integer"
        },
        "methodName": {
          "description": "method name",
          "type": "string"
        }
      },
      "required": [
        "className",
        "fileName",
        "lineNumber",
        "methodName"
      ],
      "type": "object"
    },
    "Submission": {
      "description": "",
      "properties": {
        "cost": {
          "description": "The compute cost of this submission",
          "format": "float",
          "type": "number"
        },
        "deleteIntermediateOutputFiles": {
          "description": "Whether or not to delete intermediate output files when the workflow completes. See [Cromwell docs](https://cromwell.readthedocs.io/en/stable/wf_options/Google#google-pipelines-api-workflow-options) for more information.",
          "type": "boolean"
        },
        "externalEntityInfo": {
          "$ref": "#/definitions/ExternalEntityInfo"
        },
        "methodConfigurationName": {
          "description": "Method configuration name",
          "type": "string"
        },
        "methodConfigurationNamespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/SubmissionStatus"
        },
        "submissionDate": {
          "description": "SubmissionRequest date",
          "format": "date-time",
          "type": "string"
        },
        "submissionEntity": {
          "$ref": "#/definitions/AttributeEntityReference"
        },
        "submissionId": {
          "description": "SubmissionRequest unique identifier",
          "type": "string"
        },
        "submitter": {
          "description": "user that created the submission",
          "type": "string"
        },
        "useCallCache": {
          "description": "Whether or not to read from cache for this submission",
          "type": "boolean"
        },
        "workflowFailureMode": {
          "default": "NoNewCalls",
          "description": "What happens after a task fails. Choose from ContinueWhilePossible and NoNewCalls. Defaults to NoNewCalls if not specified. See Cromwell docs for more information.",
          "enum": [
            "NoNewCalls",
            "ContinueWhilePossible"
          ],
          "type": "string"
        },
        "workflows": {
          "description": "Status of Workflow(s)",
          "items": {
            "$ref": "#/definitions/Workflow"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SubmissionListResponse": {
      "description": "An abbreviated Submission, without workflow information, good for listings",
      "properties": {
        "externalEntityInfo": {
          "$ref": "#/definitions/ExternalEntityInfo"
        },
        "methodConfigurationName": {
          "description": "Method configuration name",
          "type": "string"
        },
        "methodConfigurationNamespace": {
          "description": "Method configuration namespace",
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/SubmissionStatus"
        },
        "submissionDate": {
          "description": "Submission date",
          "format": "date-time",
          "type": "string"
        },
        "submissionEntity": {
          "$ref": "#/definitions/AttributeEntityReference"
        },
        "submissionId": {
          "description": "Submission unique identifier",
          "type": "string"
        },
        "submitter": {
          "description": "user that created the submission",
          "type": "string"
        },
        "workflowFailureMode": {
          "default": "NoNewCalls",
          "description": "What happens after a task fails. Choose from ContinueWhilePossible and NoNewCalls. Defaults to NoNewCalls if not specified. See Cromwell docs for more information.",
          "enum": [
            "NoNewCalls",
            "ContinueWhilePossible"
          ],
          "type": "string"
        },
        "workflowStatuses": {
          "description": "a count of the workflow statuses in the submission as a Map[String,Int]",
          "properties": {},
          "type": "object"
        }
      },
      "type": "object"
    },
    "SubmissionReport": {
      "description": "information on a submission",
      "properties": {
        "header": {
          "$ref": "#/definitions/SubmissionValidationHeader"
        },
        "request": {
          "$ref": "#/definitions/SubmissionRequest"
        },
        "status": {
          "description": "status",
          "type": "string"
        },
        "submissionDate": {
          "description": "SubmissionRequest date",
          "format": "date-time",
          "type": "string"
        },
        "submissionId": {
          "description": "SubmissionRequest unique identifier",
          "type": "string"
        },
        "submitter": {
          "description": "user that created the submission",
          "type": "string"
        },
        "workflows": {
          "description": "workflows initiated by this submission",
          "items": {
            "$ref": "#/definitions/SubmissionValidationEntityInputs"
          },
          "type": "array"
        }
      },
      "required": [
        "header",
        "request",
        "status",
        "submissionDate",
        "submissionId",
        "submitter",
        "workflows"
      ],
      "type": "object"
    },
    "SubmissionRequest": {
      "description": "If the referenced method configuration takes no root entity, do not define `entityType`, `entityName` and `expression`.",
      "properties": {
        "deleteIntermediateOutputFiles": {
          "description": "Whether or not to delete intermediate output files when the workflow completes. See [Cromwell docs](https://cromwell.readthedocs.io/en/stable/wf_options/Google#google-pipelines-api-workflow-options) for more information.",
          "type": "boolean"
        },
        "entityName": {
          "description": "Name of root entity for expression. Optional if the method configuration has no root entity.",
          "type": "string"
        },
        "entityType": {
          "description": "Type of root entity for expression. Optional if the method configuration has no root entity.",
          "type": "string"
        },
        "expression": {
          "description": "Expression that resolves to one or more entities matching the entity type in the method configuration. Optional if the method configuration has no root entity.",
          "type": "string"
        },
        "methodConfigurationName": {
          "description": "Name of the method configuration to execute.",
          "type": "string"
        },
        "methodConfigurationNamespace": {
          "description": "Namespace of the method configuration to execute.",
          "type": "string"
        },
        "useCallCache": {
          "description": "Whether or not to read from cache for this submission",
          "type": "boolean"
        },
        "workflowFailureMode": {
          "default": "NoNewCalls",
          "description": "What happens after a task fails. Choose from ContinueWhilePossible and NoNewCalls. Defaults to NoNewCalls if not specified. See Cromwell docs for more information.",
          "enum": [
            "NoNewCalls",
            "ContinueWhilePossible"
          ],
          "type": "string"
        }
      },
      "required": [
        "methodConfigurationName",
        "methodConfigurationNamespace"
      ],
      "type": "object"
    },
    "SubmissionStatus": {
      "description": "submission status",
      "enum": [
        "Accepted",
        "Evaluating",
        "Submitting",
        "Submitted",
        "Aborting",
        "Aborted",
        "Done"
      ],
      "type": "string"
    },
    "SubmissionValidationEntityInputs": {
      "description": "the results of parsing each of the inputs for one entity",
      "properties": {
        "entityName": {
          "description": "name of entity. May be empty if this submission doesn't run on an entity",
          "type": "string"
        },
        "inputResolutions": {
          "description": "input resolution",
          "items": {
            "$ref": "#/definitions/SubmissionValidationValue"
          },
          "type": "array"
        }
      },
      "required": [
        "entityName",
        "inputResolutions"
      ],
      "type": "object"
    },
    "SubmissionValidationHeader": {
      "description": "common values for all the entities -- the entity type and the input descriptions",
      "properties": {
        "entityType": {
          "description": "type of entity",
          "type": "string"
        },
        "inputExpressions": {
          "description": "input descriptions",
          "items": {
            "$ref": "#/definitions/SubmissionValidationInput"
          },
          "type": "array"
        }
      },
      "required": [
        "entityType",
        "inputExpressions"
      ],
      "type": "object"
    },
    "SubmissionValidationInput": {
      "description": "method configuration input parameter, its name and the associated expression from the method config",
      "properties": {
        "expression": {
          "description": "expression for input",
          "type": "string"
        },
        "wdlName": {
          "description": "name of input",
          "type": "string"
        }
      },
      "required": [
        "expression",
        "wdlName"
      ],
      "type": "object"
    },
    "SubmissionValidationReport": {
      "description": "the results of parsing each input for each entity",
      "properties": {
        "header": {
          "$ref": "#/definitions/SubmissionValidationHeader"
        },
        "invalidEntities": {
          "description": "non-runnable entities",
          "items": {
            "$ref": "#/definitions/SubmissionValidationEntityInputs"
          },
          "type": "array"
        },
        "request": {
          "$ref": "#/definitions/SubmissionRequest"
        },
        "validEntities": {
          "description": "runnable entities",
          "items": {
            "$ref": "#/definitions/SubmissionValidationEntityInputs"
          },
          "type": "array"
        }
      },
      "required": [
        "header",
        "invalidEntities",
        "request",
        "validEntities"
      ],
      "type": "object"
    },
    "SubmissionValidationValue": {
      "description": "result of an expression parse for one of the inputs",
      "properties": {
        "error": {
          "description": "parsing error(s)",
          "type": "string"
        },
        "inputName": {
          "description": "name of input",
          "type": "string"
        },
        "value": {
          "description": "the value of the input expression for the specified entity",
          "type": "string"
        }
      },
      "required": [
        "inputName"
      ],
      "type": "object"
    },
    "SubsystemStatus": {
      "description": "status of a subsystem Rawls depends on",
      "properties": {
        "messages": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ok": {
          "description": "whether this system needs attention",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "SyncReport": {
      "description": "report of members added or removed",
      "properties": {
        "items": {
          "items": {
            "$ref": "#/definitions/SyncReportItem"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SyncReportItem": {
      "description": "results of an attempt to synchronize a member",
      "properties": {
        "email": {
          "type": "string"
        },
        "errorReport": {
          "$ref": "#/definitions/ErrorReport"
        },
        "operation": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SystemStatus": {
      "description": "status of each system Rawls depends on",
      "properties": {
        "ok": {
          "description": "whether any system(s) need attention",
          "example": false,
          "type": "boolean"
        },
        "systems": {
          "description": "Map[String, SubsystemStatus]",
          "example": {
            "Agora": {
              "ok": true
            },
            "Cromwell": {
              "ok": true
            },
            "Database": {
              "ok": true
            },
            "GoogleBilling": {
              "messages": [
                "Google Billing is misbehaving!"
              ],
              "ok": false
            },
            "GoogleBuckets": {
              "ok": true
            },
            "GoogleGenomics": {
              "ok": true
            },
            "GoogleGroups": {
              "ok": true
            },
            "GooglePubSub": {
              "ok": true
            },
            "LDAP": {
              "messages": [
                "LDAP is down :("
              ],
              "ok": false
            }
          },
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "ok",
        "systems"
      ],
      "type": "object"
    },
    "TaskOutput": {
      "description": "Outputs from a single task in a workflow",
      "properties": {
        "logs": {
          "description": "logs for this task",
          "items": {
            "$ref": "#/definitions/ExecutionServiceCallLogs"
          },
          "type": "array"
        },
        "outputs": {
          "description": "Map[String,String]",
          "properties": {},
          "type": "object"
        }
      },
      "type": "object"
    },
    "UserRefreshToken": {
      "description": "payload to put a refresh token",
      "properties": {
        "refreshToken": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "UserRefreshTokenDate": {
      "description": "date a refresh token was stored",
      "properties": {
        "refreshTokenUpdatedDate": {
          "format": "date-time",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ValidatedMethodConfiguration": {
      "description": "Information about the validity of a method configuration's expressions relative to the method itself",
      "properties": {
        "extraInputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "invalidInputs": {
          "properties": {},
          "type": "object"
        },
        "invalidOutputs": {
          "properties": {},
          "type": "object"
        },
        "methodConfiguration": {
          "$ref": "#/definitions/MethodConfiguration"
        },
        "missingInputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "validInputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "validOutputs": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "extraInputs",
        "invalidInputs",
        "invalidOutputs",
        "methodConfiguration",
        "missingInputs",
        "validInputs",
        "validOutputs"
      ],
      "type": "object"
    },
    "Workflow": {
      "description": "",
      "properties": {
        "cost": {
          "description": "The run cost of this workflow",
          "format": "float",
          "type": "number"
        },
        "inputResolutions": {
          "description": "The evaluation of each input",
          "items": {
            "$ref": "#/definitions/SubmissionValidationValue"
          },
          "type": "array"
        },
        "messages": {
          "description": "List of messages about this workflow",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "status": {
          "$ref": "#/definitions/WorkflowStatus"
        },
        "statusLastChangedDate": {
          "description": "Status last-changed date",
          "format": "date-time",
          "type": "string"
        },
        "workflowEntity": {
          "$ref": "#/definitions/AttributeEntityReference"
        },
        "workflowId": {
          "description": "Workflow unique identifier",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowCost": {
      "description": "The cost of a workflow, if available",
      "properties": {
        "cost": {
          "description": "Workflow cost",
          "type": "number"
        },
        "workflowId": {
          "description": "The id of this workflow",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowOutputs": {
      "description": "Outputs and logs from all tasks in a workflow",
      "properties": {
        "tasks": {
          "description": "Map from tasks to output/log pairs",
          "items": {
            "$ref": "#/definitions/TaskOutput"
          },
          "type": "array"
        },
        "workflowId": {
          "description": "The id of this workflow",
          "type": "string"
        }
      },
      "type": "object"
    },
    "WorkflowQueueStatusByUserResponse": {
      "description": "Information about the status of workflows and the workflow queue, broken out by user",
      "properties": {
        "maxActiveWorkflowsPerUser": {
          "description": "maximum number of active workflows allower per user",
          "type": "integer"
        },
        "maxActiveWorkflowsTotal": {
          "description": "maximum number of active workflows allowed in total",
          "type": "integer"
        },
        "statuses": {
          "description": "Map[String, Int]",
          "properties": {},
          "type": "object"
        },
        "users": {
          "description": "Map[String, Map[String, Int]]",
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "maxActiveWorkflowsPerUser",
        "maxActiveWorkflowsTotal",
        "statuses",
        "users"
      ],
      "type": "object"
    },
    "WorkflowQueueStatusResponse": {
      "description": "Information about the status of workflows and the workflow queue",
      "properties": {
        "estimatedQueueTimeMS": {
          "description": "estimated milliseconds until the current queue is submitted",
          "type": "integer"
        },
        "workflowCountsByStatus": {
          "description": "Map[String,Int]",
          "properties": {},
          "type": "object"
        },
        "workflowsBeforeNextUserWorkflow": {
          "description": "the number of workflows in the queue ahead of the user's first workflow",
          "type": "integer"
        }
      },
      "required": [
        "estimatedQueueTimeMS",
        "workflowCountsByStatus",
        "workflowsBeforeNextUserWorkflow"
      ],
      "type": "object"
    },
    "WorkflowStatus": {
      "description": "workflow status",
      "enum": [
        "Queued",
        "Launching",
        "Submitted",
        "Running",
        "Failed",
        "Succeeded",
        "Aborting",
        "Aborted",
        "Unknown"
      ],
      "type": "string"
    },
    "WorkspaceACL": {
      "description": "",
      "properties": {
        "acl": {
          "description": "Map[String,WorkspaceAccessEntry]",
          "properties": {},
          "type": "object"
        }
      },
      "required": [
        "acl"
      ],
      "type": "object"
    },
    "WorkspaceACLUpdate": {
      "description": "",
      "properties": {
        "accessLevel": {
          "description": "The access level to grant to this user or group (OWNER, READER, WRITER, NO ACCESS)",
          "type": "string"
        },
        "canCompute": {
          "description": "Set to true if you want this user to be able to launch compute in this workspace, may not be true for readers, default false for reader, true otherwise",
          "type": "boolean"
        },
        "canShare": {
          "description": "Set to true if you want this user to be able to share the workspace with other users, only meaningful for readers and writers, default false",
          "type": "boolean"
        },
        "email": {
          "description": "email address of the user or group whose permissions will be changed",
          "type": "string"
        }
      },
      "required": [
        "accessLevel",
        "email"
      ],
      "type": "object"
    },
    "WorkspaceACLUpdateResponseList": {
      "description": "",
      "properties": {
        "invitesSent": {
          "description": "the list of invites that were sent",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdate"
          },
          "type": "array"
        },
        "invitesUpdated": {
          "description": "the list of invites that were updated",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdate"
          },
          "type": "array"
        },
        "usersNotFound": {
          "description": "the users or groups who were not found",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdate"
          },
          "type": "array"
        },
        "usersUpdated": {
          "description": "the users or groups who were updated",
          "items": {
            "$ref": "#/definitions/WorkspaceACLUpdate"
          },
          "type": "array"
        }
      },
      "required": [
        "invitesSent",
        "invitesUpdated",
        "usersNotFound",
        "usersUpdated"
      ],
      "type": "object"
    },
    "WorkspaceAccessEntry": {
      "description": "",
      "properties": {
        "accessLevel": {
          "description": "The access level granted to this user or group (OWNER, READER, WRITER, NO ACCESS)",
          "type": "string"
        },
        "canCompute": {
          "description": "True if the user can launch compute in this workspace, false otherwise",
          "type": "boolean"
        },
        "canShare": {
          "description": "True if the user can share the workspace with others, false otherwise",
          "type": "boolean"
        },
        "pending": {
          "description": "The status of the users access",
          "type": "boolean"
        }
      },
      "required": [
        "accessLevel",
        "canCompute",
        "canShare",
        "pending"
      ],
      "type": "object"
    },
    "WorkspaceAccessLevel": {
      "description": "The level of access a user or group has on a Workspace. NoAccess, Read, Write, Owner, ProjectOwner",
      "enum": [
        "PROJECT_OWNER",
        "OWNER",
        "WRITER",
        "READER",
        "NO ACCESS"
      ],
      "type": "string"
    },
    "WorkspaceBucketOptions": {
      "description": "Extra information about a GCS bucket attached to a workspace",
      "properties": {
        "requesterPays": {
          "description": "Whether the bucket is requester pays",
          "type": "boolean"
        }
      },
      "required": [
        "requesterPays"
      ],
      "type": "object"
    },
    "WorkspaceCatalog": {
      "description": "",
      "properties": {
        "catalog": {
          "description": "Set to true if you want this user to be able to perform library related operations on the workspace",
          "type": "boolean"
        },
        "email": {
          "description": "email of the user or group whose permissions will be changed",
          "type": "string"
        }
      },
      "required": [
        "catalog",
        "email"
      ],
      "type": "object"
    },
    "WorkspaceCatalogResponse": {
      "description": "",
      "properties": {
        "catalog": {
          "description": "Set to true if you want this user to be able to perform library related operations on the workspace",
          "type": "boolean"
        },
        "subjectId": {
          "description": "subject Id of the user or group whose permissions will be changed",
          "type": "string"
        }
      },
      "required": [
        "catalog",
        "subjectId"
      ],
      "type": "object"
    },
    "WorkspaceCatalogUpdateResponseList": {
      "description": "",
      "properties": {
        "emailsNotFound": {
          "description": "the emails of users or groups who were not found",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "usersUpdated": {
          "description": "the users or groups who were updated",
          "items": {
            "$ref": "#/definitions/WorkspaceCatalogResponse"
          },
          "type": "array"
        }
      },
      "required": [
        "emailsNotFound",
        "usersUpdated"
      ],
      "type": "object"
    },
    "WorkspaceDetails": {
      "description": "",
      "properties": {
        "attributes": {
          "description": "Map[String, Attribute]",
          "properties": {},
          "type": "object"
        },
        "authorizationDomain": {
          "description": "The list of groups in the Authorization Domain (empty if no AD is set)",
          "items": {
            "$ref": "#/definitions/ManagedGroupRef"
          },
          "type": "array"
        },
        "bucketName": {
          "description": "The name of the bucket associated with the workspace",
          "type": "string"
        },
        "createdBy": {
          "description": "The user who created the workspace",
          "type": "string"
        },
        "createdDate": {
          "description": "The date the workspace was created in yyyy-MM-ddTHH:mm:ss.SSSZZ format",
          "format": "date-time",
          "type": "string"
        },
        "googleProject": {
          "description": "the google project used by the workspace for compute and storage",
          "type": "string"
        },
        "isLocked": {
          "description": "Can the Workspace currently be modified?",
          "type": "boolean"
        },
        "lastModified": {
          "description": "The date the workspace was last modified in yyyy-MM-ddTHH:mm:ss.SSSZZ format",
          "format": "date-time",
          "type": "string"
        },
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace the workspace belongs to",
          "type": "string"
        },
        "workflowCollectionName": {
          "description": "The name of the workflow collection associated with the workspace",
          "type": "string"
        },
        "workspaceId": {
          "description": "A UUID associated with the workspace",
          "type": "string"
        },
        "workspaceVersion": {
          "description": "internal use",
          "type": "string"
        }
      },
      "required": [
        "bucketName",
        "createdBy",
        "createdDate",
        "isLocked",
        "lastModified",
        "name",
        "namespace",
        "workspaceId",
        "googleProject",
        "workspaceVersion"
      ],
      "type": "object"
    },
    "WorkspaceListResponse": {
      "description": "",
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/WorkspaceAccessLevel"
        },
        "public": {
          "type": "boolean"
        },
        "workspace": {
          "$ref": "#/definitions/WorkspaceDetails"
        },
        "workspaceSubmissionStats": {
          "$ref": "#/definitions/WorkspaceSubmissionStats"
        }
      },
      "type": "object"
    },
    "WorkspaceName": {
      "description": "",
      "properties": {
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace (billing project) the workspace belongs to",
          "type": "string"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "WorkspaceRequest": {
      "description": "",
      "properties": {
        "attributes": {
          "properties": {},
          "type": "object"
        },
        "authorizationDomain": {
          "description": "The list of groups in the Authorization Domain (empty if no AD is set)",
          "items": {
            "$ref": "#/definitions/ManagedGroupRef"
          },
          "type": "array"
        },
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace (billing project) the workspace belongs to",
          "type": "string"
        },
        "noWorkspaceOwner": {
          "default": false,
          "description": "Optional, false if not specified. If true, the workspace is created with a Billing Project owner but no workspace owner. Requires being a Billing Project owner.",
          "type": "boolean"
        }
      },
      "required": [
        "attributes",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "WorkspaceRequestClone": {
      "description": "",
      "properties": {
        "attributes": {
          "properties": {},
          "type": "object"
        },
        "authorizationDomain": {
          "description": "The list of groups in the Authorization Domain (empty if no AD is set)",
          "items": {
            "$ref": "#/definitions/ManagedGroupRef"
          },
          "type": "array"
        },
        "copyFilesWithPrefix": {
          "description": "Used for clone operations only; the prefix for files to copy between source and destination workspace buckets",
          "type": "string"
        },
        "name": {
          "description": "The name of the workspace",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace (billing project) the workspace belongs to",
          "type": "string"
        },
        "noWorkspaceOwner": {
          "default": false,
          "description": "Optional, false if not specified. If true, the workspace is created with a Billing Project owner but no workspace owner. Requires being a Billing Project owner.",
          "type": "boolean"
        }
      },
      "required": [
        "attributes",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "WorkspaceResponse": {
      "description": "",
      "properties": {
        "accessLevel": {
          "$ref": "#/definitions/WorkspaceAccessLevel"
        },
        "bucketOptions": {
          "$ref": "#/definitions/WorkspaceBucketOptions"
        },
        "canCompute": {
          "type": "boolean"
        },
        "canShare": {
          "type": "boolean"
        },
        "catalog": {
          "type": "boolean"
        },
        "owners": {
          "description": "Owners of this workspace. This API only lists owners; use the get-workspace-ACL API to get the full list of all users at all permission levels.\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "workspace": {
          "$ref": "#/definitions/WorkspaceDetails"
        },
        "workspaceSubmissionStats": {
          "$ref": "#/definitions/WorkspaceSubmissionStats"
        }
      },
      "type": "object"
    },
    "WorkspaceSubmissionStats": {
      "description": "Statistics about submissions in a workspace",
      "properties": {
        "lastFailureDate": {
          "description": "The date of the last failed submission",
          "format": "date-time",
          "type": "string"
        },
        "lastSuccessDate": {
          "description": "The date of the last successful submission",
          "format": "date-time",
          "type": "string"
        },
        "runningSubmissionsCount": {
          "description": "Count of all the running submissions",
          "type": "integer"
        }
      },
      "required": [
        "runningSubmissionsCount"
      ],
      "type": "object"
    },
    "WorkspaceTag": {
      "description": "tag with count",
      "properties": {
        "count": {
          "description": "number of usages of the tag across FireCloud",
          "type": "number"
        },
        "tag": {
          "description": "tag string",
          "type": "string"
        }
      },
      "required": [
        "count",
        "tag"
      ],
      "type": "object"
    }
  },
  "securityDefinitions": {
    "authorization": {
      "authorizationUrl": "https://accounts.google.com/o/oauth2/auth",
      "flow": "implicit",
      "scopes": {
        "email": "email authorization",
        "https://www.googleapis.com/auth/cloud-billing": "cloud billing authorization",
        "openid": "open id authorization",
        "profile": "profile authorization"
      },
      "type": "oauth2"
    }
  },
  "tags": [
    {
      "description": "Administrative API",
      "name": "admin"
    },
    {
      "description": "Submissions API",
      "name": "submissions"
    },
    {
      "description": "Entity manipulation API",
      "name": "entities"
    },
    {
      "description": "Method Configuration manipulation API",
      "name": "methodconfigs"
    },
    {
      "description": "Workspace manipulation API",
      "name": "workspaces"
    },
    {
      "description": "User and Group API",
      "name": "users"
    },
    {
      "description": "Billing Project API",
      "name": "billing"
    },
    {
      "description": "Group manipulation API",
      "name": "groups"
    },
    {
      "description": "Notifications API",
      "name": "notifications"
    },
    {
      "description": "Data Repo snapshot API",
      "name": "snapshots"
    }
  ],
  "x-components": {}
}
