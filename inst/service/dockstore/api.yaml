{
  "swagger": "2.0",
  "info": {
    "contact": {
      "email": "theglobalalliance@genomicsandhealth.org",
      "name": "Dockstore@ga4gh",
      "url": "https://discuss.dockstore.org/t/opening-helpdesk-tickets/1506"
    },
    "description": "This describes the dockstore API, a webservice that manages pairs of Docker images and associated metadata such as CWL documents and Dockerfiles used to build those images. Explore swagger.json for a Swagger 2.0 description of our API and explore openapi.yaml for OpenAPI 3.0 descriptions.",
    "license": {
      "name": "Apache License Version 2.0",
      "url": "https://github.com/dockstore/dockstore/blob/develop/LICENSE"
    },
    "termsOfService": "https://github.com/dockstore/dockstore-ui2/raw/develop/src/assets/docs/Dockstore_Terms_of_Service.pdf",
    "title": "Dockstore API",
    "version": "1.15.4"
  },
  "basePath": "/api",
  "paths": {
    "/aliases/workflow-versions/{alias}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/WorkflowVersionPathInfo"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "aliases"
        ],
        "description": "Retrieves workflow version path information by alias.",
        "operationId": "getWorkflowVersionPathInfoByAlias"
      }
    },
    "/aliases/workflow-versions/{workflowVersionId}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "aliases",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/WorkflowVersion"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "aliases"
        ],
        "description": "Add aliases linked to a workflow version in Dockstore.",
        "operationId": "addAliases"
      }
    },
    "/api/ga4gh/v1/metadata": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "operationId": "metadataGet_1"
      }
    },
    "/api/ga4gh/v1/tool-classes": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "operationId": "toolClassesGet_2"
      }
    },
    "/api/ga4gh/v1/tools": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "registry",
            "type": "string"
          },
          {
            "in": "query",
            "name": "organization",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "toolname",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "type": "string"
          },
          {
            "in": "query",
            "name": "author",
            "type": "string"
          },
          {
            "in": "query",
            "name": "offset",
            "type": "string"
          },
          {
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tools that match the filter.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolV1"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "description": "This endpoint returns all tools available or a filtered subset using metadata query parameters.",
        "operationId": "toolsGetV1",
        "summary": "List all tools"
      }
    },
    "/api/ga4gh/v1/tools/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool.",
            "schema": {
              "$ref": "#/definitions/ToolV1"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "description": "This endpoint returns one specific tool (which has ToolVersions nested inside it)",
        "operationId": "toolsIdGetV1",
        "summary": "List one specific tool, acts as an anchor for self references"
      }
    },
    "/api/ga4gh/v1/tools/{id}/versions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tool versions",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolVersionV1"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "description": "Returns all versions of the specified tool",
        "operationId": "toolsIdVersionGetV1",
        "summary": "List versions of a tool"
      }
    },
    "/api/ga4gh/v1/tools/{id}/versions/{version_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool version.",
            "schema": {
              "$ref": "#/definitions/ToolVersionV1"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "description": "This endpoint returns one specific tool version",
        "operationId": "versionIdGetV1",
        "summary": "List one specific tool version, acts as an anchor for self references"
      }
    },
    "/api/ga4gh/v1/tools/{id}/versions/{version_id}/dockerfile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool payload.",
            "schema": {
              "$ref": "#/definitions/ToolDockerfile"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "description": "Returns the dockerfile for the specified image.",
        "operationId": "dockerfileGetV1",
        "summary": "Get the dockerfile for the specified image."
      }
    },
    "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool descriptor.",
            "schema": {
              "$ref": "#/definitions/ToolDescriptor"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/ToolDescriptor"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "description": "Returns the CWL or WDL descriptor for the specified tool.",
        "operationId": "descriptorGetV1",
        "summary": "Get the tool descriptor (CWL/WDL) for the specified tool."
      }
    },
    "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "relative_path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool descriptor.",
            "schema": {
              "$ref": "#/definitions/ToolDescriptor"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/ToolDescriptor"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "description": "Returns additional CWL or WDL descriptors for the specified tool in the same or subdirectories",
        "operationId": "relativeDescriptorGetV1",
        "summary": "Get additional tool descriptor files (CWL/WDL) relative to the main file"
      }
    },
    "/api/ga4gh/v1/tools/{id}/versions/{version_id}/{type}/tests": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool test JSON response.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolTestsV1"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolTestsV1"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GHV1"
        ],
        "operationId": "testsGetV1",
        "summary": "Get an array of test JSONs suitable for use with this descriptor type."
      }
    },
    "/api/ga4gh/v2/extended/containers/{organization}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tools of the input organization.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolV1"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint returns entries of an organization.",
        "operationId": "entriesOrgGet",
        "summary": "List entries of an organization"
      }
    },
    "/api/ga4gh/v2/extended/organizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "An array of organizations' names.",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint returns list of all organizations.",
        "operationId": "entriesOrgsGet",
        "summary": "List all organizations"
      }
    },
    "/api/ga4gh/v2/extended/tools/entry/_search": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "An elastic search result.",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint searches the indices for all published tools and workflows. Used by utilities that expect to talk to an elastic search endpoint.",
        "operationId": "toolsIndexSearch",
        "summary": "Search the tools and workflows indices."
      }
    },
    "/api/ga4gh/v2/extended/tools/index": {
      "post": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Workflows and tools indices populated with entries.",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint updates the indices for all published tools and workflows.",
        "operationId": "Update the workflows and tools indices",
        "summary": "Update the workflows and tools indices"
      }
    },
    "/api/ga4gh/v2/extended/tools/{organization}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tools of the input organization.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolV1"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint returns tools of an organization.",
        "operationId": "toolsOrgGet",
        "summary": "List tools of an organization"
      }
    },
    "/api/ga4gh/v2/extended/workflows/{organization}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tools of the input organization.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolV1"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint returns workflows of an organization.",
        "operationId": "workflowsOrgGet",
        "summary": "List workflows of an organization"
      }
    },
    "/api/ga4gh/v2/extended/{id}/versions/{version_id}/aggregatedMetrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version for this particular tool registry, for example `v1`",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "additionalProperties": {
                "$ref": "#/definitions/Metrics"
              },
              "type": "object"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint retrieves aggregated metrics for a tool from all platforms",
        "operationId": "aggregatedMetricsGet",
        "summary": "Get aggregated execution metrics for a tool from all platforms"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version for this particular tool registry, for example `v1`",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform that the tool was executed on",
            "enum": [
              "GALAXY",
              "TERRA",
              "DNA_STACK",
              "DNA_NEXUS",
              "CGC",
              "NHLBI_BIODATA_CATALYST",
              "ANVIL",
              "CAVATICA",
              "NEXTFLOW_TOWER",
              "ELWAZI",
              "AGC",
              "OTHER",
              "ALL"
            ],
            "in": "query",
            "name": "platform",
            "required": true,
            "type": "string"
          },
          {
            "description": "Aggregated metrics to add to the version",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Metrics"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Aggregated metrics added successfully.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Credentials not provided or incorrect.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The tool cannot be found to add aggregated metrics.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint adds aggregated metrics for a workflow that was executed on a platform",
        "operationId": "aggregatedMetricsPut",
        "summary": "Add aggregated execution metrics for a workflow that was executed on a platform."
      }
    },
    "/api/ga4gh/v2/extended/{id}/versions/{version_id}/execution": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version for this particular tool registry, for example `v1`",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform that the tool was executed on",
            "enum": [
              "GALAXY",
              "TERRA",
              "DNA_STACK",
              "DNA_NEXUS",
              "CGC",
              "NHLBI_BIODATA_CATALYST",
              "ANVIL",
              "CAVATICA",
              "NEXTFLOW_TOWER",
              "ELWAZI",
              "AGC",
              "OTHER",
              "ALL"
            ],
            "in": "query",
            "name": "platform",
            "required": true,
            "type": "string"
          },
          {
            "description": "The execution ID of the execution to retrieve",
            "in": "query",
            "name": "executionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Execution retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/ExecutionsRequestBody"
            }
          },
          "401": {
            "description": "Credentials not provided or incorrect.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The execution cannot be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint retrieves an execution for a tool by execution ID",
        "operationId": "executionGet",
        "summary": "Get an execution for a tool by execution ID"
      }
    },
    "/api/ga4gh/v2/extended/{id}/versions/{version_id}/executions": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version for this particular tool registry, for example `v1`",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform that the tool was executed on",
            "enum": [
              "GALAXY",
              "TERRA",
              "DNA_STACK",
              "DNA_NEXUS",
              "CGC",
              "NHLBI_BIODATA_CATALYST",
              "ANVIL",
              "CAVATICA",
              "NEXTFLOW_TOWER",
              "ELWAZI",
              "AGC",
              "OTHER",
              "ALL"
            ],
            "in": "query",
            "name": "platform",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional description about the execution metrics",
            "in": "query",
            "name": "description",
            "type": "string"
          },
          {
            "description": "Individual execution metrics to submit. Submitting aggregated execution metrics is deprecated.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecutionsRequestBody"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Execution metrics submitted successfully."
          },
          "401": {
            "description": "Credentials not provided or incorrect.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The tool cannot be found to submit execution metrics.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint submits individual execution metrics for a tool that was executed on a platform. Submitting aggregated execution metrics is deprecated.",
        "operationId": "executionMetricsPost",
        "summary": "Submit individual execution metrics for a tool that was executed on a platform. Submitting aggregated execution metrics is deprecated."
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version for this particular tool registry, for example `v1`",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Platform that the tool was executed on",
            "enum": [
              "GALAXY",
              "TERRA",
              "DNA_STACK",
              "DNA_NEXUS",
              "CGC",
              "NHLBI_BIODATA_CATALYST",
              "ANVIL",
              "CAVATICA",
              "NEXTFLOW_TOWER",
              "ELWAZI",
              "AGC",
              "OTHER",
              "ALL"
            ],
            "in": "query",
            "name": "platform",
            "required": true,
            "type": "string"
          },
          {
            "description": "Optional description about the execution metrics that are being updated",
            "in": "query",
            "name": "description",
            "type": "string"
          },
          {
            "description": "The updated executions",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExecutionsRequestBody"
            }
          }
        ],
        "responses": {
          "207": {
            "description": "Executions to update processed. Please view the individual responses.",
            "schema": {
              "$ref": "#/definitions/ExecutionsResponseBody"
            }
          },
          "401": {
            "description": "Credentials not provided or incorrect.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The tool cannot be found to update the executions.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "extendedGA4GH"
        ],
        "description": "This endpoint updates workflow executions that were executed on a platform. Does not update aggregated metrics, which is deprecated.",
        "operationId": "ExecutionMetricsUpdate",
        "summary": "Update workflow executions that were executed on a platform. Does not update aggregated metrics, which is deprecated."
      }
    },
    "/api/ga4gh/v2/extended/{id}/versions/{version_id}/{type}/tests/{relative_path}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "relative_path",
            "pattern": ".+",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "platform",
            "type": "string"
          },
          {
            "in": "query",
            "name": "platform_version",
            "type": "string"
          },
          {
            "in": "query",
            "name": "verified",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "metadata",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool test JSON response.",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Credentials not provided or incorrect.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "The tool test cannot be found to annotate.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "extendedGA4GH"
        ],
        "description": "Test JSON can be annotated with whether they ran correctly keyed by platform and associated with some metadata.",
        "operationId": "verifyTestParameterFilePost",
        "summary": "Annotate test JSON with information on whether it ran successfully on particular platforms plus metadata"
      }
    },
    "/api/ga4gh/v2/metadata": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A Metadata object describing this service.",
            "schema": {
              "$ref": "#/definitions/MetadataV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "Return some metadata that is useful for describing this registry",
        "operationId": "metadataGet",
        "summary": "Return some metadata that is useful for describing this registry"
      }
    },
    "/api/ga4gh/v2/toolClasses": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of potential tool classes.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolClassV20beta"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "This endpoint returns all tool-classes available ",
        "operationId": "toolClassesGet_1",
        "summary": "List all tool types"
      }
    },
    "/api/ga4gh/v2/tools": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "in": "query",
            "name": "alias",
            "type": "string"
          },
          {
            "in": "query",
            "name": "registry",
            "type": "string"
          },
          {
            "in": "query",
            "name": "organization",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "in": "query",
            "name": "toolname",
            "type": "string"
          },
          {
            "in": "query",
            "name": "description",
            "type": "string"
          },
          {
            "in": "query",
            "name": "author",
            "type": "string"
          },
          {
            "in": "query",
            "name": "checker",
            "type": "boolean"
          },
          {
            "in": "query",
            "name": "offset",
            "type": "string"
          },
          {
            "default": 1000,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tools that match the filter.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolV20beta"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "This endpoint returns all tools available or a filtered subset using metadata query parameters. ",
        "operationId": "toolsGet_1",
        "summary": "List all tools"
      }
    },
    "/api/ga4gh/v2/tools/{id}": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool.",
            "schema": {
              "$ref": "#/definitions/ToolV20beta"
            }
          },
          "404": {
            "description": "The tool can not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "This endpoint returns one specific tool (which has ToolVersions nested inside it)",
        "operationId": "toolsIdGet_1",
        "summary": "List one specific tool, acts as an anchor for self references"
      }
    },
    "/api/ga4gh/v2/tools/{id}/versions": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tool versions",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolVersionV20beta"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "Returns all versions of the specified tool",
        "operationId": "toolsIdVersionsGet_1",
        "summary": "List versions of a tool"
      }
    },
    "/api/ga4gh/v2/tools/{id}/versions/{version_id}": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool version.",
            "schema": {
              "$ref": "#/definitions/ToolVersionV20beta"
            }
          },
          "404": {
            "description": "The tool can not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "This endpoint returns one specific tool version",
        "operationId": "toolsIdVersionsVersionIdGet_1",
        "summary": "List one specific tool version, acts as an anchor for self references"
      }
    },
    "/api/ga4gh/v2/tools/{id}/versions/{version_id}/containerfile": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool payload.",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileWrapperV20beta"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "There are no container specifications for this tool",
            "schema": {
              "$ref": "#/definitions/ErrorV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "Returns the container specifications(s) for the specified image. For example, a CWL CommandlineTool can be associated with one specification for a container, a CWL Workflow can be associated with multiple specifications for containers",
        "operationId": "toolsIdVersionsVersionIdContainerfileGet_1",
        "summary": "Get the container specification(s) for the specified image."
      }
    },
    "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool descriptor.",
            "schema": {
              "$ref": "#/definitions/FileWrapperV20beta"
            }
          },
          "404": {
            "description": "The tool descriptor can not be found.",
            "schema": {
              "$ref": "#/definitions/ErrorV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "Returns the descriptor for the specified tool (examples include CWL, WDL, or Nextflow documents).",
        "operationId": "toolsIdVersionsVersionIdTypeDescriptorGet_1",
        "summary": "Get the tool descriptor for the specified tool"
      }
    },
    "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "relative_path",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool descriptor.",
            "schema": {
              "$ref": "#/definitions/FileWrapperV20beta"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/ErrorV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "Descriptors can often include imports that refer to additional descriptors. This returns additional descriptors for the specified tool in the same or other directories that can be reached as a relative path. This endpoint can be useful for workflow engine implementations like cwltool to programmatically download all the descriptors for a tool and run it. This can optionally include other files described with FileWrappers such as test parameters and containerfiles. ",
        "operationId": "toolsIdVersionsVersionIdTypeDescriptorRelativePathGet_1",
        "summary": "Get additional tool descriptor files relative to the main file"
      }
    },
    "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/files": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The array of File JSON responses.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolFileV20beta"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/ErrorV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "Get a list of objects that contain the relative path and file type. The descriptors are intended for use with the /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path : .+} endpoint.",
        "operationId": "toolsIdVersionsVersionIdTypeFilesGet_1",
        "summary": "Get a list of objects that contain the relative path and file type"
      }
    },
    "/api/ga4gh/v2/tools/{id}/versions/{version_id}/{type}/tests": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool test JSON response.",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileWrapperV20beta"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/ErrorV20beta"
            }
          }
        },
        "tags": [
          "GA4GHV20BETA"
        ],
        "description": "Get a list of test JSONs (these allow you to execute the tool successfully) suitable for use with this descriptor type.",
        "operationId": "toolsIdVersionsVersionIdTypeTestsGet_1",
        "summary": "Get a list of test JSONs"
      }
    },
    "/auth/tokens/bitbucket.org": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added a new bitbucket.org token",
            "schema": {
              "$ref": "#/definitions/Token_User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Add a new bitbucket.org token, used by quay.io redirect.",
        "operationId": "addBitbucketToken"
      }
    },
    "/auth/tokens/github": {
      "post": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Satellizer successfully posted a new GitHub token to Dockstore",
            "schema": {
              "$ref": "#/definitions/Token_Auth"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Allow satellizer to post a new GitHub token to dockstore, used by login, can create new users.",
        "operationId": "addToken"
      }
    },
    "/auth/tokens/github.com": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added a new github.com token",
            "schema": {
              "$ref": "#/definitions/Token_User"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Add a new github.com token, used by accounts page.",
        "operationId": "addGithubToken"
      }
    },
    "/auth/tokens/gitlab.com": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added a new gitlab.com token",
            "schema": {
              "$ref": "#/definitions/Token_User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Add a new gitlab.com token.",
        "operationId": "addGitlabToken"
      }
    },
    "/auth/tokens/google": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully posted a new Google token to Dockstore",
            "schema": {
              "$ref": "#/definitions/Token_Auth"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "409": {
            "description": "Conflict"
          },
          "417": {
            "description": "Expectation failed"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Allow satellizer to post a new Google token to Dockstore.",
        "operationId": "addGoogleToken"
      }
    },
    "/auth/tokens/orcid.org": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added orcid.org token",
            "schema": {
              "$ref": "#/definitions/Token_User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Using OAuth code from ORCID, request and store tokens from ORCID API",
        "operationId": "addOrcidToken",
        "summary": "Add a new orcid.org token"
      }
    },
    "/auth/tokens/quay.io": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "access_token",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added a new Quay.io token",
            "schema": {
              "$ref": "#/definitions/Token_User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Add a new Quay.io token.",
        "operationId": "addQuayToken"
      }
    },
    "/auth/tokens/zenodo.org": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "code",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added a new zenodo.org token",
            "schema": {
              "$ref": "#/definitions/Token_User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Add a new zenodo.org token, used by accounts page.",
        "operationId": "addZenodoToken"
      }
    },
    "/auth/tokens/{tokenId}": {
      "delete": {
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "tokenId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted token"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Token not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Delete a token.",
        "operationId": "deleteToken"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "tokenId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A token specified by id",
            "schema": {
              "$ref": "#/definitions/Token_User"
            }
          },
          "404": {
            "description": "Token not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "tokens"
        ],
        "description": "Get information about a specific token by id.",
        "operationId": "listToken"
      }
    },
    "/categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name of category to retrieve",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "Comma-delimited list of fields to include: entries",
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved categories",
            "schema": {
              "items": {
                "$ref": "#/definitions/Category"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "categories"
        ],
        "description": "Retrieve all categories.",
        "operationId": "getCategories",
        "summary": "Retrieve all categories."
      }
    },
    "/categories/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Category ID.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved category",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Category not found"
          }
        },
        "tags": [
          "categories"
        ],
        "description": "Retrieve a category by ID.",
        "operationId": "getCategoryById",
        "summary": "Retrieve a category by ID."
      }
    },
    "/cloudInstances": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/CloudInstance"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "Cloud Instances"
        ],
        "operationId": "getCloudInstances",
        "summary": "Get all known public cloud instances"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Cloud instance to create",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudInstance"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "Cloud Instances"
        ],
        "operationId": "postCloudInstance",
        "summary": "Add a new public cloud instance, admin only"
      }
    },
    "/cloudInstances/{cloudInstanceId}": {
      "delete": {
        "parameters": [
          {
            "description": "ID of cloud instance to delete",
            "format": "int64",
            "in": "path",
            "name": "cloudInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "Cloud Instances"
        ],
        "operationId": "deleteCloudInstance",
        "summary": "Delete a public cloud instance, admin only"
      }
    },
    "/containers/hostedEntry": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "registry",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          },
          {
            "in": "query",
            "name": "namespace",
            "type": "string"
          },
          {
            "in": "query",
            "name": "entryName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a hosted tool.",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "hosted"
        ],
        "description": "Create a hosted tool.",
        "operationId": "createHostedTool"
      }
    },
    "/containers/hostedEntry/{entryId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted hosted entry version",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "hosted"
        ],
        "description": "Delete a revision of a hosted tool.",
        "operationId": "deleteHostedToolVersion"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Entry to modify",
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Set of updated source files, add files by adding new files with unknown paths, delete files by including them with null content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "hosted"
        ],
        "description": "Non-idempotent operation for creating new revisions of hosted tools.",
        "operationId": "editHostedTool"
      }
    },
    "/containers/namespace/{namespace}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "namespace",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/DockstoreTool"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "containers"
        ],
        "description": "List all published tools belonging to the specified namespace.",
        "operationId": "getPublishedContainersByNamespace"
      }
    },
    "/containers/path/tool/{repository}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Requires full path (including tool name if applicable).",
        "operationId": "getContainerByToolPath",
        "summary": "Get a tool by the specific tool path"
      }
    },
    "/containers/path/tool/{repository}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "tags": [
          "containers"
        ],
        "description": "Requires full path (including tool name if applicable).",
        "operationId": "getPublishedContainerByToolPath",
        "summary": "Get a published tool by the specific tool path."
      }
    },
    "/containers/path/{containerId}/tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containertags"
        ],
        "description": "Get tags for a tool by id.",
        "operationId": "getTagsByPath"
      }
    },
    "/containers/path/{repository}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/DockstoreTool"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Do not include tool name.",
        "operationId": "getContainerByPath",
        "summary": "Get a list of tools by path."
      }
    },
    "/containers/path/{repository}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/DockstoreTool"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Do not include tool name.",
        "operationId": "getPublishedContainerByPath",
        "summary": "Get a list of published tools by path."
      }
    },
    "/containers/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 100,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": "",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "default": "stars",
            "in": "query",
            "name": "sortCol",
            "type": "string"
          },
          {
            "default": "desc",
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/DockstoreTool"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "containers"
        ],
        "description": "List all published tools.",
        "operationId": "allPublishedContainers"
      }
    },
    "/containers/published/{containerId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "tags": [
          "containers"
        ],
        "description": "Get a published tool.",
        "operationId": "getPublishedContainer"
      }
    },
    "/containers/registerManual": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Register a tool manually, along with tags.",
        "operationId": "registerManual"
      }
    },
    "/containers/schema/{containerId}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "type": "object"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "containers"
        ],
        "description": "Get a published tool's schema by ID.",
        "operationId": "getPublishedContainerSchema"
      }
    },
    "/containers/tags": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "query",
            "name": "containerId",
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "List the tags for a tool.",
        "operationId": "tags"
      }
    },
    "/containers/{containerId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Delete a tool.",
        "operationId": "deleteContainer"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Retrieve a tool",
        "operationId": "getContainer"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Updates default descriptor paths, default Dockerfile paths, default test parameter paths, git url, and default version. Also updates tool maintainer email, and private access for manual tools.",
        "operationId": "updateContainer",
        "summary": "Update the tool with the given tool."
      }
    },
    "/containers/{containerId}/descriptor/{relative-path}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          },
          {
            "in": "path",
            "name": "relative-path",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/SourceFile"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Get the corresponding descriptor file.",
        "operationId": "secondaryDescriptorPath"
      }
    },
    "/containers/{containerId}/dockerfile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/SourceFile"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Get the corresponding Dockerfile.",
        "operationId": "dockerfile"
      }
    },
    "/containers/{containerId}/labels": {
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "labels",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Update the labels linked to a tool.",
        "operationId": "updateLabels"
      }
    },
    "/containers/{containerId}/primaryDescriptor": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/SourceFile"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Get the primary descriptor file.",
        "operationId": "primaryDescriptor"
      }
    },
    "/containers/{containerId}/publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PublishRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Publish or unpublish a tool.",
        "operationId": "publish"
      }
    },
    "/containers/{containerId}/refresh": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Refresh one particular tool.",
        "operationId": "refresh"
      }
    },
    "/containers/{containerId}/requestDOI/{tagId}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containertags"
        ],
        "description": "Request a DOI for this version of a tool.",
        "operationId": "requestDOIForToolTag"
      }
    },
    "/containers/{containerId}/secondaryDescriptors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Get a list of secondary descriptor files.",
        "operationId": "secondaryDescriptors"
      }
    },
    "/containers/{containerId}/star": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Tool to star.",
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "StarRequest to star a repo for a user",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StarRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Star a tool.",
        "operationId": "starEntry"
      }
    },
    "/containers/{containerId}/starredUsers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "tags": [
          "containers"
        ],
        "description": "Returns list of users who starred a tool.",
        "operationId": "getStarredUsers"
      }
    },
    "/containers/{containerId}/tags": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containertags"
        ],
        "description": "Add new tags linked to a tool.",
        "operationId": "addTags"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tag"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containertags"
        ],
        "description": "Update the tags linked to a tool.",
        "operationId": "updateTags"
      }
    },
    "/containers/{containerId}/tags/{tagId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containertags"
        ],
        "description": "Delete tag linked to a tool.",
        "operationId": "deleteTags"
      }
    },
    "/containers/{containerId}/tags/{tagId}/description": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "Container to retrieve the version from",
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Tag to retrieve the description from",
            "format": "int64",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containertags"
        ],
        "description": "Retrieve a tag's description",
        "operationId": "getTagDescription"
      }
    },
    "/containers/{containerId}/tags/{tagId}/sourcefiles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Container to retrieve the version from",
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Tag to retrieve the sourcefiles from",
            "format": "int64",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "List of file types to filter sourcefiles by",
            "in": "query",
            "items": {
              "enum": [
                "DOCKSTORE_SMK",
                "SMK_TEST_PARAMS",
                "DOCKSTORE_CWL",
                "CWL_TEST_JSON",
                "DOCKSTORE_WDL",
                "WDL_TEST_JSON",
                "DOCKERFILE",
                "NEXTFLOW",
                "NEXTFLOW_CONFIG",
                "NEXTFLOW_TEST_PARAMS",
                "DOCKSTORE_YML",
                "DOCKSTORE_SERVICE_YML",
                "DOCKSTORE_SERVICE_TEST_JSON",
                "DOCKSTORE_SERVICE_OTHER",
                "DOCKSTORE_GXFORMAT2",
                "GXFORMAT2_TEST_FILE",
                "DOCKSTORE_SWL",
                "SWL_TEST_JSON",
                "DOCKSTORE_JUPYTER",
                "DOCKSTORE_NOTEBOOK_REES",
                "DOCKSTORE_NOTEBOOK_DEVCONTAINER",
                "DOCKSTORE_NOTEBOOK_TEST_FILE",
                "DOCKSTORE_NOTEBOOK_OTHER"
              ],
              "type": "string"
            },
            "name": "fileTypes",
            "type": "array"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containertags"
        ],
        "description": "Retrieve sourcefiles for a container's version",
        "operationId": "getTagsSourcefiles"
      }
    },
    "/containers/{containerId}/testParameterFiles": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "testParameterPaths",
            "type": "array"
          },
          {
            "in": "query",
            "name": "tagName",
            "type": "string"
          },
          {
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Delete test parameter files to a tag.",
        "operationId": "deleteTestParameterFiles"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Get the corresponding test parameter files.",
        "operationId": "getTestParameterFiles"
      },
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "testParameterPaths",
            "type": "array"
          },
          {
            "in": "query",
            "name": "tagName",
            "type": "string"
          },
          {
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Add test parameter files to a tag.",
        "operationId": "addTestParameterFiles"
      }
    },
    "/containers/{containerId}/updateTagPaths": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Change the tool paths.",
        "operationId": "updateTagContainerPath"
      }
    },
    "/containers/{containerId}/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "containerId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Get users of a tool.",
        "operationId": "getUsers"
      }
    },
    "/containers/{toolId}/defaultVersion": {
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "toolId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/DockstoreTool"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Update the default version of the given tool.",
        "operationId": "updateDefaultVersion"
      }
    },
    "/containers/{toolId}/zip/{tagId}": {
      "get": {
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "toolId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "tagId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "containers"
        ],
        "description": "Download a ZIP file of a tool and all associated files.",
        "operationId": "getToolZip"
      }
    },
    "/curation/notifications": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Notification"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "curation"
        ],
        "description": "Return all active notifications",
        "operationId": "getActiveNotifications"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Notification to create",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "curation"
        ],
        "description": "Create a notification",
        "operationId": "createNotification"
      }
    },
    "/curation/notifications/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "curation"
        ],
        "description": "Delete a notification",
        "operationId": "deleteNotification"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        },
        "tags": [
          "curation"
        ],
        "description": "Return the notification with given id",
        "operationId": "getNotification"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Notification"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "curation"
        ],
        "description": "Update a notification",
        "operationId": "updateNotification"
      }
    },
    "/entries/updateEntryToGetTopics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Get the number of entries that failed to have their topics retrieved from GitHub.",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "deprecated": true,
        "description": "Attempt to get the topic of all entries that use GitHub as the source control.",
        "operationId": "updateEntryToGetTopics"
      }
    },
    "/entries/updateLanguageVersions": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": false,
            "description": "Whether to process all versions or only versions without language descriptor already set",
            "in": "query",
            "name": "allVersions",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Number of entries processed",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Update language versions",
        "operationId": "updateLanguageVersions"
      }
    },
    "/entries/updateOpenData": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": false,
            "description": "Whether to process all versions or only versions without open data already set",
            "in": "query",
            "name": "allVersions",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Number of entries processed",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Update open data",
        "operationId": "updateOpenData"
      }
    },
    "/entries/{alias}/aliases": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Alias",
            "in": "path",
            "name": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Retrieves an entry by alias.",
        "operationId": "getEntryByAlias"
      }
    },
    "/entries/{entryId}/exportToOrcid": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the entry to export.",
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Optional version ID of the entry version to export.",
            "format": "int64",
            "in": "query",
            "name": "versionId",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully exported entry to ORCID",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Export entry to ORCID. DOI is required",
        "operationId": "exportToORCID"
      }
    },
    "/entries/{entryId}/verifiedPlatforms": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of the entry",
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/VersionVerifiedPlatform"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Get the verified platforms for each version of an entry.",
        "operationId": "getVerifiedPlatforms"
      }
    },
    "/entries/{entryId}/versions/{versionId}/descriptionMetrics": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Entry to retrieve the version from",
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version to retrieve the sourcefile types from",
            "format": "int64",
            "in": "path",
            "name": "versionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully calculated description metrics",
            "schema": {
              "$ref": "#/definitions/DescriptionMetrics"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Retrieve metrics on the description of an entry",
        "operationId": "getDescriptionMetrics"
      }
    },
    "/entries/{entryId}/versions/{versionId}/fileTypes": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Entry to retrieve the version from",
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version to retrieve the sourcefile types from",
            "format": "int64",
            "in": "path",
            "name": "versionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "enum": [
                  "DOCKSTORE_SMK",
                  "SMK_TEST_PARAMS",
                  "DOCKSTORE_CWL",
                  "CWL_TEST_JSON",
                  "DOCKSTORE_WDL",
                  "WDL_TEST_JSON",
                  "DOCKERFILE",
                  "NEXTFLOW",
                  "NEXTFLOW_CONFIG",
                  "NEXTFLOW_TEST_PARAMS",
                  "DOCKSTORE_YML",
                  "DOCKSTORE_SERVICE_YML",
                  "DOCKSTORE_SERVICE_TEST_JSON",
                  "DOCKSTORE_SERVICE_OTHER",
                  "DOCKSTORE_GXFORMAT2",
                  "GXFORMAT2_TEST_FILE",
                  "DOCKSTORE_SWL",
                  "SWL_TEST_JSON",
                  "DOCKSTORE_JUPYTER",
                  "DOCKSTORE_NOTEBOOK_REES",
                  "DOCKSTORE_NOTEBOOK_DEVCONTAINER",
                  "DOCKSTORE_NOTEBOOK_TEST_FILE",
                  "DOCKSTORE_NOTEBOOK_OTHER"
                ],
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Retrieve the unique file types of a version's sourcefile",
        "operationId": "getVersionsFileTypes"
      }
    },
    "/entries/{id}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          },
          "403": {
            "description": "The specified entry is not deletable."
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Completely remove an entry from Dockstore.",
        "operationId": "deleteEntry"
      }
    },
    "/entries/{id}/aliases": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "aliases",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added alias to entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Add aliases linked to a entry in Dockstore.",
        "operationId": "addAliases_1"
      }
    },
    "/entries/{id}/archive": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully archived the entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Archive an entry.",
        "operationId": "archiveEntry"
      }
    },
    "/entries/{id}/categories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Entry ID",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved categories",
            "schema": {
              "items": {
                "$ref": "#/definitions/Category"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Entry must be published"
          }
        },
        "tags": [
          "entries"
        ],
        "description": "Get the categories that contain the published entry",
        "operationId": "entryCategories"
      }
    },
    "/entries/{id}/collections": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/CollectionOrganization"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "entries"
        ],
        "description": "Get the collections and approved organizations that contain the published entry",
        "operationId": "entryCollections"
      }
    },
    "/entries/{id}/topic": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The id of the entry to add a topic to.",
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Create a discourse topic for an entry.",
        "operationId": "setDiscourseTopic"
      }
    },
    "/entries/{id}/unarchive": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully unarchived the entry",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "entries"
        ],
        "description": "Unarchive an entry.",
        "operationId": "unarchiveEntry"
      }
    },
    "/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "STARRED_ENTRIES",
              "STARRED_ORGANIZATION",
              "ALL_STARRED",
              "PROFILE",
              "SELF_ORGANIZATIONS"
            ],
            "in": "query",
            "name": "eventSearchType",
            "required": true,
            "type": "string"
          },
          {
            "default": 10,
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of events",
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "events"
        ],
        "description": "Requires authentication.",
        "operationId": "getEvents",
        "summary": "Get events based on filters."
      }
    },
    "/events/{userId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "STARRED_ENTRIES",
              "STARRED_ORGANIZATION",
              "ALL_STARRED",
              "PROFILE",
              "SELF_ORGANIZATIONS"
            ],
            "in": "query",
            "name": "eventSearchType",
            "required": true,
            "type": "string"
          },
          {
            "default": 10,
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of events",
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "events"
        ],
        "description": "Optional authentication.",
        "operationId": "getUserEvents",
        "summary": "Get events based on filter and user id."
      }
    },
    "/ga4gh/trs/v2/service-info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A successful operation to request the service information about this running service.'",
            "schema": {
              "$ref": "#/definitions/TRSService"
            }
          }
        },
        "tags": [
          "GA4GHV20"
        ],
        "operationId": "getServiceInfo",
        "summary": "Show information about this service. It is assumed that removing this endpoint from a URL will result in a valid URL to query against"
      }
    },
    "/ga4gh/trs/v2/toolClasses": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of potential tool classes.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolClass"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "This endpoint returns all tool-classes available. ",
        "operationId": "toolClassesGet",
        "summary": "List all tool types"
      }
    },
    "/ga4gh/trs/v2/tools": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "query",
            "name": "id",
            "type": "string"
          },
          {
            "description": "Support for this parameter is optional for tool registries that support aliases. If provided will only return entries with the given alias.",
            "in": "query",
            "name": "alias",
            "type": "string"
          },
          {
            "description": "Filter tools by the name of the subclass (#/definitions/ToolClass)",
            "enum": [
              "CommandLineTool",
              "Workflow"
            ],
            "in": "query",
            "name": "toolClass",
            "type": "string"
          },
          {
            "description": "Filter tools by the name of the descriptor type",
            "enum": [
              "CWL",
              "WDL",
              "NFL",
              "GALAXY",
              "SMK",
              "SERVICE",
              "JUPYTER"
            ],
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          },
          {
            "description": "The image registry that contains the image.",
            "in": "query",
            "name": "registry",
            "type": "string"
          },
          {
            "description": "The organization in the registry that published the image.",
            "in": "query",
            "name": "organization",
            "type": "string"
          },
          {
            "description": "The name of the image.",
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "description": "The name of the tool.",
            "in": "query",
            "name": "toolname",
            "type": "string"
          },
          {
            "description": "The description of the tool.",
            "in": "query",
            "name": "description",
            "type": "string"
          },
          {
            "description": "The author of the tool (TODO a thought occurs, are we assuming that the author of the CWL and the image are the same?).",
            "in": "query",
            "name": "author",
            "type": "string"
          },
          {
            "description": "Return only checker workflows.",
            "in": "query",
            "name": "checker",
            "type": "boolean"
          },
          {
            "description": "Start index of paging. Pagination results can be based on numbers or other values chosen by the registry implementor (for example, SHA values). If this exceeds the current result set return an empty set.  If not specified in the request, this will start at the beginning of the results.",
            "in": "query",
            "name": "offset",
            "type": "string"
          },
          {
            "default": 1000,
            "description": "Amount of records to return in a given page.",
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Tools that match the filter.",
            "schema": {
              "items": {
                "$ref": "#/definitions/Tool"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "This endpoint returns all tools available or a filtered subset using metadata query parameters. ",
        "operationId": "toolsGet",
        "summary": "List all tools"
      }
    },
    "/ga4gh/trs/v2/tools/{id}": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool.",
            "schema": {
              "$ref": "#/definitions/Tool"
            }
          },
          "404": {
            "description": "The tool can not be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "This endpoint returns one specific tool (which has ToolVersions nested inside it).",
        "operationId": "toolsIdGet",
        "summary": "List one specific tool, acts as an anchor for self references"
      }
    },
    "/ga4gh/trs/v2/tools/{id}/versions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tool versions.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolVersion"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "Returns all versions of the specified tool.",
        "operationId": "toolsIdVersionsGet",
        "summary": "List versions of a tool"
      }
    },
    "/ga4gh/trs/v2/tools/{id}/versions/{version_id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version, scoped to this registry, for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead of `develop`)",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A tool version.",
            "schema": {
              "$ref": "#/definitions/ToolVersion"
            }
          },
          "404": {
            "description": "The tool can not be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "This endpoint returns one specific tool version.",
        "operationId": "toolsIdVersionsVersionIdGet",
        "summary": "List one specific tool version, acts as an anchor for self references"
      }
    },
    "/ga4gh/trs/v2/tools/{id}/versions/{version_id}/containerfile": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version, scoped to this registry, for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead of `develop`)",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool payload.",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileWrapper"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "There are no container specifications for this tool.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "Returns the container specifications(s) for the specified image. For example, a CWL CommandlineTool can be associated with one specification for a container, a CWL Workflow can be associated with multiple specifications for containers.",
        "operationId": "toolsIdVersionsVersionIdContainerfileGet",
        "summary": "Get the container specification(s) for the specified image."
      }
    },
    "/ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The output type of the descriptor. Plain types return the bare descriptor while the \"non-plain\" types return a descriptor wrapped with metadata.",
            "enum": [
              "CWL",
              "WDL",
              "NFL",
              "GALAXY",
              "SMK",
              "JUPYTER",
              "PLAIN_CWL",
              "PLAIN_WDL",
              "PLAIN_NFL",
              "PLAIN_GALAXY",
              "PLAIN_SMK",
              "PLAIN_JUPYTER"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version, scoped to this registry, for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead of `develop`)",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool descriptor.",
            "schema": {
              "$ref": "#/definitions/FileWrapper"
            }
          },
          "404": {
            "description": "The tool descriptor can not be found.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "Returns the descriptor for the specified tool (examples include CWL, WDL, Nextflow, Galaxy, or Snakemake documents).",
        "operationId": "toolsIdVersionsVersionIdTypeDescriptorGet",
        "summary": "Get the tool descriptor for the specified tool"
      }
    },
    "/ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path}": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The output type of the descriptor. Plain types return the bare descriptor while the \"non-plain\" types return a descriptor wrapped with metadata.",
            "enum": [
              "CWL",
              "WDL",
              "NFL",
              "GALAXY",
              "SMK",
              "JUPYTER",
              "PLAIN_CWL",
              "PLAIN_WDL",
              "PLAIN_NFL",
              "PLAIN_GALAXY",
              "PLAIN_SMK",
              "PLAIN_JUPYTER"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version, scoped to this registry, for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead of `develop`)",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "A relative path to the additional file (same directory or subdirectories), for example 'foo.cwl' would return a 'foo.cwl' from the same directory as the main descriptor. 'nestedDirectory/foo.cwl' would return the file  from a nested subdirectory.  Unencoded paths such 'sampleDirectory/foo.cwl' should also be allowed.",
            "in": "path",
            "name": "relative_path",
            "pattern": ".+",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool descriptor.",
            "schema": {
              "$ref": "#/definitions/FileWrapper"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "Descriptors can often include imports that refer to additional descriptors. This returns additional descriptors for the specified tool in the same or other directories that can be reached as a relative path. This endpoint can be useful for workflow engine implementations like cwltool to programmatically download all the descriptors for a tool and run it. This can optionally include other files described with FileWrappers such as test parameters and containerfiles.",
        "operationId": "toolsIdVersionsVersionIdTypeDescriptorRelativePathGet",
        "summary": "Get additional tool descriptor files relative to the main file"
      }
    },
    "/ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/files": {
      "get": {
        "produces": [
          "application/json",
          "application/zip"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The output type of the descriptor.",
            "enum": [
              "CWL",
              "WDL",
              "NFL",
              "GALAXY",
              "SMK",
              "SERVICE",
              "JUPYTER"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version, scoped to this registry, for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead of `develop`)",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "Returns a zip file of all files when format=zip is specified.",
            "enum": [
              "zip"
            ],
            "in": "query",
            "name": "format",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The array of File JSON responses.",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolFile"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "Get a list of objects that contain the relative path and file type. The descriptors are intended for use with the /tools/{id}/versions/{version_id}/{type}/descriptor/{relative_path : .+} endpoint. Returns a zip file of all files when format=zip is specified.",
        "operationId": "toolsIdVersionsVersionIdTypeFilesGet",
        "summary": "Get a list of objects that contain the relative path and file type"
      }
    },
    "/ga4gh/trs/v2/tools/{id}/versions/{version_id}/{type}/tests": {
      "get": {
        "produces": [
          "application/json",
          "text/plain"
        ],
        "parameters": [
          {
            "description": "A unique identifier of the tool, scoped to this registry, for example `123456`.",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The output type of the descriptor. Plain types return the bare descriptor while the \"non-plain\" types return a descriptor wrapped with metadata.",
            "enum": [
              "CWL",
              "WDL",
              "NFL",
              "GALAXY",
              "SMK",
              "JUPYTER",
              "PLAIN_CWL",
              "PLAIN_WDL",
              "PLAIN_NFL",
              "PLAIN_GALAXY",
              "PLAIN_SMK",
              "PLAIN_JUPYTER"
            ],
            "in": "path",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "description": "An identifier of the tool version, scoped to this registry, for example `v1`. We recommend that versions use semantic versioning https://semver.org/spec/v2.0.0.html  (For example, `1.0.0` instead of `develop`)",
            "in": "path",
            "name": "version_id",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The tool test JSON response.",
            "schema": {
              "items": {
                "$ref": "#/definitions/FileWrapper"
              },
              "type": "array"
            }
          },
          "404": {
            "description": "The tool can not be output in the specified type.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "GA4GHV20"
        ],
        "description": "Get a list of test JSONs (these allow you to execute the tool successfully) suitable for use with this descriptor type.",
        "operationId": "toolsIdVersionsVersionIdTypeTestsGet",
        "summary": "Get a list of test JSONs"
      }
    },
    "/lambdaEvents/user/{userid}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userid",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Start index of paging. Pagination results can be based on numbers or other values chosen by the registry implementor (for example, SHA values). If this exceeds the current result set return an empty set.  If not specified in the request, this will start at the beginning of the results.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Amount of records to return in a given page, limited to 100",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": "",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "default": "dbCreateDate",
            "in": "query",
            "name": "sortCol",
            "type": "string"
          },
          {
            "default": "desc",
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/LambdaEvent"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "lambdaEvents"
        ],
        "description": "Get all of the Lambda Events for the given user.",
        "operationId": "getUserLambdaEvents"
      }
    },
    "/lambdaEvents/{organization}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          },
          {
            "default": 0,
            "description": "Start index of paging. Pagination results can be based on numbers or other values chosen by the registry implementor (for example, SHA values). If this exceeds the current result set return an empty set.  If not specified in the request, this will start at the beginning of the results.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Amount of records to return in a given page, limited to 100",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "name": "limit",
            "type": "integer"
          },
          {
            "default": "",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "default": "dbCreateDate",
            "in": "query",
            "name": "sortCol",
            "type": "string"
          },
          {
            "default": "desc",
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/LambdaEvent"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "lambdaEvents"
        ],
        "description": "Get all of the Lambda Events for the given GitHub organization.",
        "operationId": "getLambdaEventsByOrganization"
      }
    },
    "/metadata/cli-info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/CLIInfo"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Get Dockstore CLI information. NO authentication",
        "operationId": "getCliVersion",
        "summary": "Get Dockstore CLI information."
      }
    },
    "/metadata/config.json": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Config"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Configuration, NO authentication",
        "operationId": "getConfig",
        "summary": "Configuration for UI clients of the API"
      }
    },
    "/metadata/descriptorLanguageList": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "List of descriptor languages",
            "schema": {
              "items": {
                "$ref": "#/definitions/DescriptorLanguageBean"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Get the list of descriptor languages supported on Dockstore, NO authentication",
        "operationId": "getDescriptorLanguages",
        "summary": "Get the list of descriptor languages supported on Dockstore"
      }
    },
    "/metadata/dockerRegistryList": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "List of Docker registries",
            "schema": {
              "items": {
                "$ref": "#/definitions/RegistryBean"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Get the list of docker registries supported on Dockstore, NO authentication",
        "operationId": "getDockerRegistries",
        "summary": "Get the list of docker registries supported on Dockstore"
      }
    },
    "/metadata/elasticSearch": {
      "get": {
        "produces": [
          "text/html",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Successful response if elastic search is up and running, NO authentication",
        "operationId": "checkElasticSearch",
        "summary": "Successful response if elastic search is up and running"
      }
    },
    "/metadata/entryTypeMetadataList": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "List of entry type metadata",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntryTypeMetadata"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Get the metadata for each entry type",
        "operationId": "getEntryTypeMetadataList",
        "summary": "Get the metadata for each entry type"
      }
    },
    "/metadata/health": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "collectionFormat": "multi",
            "description": "List of health checks to run. If unspecified, run all health checks",
            "in": "query",
            "items": {
              "enum": [
                "hibernate",
                "deadlocks",
                "connectionPool"
              ],
              "type": "string"
            },
            "name": "include",
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "All health checks successful",
            "schema": {
              "items": {
                "$ref": "#/definitions/HealthCheckResult"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Health checks failed"
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Successful response if the health checks succeed, NO authentication",
        "operationId": "checkHealth",
        "summary": "Successful response if the health checks succeed"
      }
    },
    "/metadata/okHttpCachePerformance": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "Cache performance information",
            "schema": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Get measures of cache performance, NO authentication",
        "operationId": "getCachePerformance",
        "summary": "Get measures of cache performance"
      }
    },
    "/metadata/rss": {
      "get": {
        "produces": [
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "List all published tools and workflows in creation order, NO authentication",
        "operationId": "rssFeed",
        "summary": "List all published tools and workflows in creation order"
      }
    },
    "/metadata/runner_dependencies": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "The Dockstore client version (e.g. 1.13.0)",
            "in": "query",
            "name": "client_version",
            "pattern": "(^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$)|(^development-build$)",
            "type": "string"
          },
          {
            "default": "3",
            "description": "Python version, only relevant for the cwltool runner",
            "in": "query",
            "name": "python_version",
            "type": "string"
          },
          {
            "default": "cwltool",
            "description": "The tool runner",
            "enum": [
              "cwltool"
            ],
            "in": "query",
            "name": "runner",
            "type": "string"
          },
          {
            "default": "text",
            "description": "Response type",
            "enum": [
              "json",
              "text"
            ],
            "in": "query",
            "name": "output",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "The requirements.txt file",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Returns the file containing runner dependencies, NO authentication",
        "operationId": "getRunnerDependencies",
        "summary": "Returns the file containing runner dependencies"
      }
    },
    "/metadata/sitemap": {
      "get": {
        "produces": [
          "text/html",
          "text/xml"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "List all available workflow, tool, organization, and collection paths. Available means published for tools/workflows, and approved for organizations and their respective collections. NO authentication",
        "operationId": "sitemap",
        "summary": "List all available workflow, tool, organization, and collection paths."
      }
    },
    "/metadata/sourceControlList": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "List of source control repositories",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceControlBean"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "metadata"
        ],
        "description": "Get the list of source controls supported on Dockstore, NO authentication",
        "operationId": "getSourceControlList",
        "summary": "Get the list of source controls supported on Dockstore"
      }
    },
    "/organizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Organization"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "description": "List all organizations that have been approved by a curator or admin, sorted by number of stars.",
        "operationId": "getApprovedOrganizations",
        "summary": "List all available organizations."
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization to register.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Create an organization. Organization requires approval by an admin before being made public.",
        "operationId": "createOrganization",
        "summary": "Create an organization."
      }
    },
    "/organizations/all": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Filter to apply to organizations.",
            "enum": [
              "all",
              "pending",
              "rejected",
              "approved"
            ],
            "in": "query",
            "name": "type",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Organization"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "List all organizations, regardless of organization status. Admin/curator only.",
        "operationId": "getAllOrganizations",
        "summary": "List all organizations."
      }
    },
    "/organizations/collections/{alias}/aliases": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Alias of the collection.",
            "in": "path",
            "name": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "description": "Retrieve a collection by alias.",
        "operationId": "getCollectionByAlias",
        "summary": "Retrieve a collection by alias."
      }
    },
    "/organizations/collections/{collectionId}/aliases": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Collection to modify.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comma-delimited list of aliases.",
            "in": "query",
            "name": "aliases",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added alias to collection",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Aliases are alphanumerical (case-insensitive and may contain internal hyphens), given in a comma-delimited list.",
        "operationId": "addCollectionAliases",
        "summary": "Add aliases linked to a collection in Dockstore."
      }
    },
    "/organizations/name/{name}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization name.",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve an organization by name. Supports optional authentication.",
        "operationId": "getOrganizationByName",
        "summary": "Retrieve an organization by name."
      }
    },
    "/organizations/{alias}/aliases": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Alias.",
            "in": "path",
            "name": "alias",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "description": "Retrieve an organization by alias.",
        "operationId": "getOrganizationByAlias",
        "summary": "Retrieve an organization by alias."
      }
    },
    "/organizations/{organizationId}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "NO CONTENT"
          },
          "400": {
            "description": "BAD REQUEST"
          },
          "403": {
            "description": "FORBIDDEN"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Delete pending or rejected organization",
        "operationId": "deleteRejectedOrPendingOrganization",
        "summary": "Delete pending or rejected organization"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve an organization by ID. Supports optional authentication.",
        "operationId": "getOrganizationById",
        "summary": "Retrieve an organization by ID."
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Organization to register.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Update an organization. Currently only name, display name, description, topic, email, link, avatarUrl, and location can be updated.",
        "operationId": "updateOrganization",
        "summary": "Update an organization."
      }
    },
    "/organizations/{organizationId}/aliases": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization to modify.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comma-delimited list of aliases.",
            "in": "query",
            "name": "aliases",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created organization alias",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Add aliases linked to a listing in Dockstore. Aliases are alphanumerical (case-insensitive and may contain internal hyphens), given in a comma-delimited list.",
        "operationId": "addOrganizationAliases",
        "summary": "Add aliases linked to a listing in Dockstore."
      }
    },
    "/organizations/{organizationId}/approve": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Approve the organization with the given id. Admin/curator only.",
        "operationId": "approveOrganization",
        "summary": "Approve an organization."
      }
    },
    "/organizations/{organizationId}/collections": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Included fields.",
            "in": "query",
            "name": "include",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Collection"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve all collections for an organization. Supports optional authentication.",
        "operationId": "getCollectionsFromOrganization",
        "summary": "Retrieve all collections for an organization."
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection to register.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Create a collection in the given organization.",
        "operationId": "createCollection",
        "summary": "Create a collection in the given organization."
      }
    },
    "/organizations/{organizationId}/collections/{collectionId}": {
      "delete": {
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection ID.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted the collection"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Collection not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Delete a collection.",
        "operationId": "deleteCollection",
        "summary": "Delete a collection."
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection ID.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve a collection by ID. Supports optional authentication.",
        "operationId": "getCollectionById",
        "summary": "Retrieve a collection by ID."
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection ID.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection to register.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Update a collection. Currently only name, display name, description, and topic can be updated.",
        "operationId": "updateCollection",
        "summary": "Update a collection."
      }
    },
    "/organizations/{organizationId}/collections/{collectionId}/description": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection ID.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve a collection description by organization ID and collection ID. Supports optional authentication.",
        "operationId": "getCollectionDescription",
        "summary": "Retrieve a collection description by organization ID and collection ID."
      },
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection ID.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collections's description in markdown.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Update a collection's description. Description in markdown.",
        "operationId": "updateCollectionDescription",
        "summary": "Update a collection's description."
      }
    },
    "/organizations/{organizationId}/collections/{collectionId}/entry": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection ID.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Entry ID.",
            "format": "int64",
            "in": "query",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version Name.",
            "in": "query",
            "name": "versionName",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Delete an entry to a collection.",
        "operationId": "deleteEntryFromCollection",
        "summary": "Delete an entry to a collection."
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Collection ID.",
            "format": "int64",
            "in": "path",
            "name": "collectionId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Entry ID.",
            "format": "int64",
            "in": "query",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Version ID.",
            "format": "int64",
            "in": "query",
            "name": "versionId",
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Add an entry to a collection.",
        "operationId": "addEntryToCollection",
        "summary": "Add an entry to a collection."
      }
    },
    "/organizations/{organizationId}/description": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve an organization description by organization ID. Supports optional authentication.",
        "operationId": "getOrganizationDescription",
        "summary": "Retrieve an organization description by organization ID."
      },
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Organization's description in markdown.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Update an organization's description. Expects description in markdown format.",
        "operationId": "updateOrganizationDescription",
        "summary": "Update an organization's description."
      }
    },
    "/organizations/{organizationId}/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "default": 0,
            "description": "Start index of paging.  If this exceeds the current result set return an empty set.  If not specified in the request, this will start at the beginning of the results.",
            "format": "int32",
            "in": "query",
            "name": "offset",
            "required": true,
            "type": "integer"
          },
          {
            "default": 100,
            "description": "Amount of records to return in a given page, limited to 100",
            "format": "int32",
            "in": "query",
            "maximum": 100,
            "minimum": 1,
            "name": "limit",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Event"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve all events for an organization. Supports optional authentication.",
        "operationId": "getOrganizationEvents",
        "summary": "Retrieve all events for an organization."
      }
    },
    "/organizations/{organizationId}/invitation": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Accept or reject.",
            "in": "query",
            "name": "accept",
            "required": true,
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Accept or reject an organization invitation. True accepts the invitation, false rejects the invitation.",
        "operationId": "acceptOrRejectInvitation",
        "summary": "Accept or reject an organization invitation."
      }
    },
    "/organizations/{organizationId}/members": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrganizationUser"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve all members for an organization. Supports optional authentication.",
        "operationId": "getOrganizationMembers",
        "summary": "Retrieve all members for an organization."
      }
    },
    "/organizations/{organizationId}/reject": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Reject the organization with the given id. Admin/curator only.",
        "operationId": "rejectOrganization",
        "summary": "Reject an organization."
      }
    },
    "/organizations/{organizationId}/request": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Organization"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Re-request a review of the given organization. Requires the organization to be rejected.",
        "operationId": "requestOrganizationReview",
        "summary": "Re-request an organization review."
      }
    },
    "/organizations/{organizationId}/star": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "StarRequest to star an organization for a user.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StarRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Star an organization.",
        "operationId": "starOrganization",
        "summary": "Star an organization."
      }
    },
    "/organizations/{organizationId}/starredUsers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "tags": [
          "organizations"
        ],
        "description": "Return list of users who starred the given approved organization.",
        "operationId": "getStarredUsersForApprovedOrganization",
        "summary": "Return list of users who starred the given approved organization."
      }
    },
    "/organizations/{organizationId}/user": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID of user to add to organization.",
            "format": "int64",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Remove a user from an organization.",
        "operationId": "deleteUserRole",
        "summary": "Remove a user from an organization."
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role of user.",
            "enum": [
              "ADMIN",
              "MAINTAINER",
              "MEMBER"
            ],
            "in": "query",
            "name": "role",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID of user to add to organization.",
            "format": "int64",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/OrganizationUser"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Update a user role in an organization.",
        "operationId": "updateUserRole",
        "summary": "Update a user role in an organization."
      },
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Role of user.",
            "enum": [
              "ADMIN",
              "MAINTAINER",
              "MEMBER"
            ],
            "in": "query",
            "name": "role",
            "required": true,
            "type": "string"
          },
          {
            "description": "User ID of user to add to organization.",
            "format": "int64",
            "in": "query",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "This is here to appease Swagger. It requires PUT methods to have a body, even if it is empty. Please leave it empty.",
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/OrganizationUser"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Add a user role to an organization.",
        "operationId": "addUserToOrg",
        "summary": "Add a user role to an organization."
      }
    },
    "/organizations/{organizationId}/users/{username}": {
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User to add to org.",
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Organization ID.",
            "format": "int64",
            "in": "path",
            "name": "organizationId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Role of user.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "enum": [
                "MAINTAINER",
                "MEMBER"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/OrganizationUser"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Add a user role to an organization.",
        "operationId": "addUserToOrgByUsername",
        "summary": "Add a user role to an organization."
      }
    },
    "/organizations/{organizationName}/collections/{collectionName}/name": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Organization name.",
            "in": "path",
            "name": "organizationName",
            "required": true,
            "type": "string"
          },
          {
            "description": "Collection name.",
            "in": "path",
            "name": "collectionName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Collection"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "organizations"
        ],
        "description": "Retrieve a collection by name. Supports optional authentication.",
        "operationId": "getCollectionByName",
        "summary": "Retrieve a collection by name."
      }
    },
    "/toolTester/logs": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "TRS Tool Id",
            "in": "query",
            "name": "tool_id",
            "required": true,
            "type": "string",
            "x-example": "#workflow/github.com/dockstore/hello_world"
          },
          {
            "in": "query",
            "name": "tool_version_name",
            "required": true,
            "type": "string",
            "x-example": "v1.0.0"
          },
          {
            "in": "query",
            "name": "test_filename",
            "required": true,
            "type": "string",
            "x-example": "hello_world.cwl.json"
          },
          {
            "in": "query",
            "name": "runner",
            "required": true,
            "type": "string",
            "x-example": "cwltool"
          },
          {
            "enum": [
              "FULL",
              "SUMMARY"
            ],
            "in": "query",
            "name": "log_type",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "filename",
            "required": true,
            "type": "string",
            "x-example": "1554477737092.log"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "tags": [
          "toolTester"
        ],
        "operationId": "getToolTesterLog",
        "summary": "Get ToolTester log file"
      }
    },
    "/toolTester/logs/search": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "TRS Tool Id",
            "in": "query",
            "name": "tool_id",
            "required": true,
            "type": "string",
            "x-example": "#workflow/github.com/dockstore/hello_world"
          },
          {
            "in": "query",
            "name": "tool_version_name",
            "required": true,
            "type": "string",
            "x-example": "v1.0.0"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/ToolTesterLog"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "toolTester"
        ],
        "operationId": "search",
        "summary": "Search for ToolTester log files"
      }
    },
    "/users/checkUser/{username}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean indicating if a user with the specified username exists",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Check if user with some username exists.",
        "operationId": "checkUserExists"
      }
    },
    "/users/dockerRegistries": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the Docker registries accessible to the logged-in user.",
        "operationId": "getUserDockerRegistries"
      }
    },
    "/users/dockerRegistries/{dockerRegistry}/organizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name of Docker registry",
            "in": "path",
            "name": "dockerRegistry",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the organizations/namespaces of the Docker registry accessible to the logged-in user.",
        "operationId": "getDockerRegistriesOrganization"
      }
    },
    "/users/dockerRegistries/{dockerRegistry}/organizations/{organization}/repositories": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Name of Docker registry",
            "in": "path",
            "name": "dockerRegistry",
            "required": true,
            "type": "string"
          },
          {
            "description": "Name of organization or namespace",
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get names of repositories associated with a specific namespace and Docker registry of the logged-in user.",
        "operationId": "getDockerRegistryOrganizationRepositories"
      }
    },
    "/users/emails": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of Dockstore users' emails.",
            "schema": {
              "items": {
                "$ref": "#/definitions/UserInfo"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Admin-only endpoint. Get the emails of all Dockstore users",
        "operationId": "getAllUserEmails"
      }
    },
    "/users/github/events": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 100,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": "",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "default": "dbCreateDate",
            "in": "query",
            "name": "sortCol",
            "type": "string"
          },
          {
            "default": "desc",
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of GitHub Events for the logged in user",
            "schema": {
              "items": {
                "$ref": "#/definitions/LambdaEvent"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the GitHub Events for the logged in user.",
        "operationId": "getUserGitHubEvents"
      }
    },
    "/users/github/sync": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully synced Dockstore account with GitHub App installations",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Syncs Dockstore account with GitHub App Installations.",
        "operationId": "syncUserWithGitHub"
      }
    },
    "/users/registries": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of the git registries accessible to the logged in user",
            "schema": {
              "items": {
                "enum": [
                  "dockstore.org",
                  "github.com",
                  "bitbucket.org",
                  "gitlab.com"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the git registries accessible to the logged in user.",
        "operationId": "getUserRegistries"
      }
    },
    "/users/registries/{gitRegistry}/organizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Git registry",
            "enum": [
              "dockstore.org",
              "github.com",
              "bitbucket.org",
              "gitlab.com"
            ],
            "in": "path",
            "name": "gitRegistry",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of organizations for a given git registry accessible to the logged in user",
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the organizations for a given git registry accessible to the logged in user.",
        "operationId": "getUserOrganizations"
      }
    },
    "/users/registries/{gitRegistry}/organizations/{organization}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Git registry",
            "enum": [
              "dockstore.org",
              "github.com",
              "bitbucket.org",
              "gitlab.com"
            ],
            "in": "path",
            "name": "gitRegistry",
            "required": true,
            "type": "string"
          },
          {
            "description": "Git organization",
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of repositories for an organization for a given git registry accessible to the logged in user",
            "schema": {
              "items": {
                "$ref": "#/definitions/Repository"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the repositories for an organization for a given git registry accessible to the logged in user.",
        "operationId": "getUserOrganizationRepositories"
      }
    },
    "/users/starredNotebooks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of the authenticated user's starred notebooks",
            "schema": {
              "items": {
                "$ref": "#/definitions/Entry"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get the authenticated user's starred notebooks.",
        "operationId": "getStarredNotebooks"
      }
    },
    "/users/starredOrganizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of the authenticated user's starred organizations",
            "schema": {
              "items": {
                "$ref": "#/definitions/Organization"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get the authenticated user's starred organizations.",
        "operationId": "getStarredOrganizations"
      }
    },
    "/users/starredServices": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of the authenticated user's starred services",
            "schema": {
              "items": {
                "$ref": "#/definitions/Entry"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get the authenticated user's starred services.",
        "operationId": "getStarredServices"
      }
    },
    "/users/starredTools": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of the authenticated user's starred tools",
            "schema": {
              "items": {
                "$ref": "#/definitions/Entry"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get the authenticated user's starred tools.",
        "operationId": "getStarredTools"
      }
    },
    "/users/starredWorkflows": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A list of the authenticated user's starred workflows",
            "schema": {
              "items": {
                "$ref": "#/definitions/Entry"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get the authenticated user's starred workflows.",
        "operationId": "getStarredWorkflows"
      }
    },
    "/users/updateUserMetadata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully updated metadata of all users",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Update metadata of all users.",
        "operationId": "updateUserMetadata"
      }
    },
    "/users/updateUserWorkflows": {
      "post": {
        "parameters": [],
        "responses": {
          "204": {
            "description": "Successfully updated workflow ownership for all users"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Check workflow ownership",
        "operationId": "checkWorkflowOwnership"
      }
    },
    "/users/user": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Optional user id if deleting another user. Only admins can delete another user.",
            "format": "int64",
            "in": "query",
            "name": "userId",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Boolean indicating if user was deleted successfully",
            "schema": {
              "type": "boolean"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Delete user if possible.",
        "operationId": "selfDestruct"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The logged-in user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get the logged-in user.",
        "operationId": "getUser"
      }
    },
    "/users/user/changeUsername": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully changed username",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Change username if possible.",
        "operationId": "changeUsername"
      }
    },
    "/users/user/extended": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Additional information about the authenticated user",
            "schema": {
              "$ref": "#/definitions/ExtendedUserData"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get additional information about the authenticated user.",
        "operationId": "getExtendedUserData"
      }
    },
    "/users/user/memberships": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "A set of the logged-in user's memberships",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrganizationUser"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get the logged-in user's memberships.",
        "operationId": "getUserMemberships"
      }
    },
    "/users/user/updateAcceptedDocuments": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "User with updated TOS/Privacy Policy",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Update the user's TOS and privacy policy to the latest versions.",
        "operationId": "updateAcceptedDocuments"
      }
    },
    "/users/user/updateUserMetadata": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "enum": [
              "quay.io",
              "github.com",
              "dockstore",
              "bitbucket.org",
              "gitlab.com",
              "zenodo.org",
              "google.com",
              "orcid.org"
            ],
            "in": "query",
            "name": "source",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated metadata for logged in user",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "403": {
            "description": "Forbidden"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Update metadata for logged in user.",
        "operationId": "updateLoggedInUserMetadata"
      }
    },
    "/users/user/{userId}/bannedStatus": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully banned/unbanned user"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Update banned status of user. Removes all tokens for banned users.",
        "operationId": "banUser"
      }
    },
    "/users/user/{userId}/limits": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A user's limits",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Returns the specified user's limits. ADMIN or CURATOR only",
        "operationId": "getUserLimits"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated the user's limits",
            "schema": {
              "$ref": "#/definitions/Limits"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Update the specified user's limits. ADMIN or CURATOR only",
        "operationId": "setUserLimits"
      }
    },
    "/users/username/{username}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comma-delimited list of fields to include: userProfiles, ...",
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A user with the specified username",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User not found"
          }
        },
        "tags": [
          "users"
        ],
        "description": "Get a user by username.",
        "operationId": "listUser"
      }
    },
    "/users/users/entries": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Maximum number of entries to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Filter paths with matching text",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "description": "Type of entry",
            "enum": [
              "TOOLS",
              "WORKFLOWS",
              "SERVICES",
              "NOTEBOOKS"
            ],
            "in": "query",
            "name": "type",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the entries for a user",
            "schema": {
              "items": {
                "$ref": "#/definitions/EntryUpdateTime"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the entries for a user, sorted by most recently updated.",
        "operationId": "getUserEntries"
      }
    },
    "/users/users/organizations": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Maximum number of organizations to return",
            "format": "int32",
            "in": "query",
            "name": "count",
            "type": "integer"
          },
          {
            "description": "Filter paths with matching text",
            "in": "query",
            "name": "filter",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the Dockstore organizations for a user",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrganizationUpdateTime"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all of the Dockstore organizations for a user, sorted by most recently updated.",
        "operationId": "getUserDockstoreOrganizations"
      }
    },
    "/users/{userId}/appTools": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of GitHub App tools owned by the user",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "List all appTools owned by the authenticated user.",
        "operationId": "userAppTools"
      }
    },
    "/users/{userId}/cloudInstances": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ID of user to get cloud instances for",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/CloudInstance"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get all cloud instances belonging to the user",
        "operationId": "getUserCloudInstances"
      },
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ID of user to create the cloud instance for",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Cloud instance to add to the user",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudInstance"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Create a new cloud instance belonging to the user",
        "operationId": "postUserCloudInstance"
      }
    },
    "/users/{userId}/cloudInstances/{cloudInstanceId}": {
      "delete": {
        "parameters": [
          {
            "description": "ID of user to delete the cloud instance for",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of cloud instance to update/delete",
            "format": "int64",
            "in": "path",
            "name": "cloudInstanceId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Delete a cloud instance belonging to the user",
        "operationId": "deleteUserCloudInstance"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "ID of user to update the cloud instance for",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "ID of cloud instance to update/delete",
            "format": "int64",
            "in": "path",
            "name": "cloudInstanceId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Cloud instance to replace for a user",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CloudInstance"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Update a cloud instance belonging to the user",
        "operationId": "putUserCloudInstance"
      }
    },
    "/users/{userId}/containers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tools owned by the user",
            "schema": {
              "items": {
                "$ref": "#/definitions/DockstoreTool"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "List all tools owned by the authenticated user.",
        "operationId": "userContainers"
      }
    },
    "/users/{userId}/containers/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of published tools from a user",
            "schema": {
              "items": {
                "$ref": "#/definitions/DockstoreTool"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "List all published tools from a user.",
        "operationId": "userPublishedContainers"
      }
    },
    "/users/{userId}/containers/{organization}/refresh": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "dockerRegistry",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tools owned by the user with the specified organization",
            "schema": {
              "items": {
                "$ref": "#/definitions/DockstoreTool"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Refresh all tools owned by the authenticated user with specified organization.",
        "operationId": "refreshToolsByOrganization"
      }
    },
    "/users/{userId}/notebooks": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of notebooks owned by the user",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "List all notebooks owned by the authenticated user.",
        "operationId": "userNotebooks"
      }
    },
    "/users/{userId}/privileges": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PrivilegeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated user to admin or curator status",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Updates the provided userID to admin or curator status, usable by ADMINs only",
        "operationId": "setUserPrivileges"
      }
    },
    "/users/{userId}/services": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of services owned by the user",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "List all services owned by the authenticated user.",
        "operationId": "userServices"
      }
    },
    "/users/{userId}/tokens": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of tokens belonging to user specified by userId",
            "schema": {
              "items": {
                "$ref": "#/definitions/Token_User"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Get information about tokens with user id.",
        "operationId": "getUserTokens"
      }
    },
    "/users/{userId}/workflows": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User ID",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of workflows owned by the user",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "List all workflows owned by the authenticated user.",
        "operationId": "userWorkflows"
      },
      "patch": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "User to update",
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "This is here to appease Swagger. It requires PATCH methods to have a body, even if it is empty. Please leave it empty.",
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully added user to Dockstore workflows that they should have access to",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "Adds the logged-in user to any Dockstore workflows that they should have access to.",
        "operationId": "addUserToDockstoreWorkflows"
      }
    },
    "/users/{userId}/workflows/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of published workflows from a user",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "users"
        ],
        "description": "List all published workflows from a user.",
        "operationId": "userPublishedWorkflows"
      }
    },
    "/workflows/github": {
      "delete": {
        "parameters": [
          {
            "description": "Repository path (ex. dockstore/dockstore-ui2)",
            "in": "query",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "description": "Username of user on GitHub who triggered action",
            "in": "query",
            "name": "username",
            "required": true,
            "type": "string"
          },
          {
            "description": "Full git reference for a GitHub branch/tag. Ex. refs/heads/master or refs/tags/v1.0",
            "in": "query",
            "name": "gitReference",
            "required": true,
            "type": "string"
          },
          {
            "description": "GitHub App installation ID",
            "format": "int64",
            "in": "query",
            "name": "installationId",
            "type": "integer"
          },
          {
            "description": "A GUID to identify the GitHub webhook delivery",
            "in": "header",
            "name": "X-GitHub-Delivery",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "418": {
            "description": "This code tells AWS Lambda not to retry."
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Handles the deletion of a branch on GitHub. Will delete all workflow versions that match in all workflows that share the same repository.",
        "operationId": "handleGitHubBranchDeletion"
      }
    },
    "/workflows/github/install": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A GUID to identify the GitHub webhook delivery",
            "in": "header",
            "name": "X-GitHub-Delivery",
            "required": true,
            "type": "string"
          },
          {
            "description": "GitHub App repository installation event payload",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InstallationRepositoriesPayload"
            }
          }
        ],
        "responses": {
          "418": {
            "description": "This code tells AWS Lambda not to retry."
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Handle the installation of our GitHub app onto a repository or organization.",
        "operationId": "handleGitHubInstallation"
      }
    },
    "/workflows/github/release": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "A GUID to identify the GitHub webhook delivery",
            "in": "header",
            "name": "X-GitHub-Delivery",
            "required": true,
            "type": "string"
          },
          {
            "description": "GitHub push event payload",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PushPayload"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Handle a release of a repository on GitHub. Will create a workflow/service and version when necessary.",
        "operationId": "handleGitHubRelease"
      }
    },
    "/workflows/hostedEntry": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "registry",
            "type": "string"
          },
          {
            "in": "query",
            "name": "name",
            "type": "string"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          },
          {
            "in": "query",
            "name": "namespace",
            "type": "string"
          },
          {
            "in": "query",
            "name": "entryName",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created a hosted workflow.",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "hosted"
        ],
        "description": "Create a hosted workflow.",
        "operationId": "createHostedWorkflow"
      }
    },
    "/workflows/hostedEntry/{entryId}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "version",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted hosted entry version",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "hosted"
        ],
        "description": "Delete a revision of a hosted workflow.",
        "operationId": "deleteHostedWorkflowVersion"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Entry to modify",
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Set of updated source files, add files by adding new files with unknown paths, delete files by including them with null content",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "hosted"
        ],
        "description": "Non-idempotent operation for creating new revisions of hosted workflows",
        "operationId": "editHostedWorkflow"
      },
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "hosted entry ID",
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "binary",
            "in": "formData",
            "name": "file",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "hosted"
        ],
        "deprecated": true,
        "operationId": "addZip",
        "summary": "Creates a new revision of a hosted workflow from a zip"
      }
    },
    "/workflows/manualRegister": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "workflowRegistry",
            "type": "string"
          },
          {
            "in": "query",
            "name": "workflowPath",
            "type": "string"
          },
          {
            "in": "query",
            "name": "defaultWorkflowPath",
            "type": "string"
          },
          {
            "in": "query",
            "name": "workflowName",
            "type": "string"
          },
          {
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          },
          {
            "in": "query",
            "name": "defaultTestParameterFilePath",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Manually register a workflow.",
        "operationId": "manualRegister"
      }
    },
    "/workflows/organization/{organization}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "description": "List all published workflows of an organization.",
        "operationId": "getPublishedWorkflowsByOrganization"
      }
    },
    "/workflows/path/entry/{repository}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Requires full path (including entry name if applicable).",
        "operationId": "getEntryByPath",
        "summary": "Get an entry by path."
      }
    },
    "/workflows/path/entry/{repository}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "description": "Requires full path (including entry name if applicable).",
        "operationId": "getPublishedEntryByPath",
        "summary": "Get a published entry by path."
      }
    },
    "/workflows/path/workflow/{repository}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Repository path",
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comma-delimited list of fields to include: versions, orcidputcodes, validations, aliases, images, authors, metrics",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Which Workflow subclass to retrieve.",
            "enum": [
              "BIOWORKFLOW",
              "SERVICE",
              "APPTOOL",
              "NOTEBOOK"
            ],
            "in": "query",
            "name": "subclass",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Requires full path (including workflow name if applicable).",
        "operationId": "getWorkflowByPath",
        "summary": "Get a workflow by path."
      }
    },
    "/workflows/path/workflow/{repository}/actions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which Workflow subclass to retrieve actions for.",
            "enum": [
              "BIOWORKFLOW",
              "SERVICE",
              "APPTOOL",
              "NOTEBOOK"
            ],
            "in": "query",
            "name": "subclass",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "enum": [
                  "write",
                  "read",
                  "delete",
                  "share"
                ],
                "type": "string"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Gets all actions a user can perform on a workflow.",
        "operationId": "getWorkflowActions"
      }
    },
    "/workflows/path/workflow/{repository}/permissions": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "type": "string"
          },
          {
            "enum": [
              "OWNER",
              "WRITER",
              "READER"
            ],
            "in": "query",
            "name": "role",
            "type": "string"
          },
          {
            "description": "Which Workflow subclass to remove a role from.",
            "enum": [
              "BIOWORKFLOW",
              "SERVICE",
              "APPTOOL",
              "NOTEBOOK"
            ],
            "in": "query",
            "name": "subclass",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Permission"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Remove the specified user role for a workflow.",
        "operationId": "removeWorkflowRole"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which Workflow subclass to retrieve permissions for.",
            "enum": [
              "BIOWORKFLOW",
              "SERVICE",
              "APPTOOL",
              "NOTEBOOK"
            ],
            "in": "query",
            "name": "subclass",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Permission"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get all permissions for a workflow.",
        "operationId": "getWorkflowPermissions"
      },
      "patch": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "description": "Which Workflow subclass to add a permission to.",
            "enum": [
              "BIOWORKFLOW",
              "SERVICE",
              "APPTOOL",
              "NOTEBOOK"
            ],
            "in": "query",
            "name": "subclass",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Permission"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Permission"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Set the specified permission for a user on a workflow.",
        "operationId": "addWorkflowPermission"
      }
    },
    "/workflows/path/workflow/{repository}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Repository path",
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          },
          {
            "description": "Comma-delimited list of fields to include: versions, orcidputcodes, validations, aliases, images, authors, metrics",
            "in": "query",
            "name": "include",
            "type": "string"
          },
          {
            "description": "Which Workflow subclass to retrieve.",
            "enum": [
              "BIOWORKFLOW",
              "SERVICE",
              "APPTOOL",
              "NOTEBOOK"
            ],
            "in": "query",
            "name": "subclass",
            "required": true,
            "type": "string"
          },
          {
            "description": "Version name",
            "in": "query",
            "name": "versionName",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "description": "Does not require workflow name.",
        "operationId": "getPublishedWorkflowByPath",
        "summary": "Get a published workflow by path"
      }
    },
    "/workflows/path/{repository}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Do not include workflow name.",
        "operationId": "getAllWorkflowByPath",
        "summary": "Get a list of workflows by path."
      }
    },
    "/workflows/path/{repository}/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "repository path",
            "in": "path",
            "name": "repository",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Do not include workflow name.",
        "operationId": "getAllPublishedWorkflowByPath",
        "summary": "Get a list of published workflows by path."
      }
    },
    "/workflows/published": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "default": 0,
            "format": "int32",
            "in": "query",
            "name": "offset",
            "type": "integer"
          },
          {
            "default": 100,
            "format": "int32",
            "in": "query",
            "name": "limit",
            "type": "integer"
          },
          {
            "default": "",
            "in": "query",
            "name": "filter",
            "type": "string"
          },
          {
            "default": "stars",
            "in": "query",
            "name": "sortCol",
            "type": "string"
          },
          {
            "default": "desc",
            "in": "query",
            "name": "sortOrder",
            "type": "string"
          },
          {
            "default": false,
            "in": "query",
            "name": "services",
            "type": "boolean"
          },
          {
            "enum": [
              "BIOWORKFLOW",
              "SERVICE",
              "APPTOOL",
              "NOTEBOOK"
            ],
            "in": "query",
            "name": "subclass",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/Workflow"
              },
              "type": "array"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "description": "List all published workflows.",
        "operationId": "allPublishedWorkflows"
      }
    },
    "/workflows/published/{workflowId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comma-delimited list of fields to include: versions, orcidputcodes, validations, aliases, images, authors, metrics",
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "description": "Get a published workflow.",
        "operationId": "getPublishedWorkflow"
      }
    },
    "/workflows/registries/{gitRegistry}/organizations/{organization}/repositories/{repositoryName}": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Git registry",
            "enum": [
              "github.com",
              "bitbucket.org",
              "gitlab.com"
            ],
            "in": "path",
            "name": "gitRegistry",
            "required": true,
            "type": "string"
          },
          {
            "description": "Git repository organization",
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          },
          {
            "description": "Git repository name",
            "in": "path",
            "name": "repositoryName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Delete a stubbed workflow for a registry and repository path.",
        "operationId": "deleteWorkflow"
      },
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Git registry",
            "enum": [
              "dockstore.org",
              "github.com",
              "bitbucket.org",
              "gitlab.com"
            ],
            "in": "path",
            "name": "gitRegistry",
            "required": true,
            "type": "string"
          },
          {
            "description": "Git repository organization",
            "in": "path",
            "name": "organization",
            "required": true,
            "type": "string"
          },
          {
            "description": "Git repository name",
            "in": "path",
            "name": "repositoryName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/BioWorkflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Adds a workflow for a registry and repository path with defaults set.",
        "operationId": "addWorkflow"
      }
    },
    "/workflows/shared": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SharedWorkflows"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Retrieve all workflows shared with user.",
        "operationId": "sharedWorkflows"
      }
    },
    "/workflows/versions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "query",
            "name": "workflowId",
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkflowVersion"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "List the versions for a published workflow.",
        "operationId": "tags_1"
      }
    },
    "/workflows/{entryId}/registerCheckerWorkflow/{descriptorType}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "checkerWorkflowPath",
            "type": "string"
          },
          {
            "in": "query",
            "name": "testParameterPath",
            "type": "string"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "entryId",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "path",
            "name": "descriptorType",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Entry"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Register a checker workflow and associates it with the given tool/workflow.",
        "operationId": "registerCheckerWorkflow"
      }
    },
    "/workflows/{workflowId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comma-delimited list of fields to include: versions, orcidputcodes, validations, aliases, images, authors, metrics",
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Retrieve a workflow",
        "operationId": "getWorkflow"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Update the workflow with the given workflow.",
        "operationId": "updateWorkflow"
      }
    },
    "/workflows/{workflowId}/dag/{workflowVersionId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get the DAG for a given workflow version.",
        "operationId": "getWorkflowDag"
      }
    },
    "/workflows/{workflowId}/defaultVersion": {
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Update the default version of a workflow.",
        "operationId": "updateDefaultVersion_1"
      }
    },
    "/workflows/{workflowId}/descriptor/{relative-path}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          },
          {
            "in": "path",
            "name": "relative-path",
            "required": true,
            "type": "string"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/SourceFile"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get the corresponding descriptor file from source control.",
        "operationId": "secondaryDescriptorPath_1"
      }
    },
    "/workflows/{workflowId}/descriptorType": {
      "post": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "query",
            "name": "descriptorType",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Use with caution. This deletes all the workflowVersions, only use if there's nothing worth keeping in the workflow.",
        "operationId": "updateDescriptorType",
        "summary": "Changes the descriptor type of an unpublished, invalid workflow."
      }
    },
    "/workflows/{workflowId}/labels": {
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "labels",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Update the labels linked to a workflow.",
        "operationId": "updateLabels_1"
      }
    },
    "/workflows/{workflowId}/primaryDescriptor": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          },
          {
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/SourceFile"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get the primary descriptor file.",
        "operationId": "primaryDescriptor_1"
      }
    },
    "/workflows/{workflowId}/publish": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/PublishRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Publish or unpublish a workflow.",
        "operationId": "publish_1"
      }
    },
    "/workflows/{workflowId}/refresh": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "default": true,
            "in": "query",
            "name": "hardRefresh",
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Refresh one particular workflow.",
        "operationId": "refresh_1"
      }
    },
    "/workflows/{workflowId}/refresh/{version}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "path",
            "name": "version",
            "required": true,
            "type": "string"
          },
          {
            "default": true,
            "in": "query",
            "name": "hardRefresh",
            "type": "boolean"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Refresh one particular workflow version.",
        "operationId": "refreshVersion"
      }
    },
    "/workflows/{workflowId}/requestDOI/{workflowVersionId}": {
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkflowVersion"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Request a DOI for this version of a workflow.",
        "operationId": "requestDOIForWorkflowVersion"
      }
    },
    "/workflows/{workflowId}/resetVersionPaths": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Reset the workflow paths.",
        "operationId": "updateWorkflowPath"
      }
    },
    "/workflows/{workflowId}/restub": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "$ref": "#/definitions/Workflow"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Restub a workflow",
        "operationId": "restub",
        "summary": "Restub a workflow"
      }
    },
    "/workflows/{workflowId}/secondaryDescriptors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "tag",
            "type": "string"
          },
          {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "gxformat2",
              "SWL",
              "NFL",
              "service",
              "jupyter"
            ],
            "in": "query",
            "name": "language",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get the corresponding descriptor documents from source control.",
        "operationId": "secondaryDescriptors_1"
      }
    },
    "/workflows/{workflowId}/star": {
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/StarRequest"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Star a workflow.",
        "operationId": "starEntry_1"
      }
    },
    "/workflows/{workflowId}/starredUsers": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "tags": [
          "workflows"
        ],
        "description": "Returns list of users who starred the given workflow.",
        "operationId": "getStarredUsers_1"
      }
    },
    "/workflows/{workflowId}/testParameterFiles": {
      "delete": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "testParameterPaths",
            "type": "array"
          },
          {
            "in": "query",
            "name": "version",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Delete test parameter files for a given version.",
        "operationId": "deleteTestParameterFiles_1"
      },
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "query",
            "name": "version",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get the corresponding test parameter files.",
        "operationId": "getTestParameterFiles_1"
      },
      "put": {
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "testParameterPaths",
            "type": "array"
          },
          {
            "in": "query",
            "name": "version",
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Add test parameter files for a given version.",
        "operationId": "addTestParameterFiles_1"
      }
    },
    "/workflows/{workflowId}/tools/{workflowVersionId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "type": "string"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get the Tools for a given workflow version.",
        "operationId": "getTableToolContent"
      }
    },
    "/workflows/{workflowId}/users": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/User"
              },
              "type": "array"
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Get users of a workflow.",
        "operationId": "getUsers_1"
      }
    },
    "/workflows/{workflowId}/workflowVersions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of the worflow",
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Get list workflow versions in a workflow",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkflowVersion"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Return first 200 versions in an entry",
        "operationId": "getWorkflowVersions"
      },
      "put": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkflowVersion"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/WorkflowVersion"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Update the workflow versions linked to a workflow.",
        "operationId": "updateWorkflowVersion"
      }
    },
    "/workflows/{workflowId}/workflowVersions/{workflowVersionId}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of the workflow",
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "id of the workflow version",
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Comma-delimited list of fields to include: validations, aliases, images, authors, metrics",
            "in": "query",
            "name": "include",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Get a workflow version by ID",
            "schema": {
              "$ref": "#/definitions/WorkflowVersion"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Retrieve a workflow version by ID",
        "operationId": "getWorkflowVersionById"
      }
    },
    "/workflows/{workflowId}/workflowVersions/{workflowVersionId}/description": {
      "get": {
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "description": "id of the workflow",
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "id of the workflow version",
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a workflow version's description",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Retrieve a workflow version's description",
        "operationId": "getWorkflowVersionDescription"
      }
    },
    "/workflows/{workflowId}/workflowVersions/{workflowVersionId}/orcidAuthors": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "id of the workflow",
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "id of the workflow version",
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve ORCID author information for a workflow version",
            "schema": {
              "items": {
                "$ref": "#/definitions/OrcidAuthorInformation"
              },
              "type": "array"
            }
          },
          "400": {
            "description": "Bad Request"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Retrieve ORCID author information for a workflow version",
        "operationId": "getWorkflowVersionOrcidAuthors"
      }
    },
    "/workflows/{workflowId}/workflowVersions/{workflowVersionId}/parsedInformation": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workflow to retrieve the version from.",
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Workflow version to retrieve the version from.",
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          },
          {
            "in": "formData",
            "name": "clonedRepositoryAbsolutePath",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "versionTypeValidation",
            "type": "object"
          },
          {
            "collectionFormat": "csv",
            "in": "formData",
            "items": {
              "type": "string"
            },
            "name": "secondaryFilePaths",
            "type": "array"
          },
          {
            "description": "Request sent to the external language parsing service",
            "in": "formData",
            "name": "languageParsingRequest",
            "type": "object"
          },
          {
            "description": "Author found from parsing the version (may possibly be different from what will be stored in Dockstore)",
            "in": "formData",
            "name": "author",
            "type": "string"
          },
          {
            "description": "Email found from parsing the version (may possibly be different from what will be stored in Dockstore)",
            "in": "formData",
            "name": "email",
            "type": "string"
          },
          {
            "description": "Description found from parsing the version (may possibly be different from what will be stored in Dockstore)",
            "in": "formData",
            "name": "description",
            "type": "string"
          },
          {
            "in": "formData",
            "name": "parsedInformation",
            "type": "object"
          },
          {
            "collectionFormat": "csv",
            "description": "List of SourceFiles returned after parsing a non-hosted entry",
            "in": "formData",
            "items": {
              "$ref": "#/definitions/SourceFile"
            },
            "name": "sourceFiles",
            "type": "array"
          },
          {
            "description": "ORCID ID found from parsing the version (may possibly be different from what will be stored in Dockstore)",
            "in": "formData",
            "name": "orcidID",
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Language parser calls this endpoint to update parsed information for this version",
        "operationId": "postParsedInformation"
      }
    },
    "/workflows/{workflowId}/workflowVersions/{workflowVersionId}/sourcefiles": {
      "get": {
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Workflow to retrieve the version from.",
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "description": "Workflow version to retrieve the version from.",
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          },
          {
            "collectionFormat": "multi",
            "description": "List of file types to filter sourcefiles by",
            "in": "query",
            "items": {
              "enum": [
                "DOCKSTORE_SMK",
                "SMK_TEST_PARAMS",
                "DOCKSTORE_CWL",
                "CWL_TEST_JSON",
                "DOCKSTORE_WDL",
                "WDL_TEST_JSON",
                "DOCKERFILE",
                "NEXTFLOW",
                "NEXTFLOW_CONFIG",
                "NEXTFLOW_TEST_PARAMS",
                "DOCKSTORE_YML",
                "DOCKSTORE_SERVICE_YML",
                "DOCKSTORE_SERVICE_TEST_JSON",
                "DOCKSTORE_SERVICE_OTHER",
                "DOCKSTORE_GXFORMAT2",
                "GXFORMAT2_TEST_FILE",
                "DOCKSTORE_SWL",
                "SWL_TEST_JSON",
                "DOCKSTORE_JUPYTER",
                "DOCKSTORE_NOTEBOOK_REES",
                "DOCKSTORE_NOTEBOOK_DEVCONTAINER",
                "DOCKSTORE_NOTEBOOK_TEST_FILE",
                "DOCKSTORE_NOTEBOOK_OTHER"
              ],
              "type": "string"
            },
            "name": "fileTypes",
            "type": "array"
          }
        ],
        "responses": {
          "default": {
            "description": "default response",
            "schema": {
              "items": {
                "$ref": "#/definitions/SourceFile"
              },
              "type": "array",
              "uniqueItems": true
            }
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Retrieve sourcefiles for an entry's version",
        "operationId": "getWorkflowVersionsSourcefiles"
      }
    },
    "/workflows/{workflowId}/zip/{workflowVersionId}": {
      "get": {
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "format": "int64",
            "in": "path",
            "name": "workflowId",
            "required": true,
            "type": "integer"
          },
          {
            "format": "int64",
            "in": "path",
            "name": "workflowVersionId",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "default": {
            "description": "default response"
          }
        },
        "security": [
          {
            "BEARER": []
          }
        ],
        "tags": [
          "workflows"
        ],
        "description": "Download a ZIP file of a workflow and all associated files.",
        "operationId": "getWorkflowZip"
      }
    }
  },
  "definitions": {
    "AggregatedExecution": {
      "allOf": [
        {
          "$ref": "#/definitions/Metrics"
        },
        {
          "properties": {
            "additionalAggregatedMetrics": {
              "additionalProperties": {
                "description": "Additional aggregated metrics",
                "type": "object"
              },
              "description": "Additional aggregated metrics",
              "type": "object"
            },
            "executionId": {
              "description": "User-provided ID of the execution. Must be unique and not used for previous executions. This ID is used to identify the execution when updating the execution",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Aggregated metrics of multiple executions on a platform",
      "required": [
        "executionId",
        "executionStatusCount"
      ],
      "type": "object",
      "x-deprecated": true
    },
    "Alias": {
      "properties": {
        "content": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "AppTool": {
      "allOf": [
        {
          "$ref": "#/definitions/Workflow"
        }
      ],
      "description": "This describes one app tool in dockstore as a special degenerate case of a workflow",
      "type": "object"
    },
    "Author": {
      "properties": {
        "affiliation": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "BioWorkflow": {
      "allOf": [
        {
          "$ref": "#/definitions/Workflow"
        },
        {
          "properties": {
            "parent_id": {
              "format": "int64",
              "type": "integer"
            }
          },
          "type": "object"
        }
      ],
      "description": "This describes one workflow in the dockstore",
      "type": "object"
    },
    "CLIInfo": {
      "properties": {
        "cliLatestDockstoreScriptDownloadUrl": {
          "type": "string"
        },
        "cliLatestUnstableDockstoreScriptDownloadUrl": {
          "type": "string"
        },
        "cliLatestUnstableVersion": {
          "type": "string"
        },
        "cliLatestVersion": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Category": {
      "description": "Category of entries",
      "properties": {
        "aliases": {
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          },
          "type": "object"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "displayName": {
          "maxLength": 50,
          "minLength": 3,
          "pattern": "[\\w ,_\\-&()']*",
          "type": "string"
        },
        "entries": {
          "items": {
            "$ref": "#/definitions/CollectionEntry"
          },
          "type": "array"
        },
        "id": {
          "description": "Implementation specific ID for the collection in this web service",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Name of the collection",
          "example": "alignment",
          "maxLength": 39,
          "minLength": 3,
          "pattern": "[a-zA-Z](-?[a-zA-Z\\d]){0,38}",
          "type": "string"
        },
        "notebooksLength": {
          "description": "Number of notebooks inside this collection",
          "format": "int64",
          "type": "integer"
        },
        "organizationID": {
          "format": "int64",
          "type": "integer"
        },
        "organizationName": {
          "type": "string"
        },
        "servicesLength": {
          "description": "Number of services inside this collection",
          "format": "int64",
          "type": "integer"
        },
        "toolsLength": {
          "description": "Number of tools inside this collection",
          "format": "int64",
          "type": "integer"
        },
        "topic": {
          "description": "Short description of the collection",
          "example": "A collection of alignment algorithms",
          "type": "string"
        },
        "workflowsLength": {
          "description": "Number of workflows inside this collection",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "topic"
      ],
      "type": "object"
    },
    "CategorySummary": {
      "properties": {
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        },
        "topic": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Checksum": {
      "description": "A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes. ",
      "example": [
        {
          "checksum": "ea2a5db69bd20a42976838790bc29294df3af02b",
          "type": "sha1"
        }
      ],
      "properties": {
        "checksum": {
          "description": "The hex-string encoded checksum for the data. ",
          "type": "string"
        },
        "type": {
          "description": "The digest method used to create the checksum. The value (e.g. `sha-256`) SHOULD be listed as `Hash Name String` in the https://github.com/ga4gh-discovery/ga4gh-checksum/blob/master/hash-alg.csv[GA4GH Checksum Hash Algorithm Registry]. Other values MAY be used, as long as implementors are aware of the issues discussed in https://tools.ietf.org/html/rfc6920#section-9.4[RFC6920]. GA4GH may provide more explicit guidance for use of non-IANA-registered algorithms in the future.",
          "type": "string"
        }
      },
      "required": [
        "checksum",
        "type"
      ],
      "type": "object"
    },
    "CloudInstance": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "partner": {
          "enum": [
            "GALAXY",
            "TERRA",
            "DNA_STACK",
            "DNA_NEXUS",
            "CGC",
            "NHLBI_BIODATA_CATALYST",
            "ANVIL",
            "CAVATICA",
            "NEXTFLOW_TOWER",
            "ELWAZI",
            "AGC",
            "OTHER",
            "ALL"
          ],
          "type": "string"
        },
        "supportedLanguages": {
          "items": {
            "$ref": "#/definitions/Language"
          },
          "type": "array",
          "uniqueItems": true
        },
        "supportsFileImports": {
          "type": "boolean"
        },
        "supportsHttpImports": {
          "type": "boolean"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Collection": {
      "description": "Collection in an organization, collects entries",
      "properties": {
        "aliases": {
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          },
          "type": "object"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "displayName": {
          "maxLength": 50,
          "minLength": 3,
          "pattern": "[\\w ,_\\-&()']*",
          "type": "string"
        },
        "entries": {
          "items": {
            "$ref": "#/definitions/CollectionEntry"
          },
          "type": "array"
        },
        "id": {
          "description": "Implementation specific ID for the collection in this web service",
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "description": "Name of the collection",
          "example": "alignment",
          "maxLength": 39,
          "minLength": 3,
          "pattern": "[a-zA-Z](-?[a-zA-Z\\d]){0,38}",
          "type": "string"
        },
        "notebooksLength": {
          "description": "Number of notebooks inside this collection",
          "format": "int64",
          "type": "integer"
        },
        "organizationID": {
          "format": "int64",
          "type": "integer"
        },
        "organizationName": {
          "type": "string"
        },
        "servicesLength": {
          "description": "Number of services inside this collection",
          "format": "int64",
          "type": "integer"
        },
        "toolsLength": {
          "description": "Number of tools inside this collection",
          "format": "int64",
          "type": "integer"
        },
        "topic": {
          "description": "Short description of the collection",
          "example": "A collection of alignment algorithms",
          "type": "string"
        },
        "workflowsLength": {
          "description": "Number of workflows inside this collection",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "name",
        "topic"
      ],
      "type": "object"
    },
    "CollectionEntry": {
      "properties": {
        "categories": {
          "items": {
            "$ref": "#/definitions/CategorySummary"
          },
          "type": "array"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "descriptorTypes": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "entryPath": {
          "type": "string"
        },
        "entryType": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verified": {
          "type": "boolean"
        },
        "versionName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "CollectionOrganization": {
      "properties": {
        "collectionDisplayName": {
          "type": "string"
        },
        "collectionId": {
          "format": "int64",
          "type": "integer"
        },
        "collectionName": {
          "type": "string"
        },
        "organizationAvatarUrl": {
          "type": "string"
        },
        "organizationDisplayName": {
          "type": "string"
        },
        "organizationId": {
          "format": "int64",
          "type": "integer"
        },
        "organizationName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Config": {
      "properties": {
        "bdCatalystSevenBridgesImportUrl": {
          "type": "string"
        },
        "bdCatalystTerraImportUrl": {
          "type": "string"
        },
        "bitBucketAuthUrl": {
          "type": "string"
        },
        "bitBucketClientId": {
          "type": "string"
        },
        "checkUrlLambdaVersion": {
          "type": "string"
        },
        "colabImportUrl": {
          "type": "string"
        },
        "cwlParsingLambdaVersion": {
          "type": "string"
        },
        "cwlVisualizerUri": {
          "type": "string"
        },
        "deployVersion": {
          "type": "string"
        },
        "discourseUrl": {
          "type": "string"
        },
        "dnaNexusImportUrl": {
          "type": "string"
        },
        "dnaStackImportUrl": {
          "type": "string"
        },
        "documentationUrl": {
          "type": "string"
        },
        "elwaziImportUrl": {
          "type": "string"
        },
        "featuredContentUrl": {
          "type": "string"
        },
        "featuredNewsUrl": {
          "type": "string"
        },
        "galaxyParsingPluginVersion": {
          "type": "string"
        },
        "gitBuildVersion": {
          "type": "string"
        },
        "gitCommitId": {
          "type": "string"
        },
        "gitHubAppInstallationUrl": {
          "type": "string"
        },
        "gitHubAuthUrl": {
          "type": "string"
        },
        "gitHubCodespacesImportUrl": {
          "type": "string"
        },
        "gitHubRedirectPath": {
          "type": "string"
        },
        "gitHubScope": {
          "type": "string"
        },
        "githubClientId": {
          "type": "string"
        },
        "gitlabAuthUrl": {
          "type": "string"
        },
        "gitlabClientId": {
          "type": "string"
        },
        "gitlabRedirectPath": {
          "type": "string"
        },
        "gitlabScope": {
          "type": "string"
        },
        "googleClientId": {
          "type": "string"
        },
        "googleScope": {
          "type": "string"
        },
        "mybinderImportUrl": {
          "type": "string"
        },
        "nextflowParsingLambdaVersion": {
          "type": "string"
        },
        "orcidAuthUrl": {
          "type": "string"
        },
        "orcidClientId": {
          "type": "string"
        },
        "orcidRedirectPath": {
          "type": "string"
        },
        "orcidScope": {
          "type": "string"
        },
        "quayIoAuthUrl": {
          "type": "string"
        },
        "quayIoClientId": {
          "type": "string"
        },
        "quayIoRedirectPath": {
          "type": "string"
        },
        "quayIoScope": {
          "type": "string"
        },
        "tagManagerId": {
          "type": "string"
        },
        "terraImportUrl": {
          "type": "string"
        },
        "wdlParsingLambdaVersion": {
          "type": "string"
        },
        "zenodoAuthUrl": {
          "type": "string"
        },
        "zenodoClientId": {
          "type": "string"
        },
        "zenodoRedirectPath": {
          "type": "string"
        },
        "zenodoScope": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Cost": {
      "description": "Cost represents a monetary amount in USD",
      "properties": {
        "currency": {
          "default": "USD",
          "description": "The currency of the cost value",
          "readOnly": true,
          "type": "string"
        },
        "value": {
          "description": "The numerical value of the cost",
          "example": 5.99,
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "CostMetric": {
      "description": "This describes aggregated cost metrics for workflow executions in USD.",
      "properties": {
        "average": {
          "description": "The average value from the data points",
          "format": "double",
          "type": "number"
        },
        "id": {
          "description": "Implementation specific ID for statistical metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "description": "The maximum value from the data points",
          "format": "double",
          "type": "number"
        },
        "minimum": {
          "description": "The minimum value from the data points",
          "format": "double",
          "type": "number"
        },
        "numberOfDataPointsForAverage": {
          "description": "The number of data points used to calculate the average",
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "default": "USD",
          "description": "The unit of the data points",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "average",
        "maximum",
        "minimum",
        "numberOfDataPointsForAverage"
      ],
      "type": "object"
    },
    "CpuMetric": {
      "description": "This describes aggregated CPU metrics for workflow executions.",
      "properties": {
        "average": {
          "description": "The average value from the data points",
          "format": "double",
          "type": "number"
        },
        "id": {
          "description": "Implementation specific ID for statistical metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "description": "The maximum value from the data points",
          "format": "double",
          "type": "number"
        },
        "minimum": {
          "description": "The minimum value from the data points",
          "format": "double",
          "type": "number"
        },
        "numberOfDataPointsForAverage": {
          "description": "The number of data points used to calculate the average",
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "description": "The unit of the data points",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "average",
        "maximum",
        "minimum",
        "numberOfDataPointsForAverage"
      ],
      "type": "object"
    },
    "DescriptionMetrics": {
      "properties": {
        "calculatedEntropy": {
          "format": "int64",
          "type": "integer"
        },
        "calculatedWordCount": {
          "format": "int64",
          "type": "integer"
        },
        "descriptionLength": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "DescriptorLanguageBean": {
      "properties": {
        "friendlyName": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "DockstoreTool": {
      "description": "This describes one entry in the dockstore. Logically, this currently means one tuple of registry (either quay or docker hub), organization, image name, and toolname which can be associated with CWL and Dockerfile documents",
      "properties": {
        "tags": {
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "type": "array",
          "uniqueItems": true
        },
        "aliases": {
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          },
          "type": "object"
        },
        "archived": {
          "type": "boolean"
        },
        "author": {
          "type": "string"
        },
        "authors": {
          "description": "Non-ORCID authors for the entry, retrieved from the default version",
          "items": {
            "$ref": "#/definitions/Author"
          },
          "readOnly": true,
          "type": "array",
          "uniqueItems": true
        },
        "checker_id": {
          "format": "int64",
          "type": "integer"
        },
        "conceptDoi": {
          "type": "string"
        },
        "custom_docker_registry_path": {
          "type": "string"
        },
        "customerDockerRegistryPath": {
          "type": "string"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "defaultCWLTestParameterFile": {
          "type": "string"
        },
        "defaultVersion": {
          "type": "string"
        },
        "defaultWDLTestParameterFile": {
          "type": "string"
        },
        "default_cwl_path": {
          "type": "string"
        },
        "default_dockerfile_path": {
          "type": "string"
        },
        "default_wdl_path": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "descriptorType": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "email": {
          "type": "string"
        },
        "entryType": {
          "$ref": "#/definitions/EntryType"
        },
        "entryTypeMetadata": {
          "$ref": "#/definitions/EntryTypeMetadata"
        },
        "forumUrl": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "gitUrl": {
          "type": "string"
        },
        "has_checker": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "input_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "is_published": {
          "type": "boolean"
        },
        "labels": {
          "items": {
            "$ref": "#/definitions/Label"
          },
          "type": "array",
          "uniqueItems": true
        },
        "lastBuild": {
          "format": "date-time",
          "type": "string"
        },
        "lastUpdated": {
          "format": "int64",
          "type": "integer"
        },
        "last_modified": {
          "format": "int32",
          "type": "integer"
        },
        "last_modified_date": {
          "format": "int64",
          "type": "integer"
        },
        "licenseInformation": {
          "$ref": "#/definitions/LicenseInformation"
        },
        "metadataFromEntry": {
          "$ref": "#/definitions/DockstoreTool"
        },
        "metadataFromVersion": {
          "$ref": "#/definitions/Version"
        },
        "mode": {
          "enum": [
            "AUTO_DETECT_QUAY_TAGS_AUTOMATED_BUILDS",
            "AUTO_DETECT_QUAY_TAGS_WITH_MIXED",
            "MANUAL_IMAGE_PATH",
            "HOSTED"
          ],
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "orcidAuthors": {
          "description": "ORCID authors for the entry, retrieved from the default version",
          "items": {
            "$ref": "#/definitions/OrcidAuthor"
          },
          "readOnly": true,
          "type": "array",
          "uniqueItems": true
        },
        "output_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "path": {
          "type": "string"
        },
        "private_access": {
          "type": "boolean"
        },
        "registry": {
          "enum": [
            "QUAY_IO",
            "DOCKER_HUB",
            "GITLAB",
            "AMAZON_ECR",
            "SEVEN_BRIDGES",
            "GITHUB_CONTAINER_REGISTRY"
          ],
          "type": "string"
        },
        "registry_string": {
          "type": "string"
        },
        "starredUsers": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "tool_maintainer_email": {
          "type": "string"
        },
        "tool_path": {
          "type": "string"
        },
        "toolname": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "topicAI": {
          "description": "Short description of the entry generated by AI",
          "maxLength": 150,
          "type": "string"
        },
        "topicAutomatic": {
          "description": "Short description of the entry gotten automatically",
          "maxLength": 150,
          "type": "string"
        },
        "topicId": {
          "format": "int64",
          "type": "integer"
        },
        "topicManual": {
          "description": "Short description of the entry manually updated",
          "maxLength": 150,
          "type": "string"
        },
        "topicSelection": {
          "description": "Which topic to display to the public users",
          "enum": [
            "AUTOMATIC",
            "MANUAL",
            "AI"
          ],
          "type": "string"
        },
        "userIdToOrcidPutCode": {
          "additionalProperties": {
            "$ref": "#/definitions/OrcidPutCode"
          },
          "description": "The presence of the put code for a userid indicates the entry was exported to ORCID for the corresponding Dockstore user.",
          "type": "object"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "workflowVersions": {
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "Entry": {
      "description": "This describes one high-level entity in the dockstore",
      "properties": {
        "aliases": {
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          },
          "type": "object"
        },
        "archived": {
          "type": "boolean"
        },
        "author": {
          "type": "string"
        },
        "authors": {
          "description": "Non-ORCID authors for the entry, retrieved from the default version",
          "items": {
            "$ref": "#/definitions/Author"
          },
          "readOnly": true,
          "type": "array",
          "uniqueItems": true
        },
        "checker_id": {
          "format": "int64",
          "type": "integer"
        },
        "conceptDoi": {
          "type": "string"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "defaultVersion": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "entryType": {
          "$ref": "#/definitions/EntryType"
        },
        "entryTypeMetadata": {
          "$ref": "#/definitions/EntryTypeMetadata"
        },
        "gitUrl": {
          "type": "string"
        },
        "has_checker": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "input_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "is_published": {
          "type": "boolean"
        },
        "labels": {
          "items": {
            "$ref": "#/definitions/Label"
          },
          "type": "array",
          "uniqueItems": true
        },
        "lastUpdated": {
          "format": "int64",
          "type": "integer"
        },
        "last_modified": {
          "format": "int32",
          "type": "integer"
        },
        "last_modified_date": {
          "format": "int64",
          "type": "integer"
        },
        "licenseInformation": {
          "$ref": "#/definitions/LicenseInformation"
        },
        "metadataFromEntry": {
          "$ref": "#/definitions/Entry"
        },
        "metadataFromVersion": {
          "$ref": "#/definitions/Version"
        },
        "orcidAuthors": {
          "description": "ORCID authors for the entry, retrieved from the default version",
          "items": {
            "$ref": "#/definitions/OrcidAuthor"
          },
          "readOnly": true,
          "type": "array",
          "uniqueItems": true
        },
        "output_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "starredUsers": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "topic": {
          "type": "string"
        },
        "topicAI": {
          "description": "Short description of the entry generated by AI",
          "maxLength": 150,
          "type": "string"
        },
        "topicAutomatic": {
          "description": "Short description of the entry gotten automatically",
          "maxLength": 150,
          "type": "string"
        },
        "topicId": {
          "format": "int64",
          "type": "integer"
        },
        "topicManual": {
          "description": "Short description of the entry manually updated",
          "maxLength": 150,
          "type": "string"
        },
        "topicSelection": {
          "description": "Which topic to display to the public users",
          "enum": [
            "AUTOMATIC",
            "MANUAL",
            "AI"
          ],
          "type": "string"
        },
        "userIdToOrcidPutCode": {
          "additionalProperties": {
            "$ref": "#/definitions/OrcidPutCode"
          },
          "description": "The presence of the put code for a userid indicates the entry was exported to ORCID for the corresponding Dockstore user.",
          "type": "object"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "workflowVersions": {
          "items": {
            "$ref": "#/definitions/Version"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "EntryType": {
      "description": "Entry type",
      "enum": [
        "TOOL",
        "WORKFLOW",
        "SERVICE",
        "APPTOOL",
        "NOTEBOOK"
      ],
      "type": "string"
    },
    "EntryTypeMetadata": {
      "description": "Information about an entry type",
      "properties": {
        "searchEntryType": {
          "description": "Search 'entryType' parameter value for this entry type",
          "type": "string"
        },
        "searchSupported": {
          "description": "Search support for this entry type",
          "type": "boolean"
        },
        "sitePath": {
          "description": "Relative path from the root of the site to the 'pages' where entries of this type are displayed",
          "type": "string"
        },
        "term": {
          "description": "Singular term used to refer to an instance of this entry type",
          "type": "string"
        },
        "termPlural": {
          "description": "Plural term used to refer to instances of this entry type",
          "type": "string"
        },
        "trsPrefix": {
          "description": "TRS ID prefix for this entry type",
          "type": "string"
        },
        "trsSupported": {
          "description": "TRS support for this entry type",
          "type": "boolean"
        },
        "type": {
          "$ref": "#/definitions/EntryType"
        }
      },
      "type": "object"
    },
    "EntryUpdateTime": {
      "properties": {
        "entryType": {
          "$ref": "#/definitions/EntryType"
        },
        "lastUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "type": "string"
        },
        "prettyPath": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Error": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "ErrorV20beta": {
      "properties": {
        "code": {
          "format": "int32",
          "type": "integer"
        },
        "message": {
          "type": "string"
        }
      },
      "required": [
        "code"
      ],
      "type": "object"
    },
    "Event": {
      "properties": {
        "apptool": {
          "$ref": "#/definitions/AppTool"
        },
        "collection": {
          "$ref": "#/definitions/Collection"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "initiatorUser": {
          "$ref": "#/definitions/User"
        },
        "notebook": {
          "$ref": "#/definitions/Notebook"
        },
        "organization": {
          "$ref": "#/definitions/Organization"
        },
        "service": {
          "$ref": "#/definitions/Service"
        },
        "tool": {
          "$ref": "#/definitions/DockstoreTool"
        },
        "type": {
          "enum": [
            "CREATE_ORG",
            "DELETE_ORG",
            "MODIFY_ORG",
            "APPROVE_ORG",
            "REJECT_ORG",
            "REREQUEST_ORG",
            "ADD_USER_TO_ORG",
            "REMOVE_USER_FROM_ORG",
            "MODIFY_USER_ROLE_ORG",
            "APPROVE_ORG_INVITE",
            "REJECT_ORG_INVITE",
            "CREATE_COLLECTION",
            "MODIFY_COLLECTION",
            "DELETE_COLLECTION",
            "REMOVE_FROM_COLLECTION",
            "ADD_TO_COLLECTION",
            "ADD_VERSION_TO_ENTRY",
            "PUBLISH_ENTRY",
            "UNPUBLISH_ENTRY",
            "ARCHIVE_ENTRY",
            "UNARCHIVE_ENTRY"
          ],
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        },
        "version": {
          "$ref": "#/definitions/Version"
        },
        "workflow": {
          "$ref": "#/definitions/Workflow"
        }
      },
      "type": "object"
    },
    "Execution": {
      "description": "Metrics of a workflow execution on a platform",
      "properties": {
        "additionalProperties": {
          "additionalProperties": {
            "description": "Additional properties that aren't defined. Provide a context, like one from schema.org, if you want to use a specific vocabulary",
            "example": {
              "@context": {
                "schema": "https://schema.org"
              },
              "schema:actionStatus": "CompletedActionStatus"
            },
            "type": "object"
          },
          "description": "Additional properties that aren't defined. Provide a context, like one from schema.org, if you want to use a specific vocabulary",
          "example": {
            "@context": {
              "schema": "https://schema.org"
            },
            "schema:actionStatus": "CompletedActionStatus"
          },
          "type": "object"
        },
        "dateExecuted": {
          "description": "The date and time that the execution occurred in ISO 8601 UTC date format",
          "example": "2023-03-31T15:06:49.888Z",
          "type": "string"
        },
        "executionId": {
          "description": "User-provided ID of the execution. Must be unique and not used for previous executions. This ID is used to identify the execution when updating the execution",
          "type": "string"
        }
      },
      "required": [
        "dateExecuted",
        "executionId"
      ],
      "type": "object"
    },
    "ExecutionResponse": {
      "description": "Response for a single execution metric as a result of an API",
      "properties": {
        "error": {
          "description": "The error message if one exists",
          "type": "string"
        },
        "executionId": {
          "description": "The ID of the execution that the response is for",
          "type": "string"
        },
        "status": {
          "description": "The response status code of the action for the execution",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "executionId",
        "status"
      ],
      "type": "object"
    },
    "ExecutionStatusMetric": {
      "description": "Aggregated metrics about workflow execution statuses",
      "properties": {
        "count": {
          "additionalProperties": {
            "$ref": "#/definitions/MetricsByStatus"
          },
          "description": "A map containing the metrics for each execution status",
          "type": "object"
        },
        "id": {
          "description": "Implementation specific ID for the count metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "numberOfAbortedExecutions": {
          "description": "Number of aborted executions. An execution is aborted if its execution is stopped after it has started",
          "example": 0,
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfFailedExecutions": {
          "description": "Number of failed executions. An execution may have failed because it was semantically or runtime invalid",
          "example": 2,
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        },
        "numberOfSuccessfulExecutions": {
          "description": "Number of successful executions",
          "example": 5,
          "format": "int32",
          "readOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "count"
      ],
      "type": "object"
    },
    "ExecutionTimeMetric": {
      "description": "This describes aggregated execution time metrics in seconds for workflow executions.",
      "properties": {
        "average": {
          "description": "The average value from the data points",
          "format": "double",
          "type": "number"
        },
        "id": {
          "description": "Implementation specific ID for statistical metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "description": "The maximum value from the data points",
          "format": "double",
          "type": "number"
        },
        "minimum": {
          "description": "The minimum value from the data points",
          "format": "double",
          "type": "number"
        },
        "numberOfDataPointsForAverage": {
          "description": "The number of data points used to calculate the average",
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "default": "s",
          "description": "The unit of the data points",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "average",
        "maximum",
        "minimum",
        "numberOfDataPointsForAverage"
      ],
      "type": "object"
    },
    "ExecutionsRequestBody": {
      "description": "Request body model for executionMetricsPost",
      "properties": {
        "aggregatedExecutions": {
          "description": "List of aggregated executions to submit",
          "items": {
            "$ref": "#/definitions/AggregatedExecution"
          },
          "type": "array",
          "x-deprecated": true
        },
        "runExecutions": {
          "description": "List of workflow run executions to submit",
          "items": {
            "$ref": "#/definitions/RunExecution"
          },
          "type": "array"
        },
        "taskExecutions": {
          "description": "List of task run executions to submit. Each TaskExecution represents the tasks executed during a workflow execution.",
          "items": {
            "$ref": "#/definitions/TaskExecutions"
          },
          "type": "array"
        },
        "validationExecutions": {
          "description": "List of workflow validation executions to submit",
          "items": {
            "$ref": "#/definitions/ValidationExecution"
          },
          "type": "array"
        }
      },
      "required": [
        "aggregatedExecutions",
        "runExecutions",
        "taskExecutions",
        "validationExecutions"
      ],
      "type": "object"
    },
    "ExecutionsResponseBody": {
      "description": "Response body model for execution metric APIs",
      "properties": {
        "executionResponses": {
          "description": "A list of responses for the executions submitted",
          "items": {
            "$ref": "#/definitions/ExecutionResponse"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ExtendedUserData": {
      "properties": {
        "canChangeUsername": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "FileFormat": {
      "properties": {
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "FileWrapper": {
      "description": "A file provides content for one of - A tool descriptor is a metadata document that describes one or more tools. - A tool document that describes how to test with one or more sample test JSON. - A containerfile is a document that describes how to build a particular container image. Examples include Dockerfiles for creating Docker images and Singularity recipes for Singularity images ",
      "properties": {
        "checksum": {
          "description": "A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes. ",
          "example": [
            {
              "checksum": "ea2a5db69bd20a42976838790bc29294df3af02b",
              "type": "sha1"
            }
          ],
          "items": {
            "$ref": "#/definitions/Checksum"
          },
          "type": "array"
        },
        "content": {
          "description": "The content of the file itself. One of url or content is required.",
          "type": "string"
        },
        "image_type": {
          "$ref": "#/definitions/OneOfFileWrapperImageType"
        },
        "url": {
          "description": "Optional url to the underlying content, should include version information, and can include a git hash.  Note that this URL should resolve to the raw unwrapped content that would otherwise be available in content. One of url or content is required.",
          "example": "{\"descriptorfile\":{\"url\":\"https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/ea2a5db69bd20a42976838790bc29294df3af02b/delly_docker/Delly.cwl\"},\"containerfile\":{\"url\":\"https://raw.githubusercontent.com/ICGC-TCGA-PanCancer/pcawg_delly_workflow/c83478829802b4d36374870843821abe1b625a71/delly_docker/Dockerfile\"}}",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FileWrapperV20beta": {
      "properties": {
        "content": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "HealthCheckResult": {
      "properties": {
        "healthCheckName": {
          "type": "string"
        },
        "healthy": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Image": {
      "properties": {
        "architecture": {
          "type": "string"
        },
        "checksums": {
          "items": {
            "$ref": "#/definitions/Checksum"
          },
          "type": "array"
        },
        "dbUpdateDate": {
          "format": "date-time",
          "type": "string"
        },
        "imageID": {
          "type": "string"
        },
        "imageRegistry": {
          "enum": [
            "QUAY_IO",
            "DOCKER_HUB",
            "GITLAB",
            "AMAZON_ECR",
            "SEVEN_BRIDGES",
            "GITHUB_CONTAINER_REGISTRY"
          ],
          "type": "string"
        },
        "imageUpdateDate": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "specifier": {
          "enum": [
            "PARAMETER",
            "NO_TAG",
            "LATEST",
            "TAG",
            "DIGEST"
          ],
          "type": "string"
        },
        "tag": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImageData": {
      "description": "Describes one container image.",
      "properties": {
        "checksum": {
          "description": "A production (immutable) tool version is required to have a hashcode. Not required otherwise, but might be useful to detect changes.  This exposes the hashcode for specific image versions to verify that the container version pulled is actually the version that was indexed by the registry.",
          "example": [
            {
              "checksum": "77af4d6b9913e693e8d0b4b294fa62ade6054e6b2f1ffb617ac955dd63fb0182",
              "type": "sha256"
            }
          ],
          "items": {
            "$ref": "#/definitions/Checksum"
          },
          "type": "array"
        },
        "image_name": {
          "description": "Used in conjunction with a registry_url if provided to locate images.",
          "example": "[\"quay.io/seqware/seqware_full/1.1\",\"ubuntu:latest\"]",
          "type": "string"
        },
        "image_type": {
          "enum": [
            "Docker",
            "Singularity",
            "Conda"
          ],
          "type": "string"
        },
        "registry_host": {
          "description": "A docker registry or a URL to a Singularity registry. Used along with image_name to locate a specific image.",
          "example": "[\"registry.hub.docker.com\"]",
          "type": "string"
        },
        "size": {
          "description": "Size of the container in bytes.",
          "format": "int64",
          "type": "integer"
        },
        "updated": {
          "description": "Last time the container was updated.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Installation": {
      "description": "The GitHub App installation",
      "properties": {
        "id": {
          "description": "The installation ID",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "id"
      ],
      "type": "object"
    },
    "InstallationRepositoriesPayload": {
      "allOf": [
        {
          "$ref": "#/definitions/Payload"
        },
        {
          "properties": {
            "repositories_added": {
              "description": "An array of repository objects, which were added to the installation",
              "items": {
                "$ref": "#/definitions/WebhookRepository"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "description": "A model for a GitHub webhook installation event",
      "example": {
        "installation": {
          "id": 0
        },
        "repositories_added": [
          {
            "full_name": "dockstore/dockstore-ui2"
          }
        ],
        "sender": {
          "login": "string"
        }
      },
      "required": [
        "installation",
        "repositories_added",
        "sender"
      ],
      "type": "object"
    },
    "Label": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LambdaEvent": {
      "properties": {
        "deliveryId": {
          "description": "The GitHub delivery ID, used to group events that belong to the same GitHub webhook invocation.",
          "type": "string"
        },
        "entryName": {
          "description": "The name of the entry associated with the event. An empty string indicates an entry with no name specified.",
          "type": "string"
        },
        "eventDate": {
          "format": "int64",
          "type": "integer"
        },
        "githubUsername": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "ignored": {
          "description": "Whether or not the event was ignored.",
          "type": "boolean"
        },
        "message": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "reference": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        },
        "type": {
          "enum": [
            "PUSH",
            "DELETE",
            "INSTALL",
            "PUBLISH"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Language": {
      "properties": {
        "language": {
          "enum": [
            "SMK",
            "CWL",
            "WDL",
            "gxformat2",
            "SWL",
            "NFL",
            "service",
            "jupyter"
          ],
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "LanguageParsingRequest": {
      "description": "Request sent to the external language parsing service",
      "properties": {
        "branch": {
          "description": "The Git branch/tag",
          "type": "string"
        },
        "descriptorLanguage": {
          "description": "The language of the workflow",
          "enum": [
            "SMK",
            "CWL",
            "WDL",
            "gxformat2",
            "SWL",
            "NFL",
            "service",
            "jupyter"
          ],
          "type": "string"
        },
        "descriptorRelativePathInGit": {
          "description": "The relative path to the primary descriptor (relative to the base in Git)",
          "type": "string"
        },
        "entryId": {
          "description": "Id of the Dockstore entry",
          "format": "int64",
          "type": "integer"
        },
        "sourceFiles": {
          "description": "List of SourceFiles that will be required for parsing hosted entries from Dockstore",
          "items": {
            "$ref": "#/definitions/SourceFile"
          },
          "type": "array"
        },
        "uri": {
          "description": "The Git URI",
          "type": "string"
        },
        "versionId": {
          "description": "Id of the Dockstore entry's workflowVersion",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "branch",
        "descriptorRelativePathInGit",
        "entryId",
        "uri",
        "versionId"
      ],
      "type": "object"
    },
    "LanguageParsingResponse": {
      "description": "Response from the external lambda parsing service",
      "properties": {
        "author": {
          "description": "Author found from parsing the version (may possibly be different from what will be stored in Dockstore)",
          "type": "string"
        },
        "clonedRepositoryAbsolutePath": {
          "type": "string"
        },
        "description": {
          "description": "Description found from parsing the version (may possibly be different from what will be stored in Dockstore)",
          "type": "string"
        },
        "email": {
          "description": "Email found from parsing the version (may possibly be different from what will be stored in Dockstore)",
          "type": "string"
        },
        "languageParsingRequest": {
          "$ref": "#/definitions/LanguageParsingRequest"
        },
        "orcidID": {
          "description": "ORCID ID found from parsing the version (may possibly be different from what will be stored in Dockstore)",
          "type": "string"
        },
        "parsedInformation": {
          "$ref": "#/definitions/ParsedInformation"
        },
        "secondaryFilePaths": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sourceFiles": {
          "description": "List of SourceFiles returned after parsing a non-hosted entry",
          "items": {
            "$ref": "#/definitions/SourceFile"
          },
          "type": "array"
        },
        "versionTypeValidation": {
          "$ref": "#/definitions/VersionTypeValidation"
        }
      },
      "type": "object"
    },
    "LicenseInformation": {
      "properties": {
        "licenseName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Limits": {
      "properties": {
        "hostedEntryCountLimit": {
          "format": "int32",
          "type": "integer"
        },
        "hostedEntryVersionLimit": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "MemoryMetric": {
      "description": "This describes aggregated memory metrics for workflow executions in GB.",
      "properties": {
        "average": {
          "description": "The average value from the data points",
          "format": "double",
          "type": "number"
        },
        "id": {
          "description": "Implementation specific ID for statistical metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "description": "The maximum value from the data points",
          "format": "double",
          "type": "number"
        },
        "minimum": {
          "description": "The minimum value from the data points",
          "format": "double",
          "type": "number"
        },
        "numberOfDataPointsForAverage": {
          "description": "The number of data points used to calculate the average",
          "format": "int32",
          "type": "integer"
        },
        "unit": {
          "default": "GB",
          "description": "The unit of the data points",
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "average",
        "maximum",
        "minimum",
        "numberOfDataPointsForAverage"
      ],
      "type": "object"
    },
    "MetadataV20beta": {
      "properties": {
        "api_version": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "friendly_name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      },
      "required": [
        "api_version",
        "version"
      ],
      "type": "object"
    },
    "Metrics": {
      "description": "Aggregated metrics associated with entry versions",
      "properties": {
        "executionStatusCount": {
          "$ref": "#/definitions/ExecutionStatusMetric"
        },
        "id": {
          "description": "Implementation specific ID for the metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "validationStatus": {
          "$ref": "#/definitions/ValidationStatusMetric"
        }
      },
      "required": [
        "executionStatusCount"
      ],
      "type": "object"
    },
    "MetricsByStatus": {
      "description": "Aggregated metrics grouped by execution status",
      "properties": {
        "cost": {
          "$ref": "#/definitions/CostMetric"
        },
        "cpu": {
          "$ref": "#/definitions/CpuMetric"
        },
        "executionStatusCount": {
          "description": "The number of executions for the status",
          "format": "int32",
          "type": "integer"
        },
        "executionTime": {
          "$ref": "#/definitions/ExecutionTimeMetric"
        },
        "id": {
          "description": "Implementation specific ID for the metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "memory": {
          "$ref": "#/definitions/MemoryMetric"
        }
      },
      "required": [
        "executionStatusCount"
      ],
      "type": "object"
    },
    "Notebook": {
      "allOf": [
        {
          "$ref": "#/definitions/Workflow"
        }
      ],
      "description": "This describes one notebook in the dockstore as a special degenerate case of a workflow",
      "type": "object"
    },
    "Notification": {
      "properties": {
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "expiration": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "message": {
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "priority": {
          "enum": [
            "LOW",
            "MEDIUM",
            "CRITICAL"
          ],
          "type": "string"
        },
        "type": {
          "enum": [
            "SITEWIDE",
            "NEWSBODY"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "OneOfFileWrapperImageType": {
      "description": "Optionally return additional information on the type of file this is",
      "type": "object"
    },
    "OrcidAuthor": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "orcid": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrcidAuthorInformation": {
      "properties": {
        "affiliation": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "orcid": {
          "type": "string"
        },
        "role": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrcidPutCode": {
      "description": "An ORCID put code uniquely identifies a work on ORCID",
      "properties": {
        "orcidPutCode": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Organization": {
      "properties": {
        "aliases": {
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          },
          "type": "object"
        },
        "avatarUrl": {
          "pattern": "([^\\s]+)(\\.jpg|\\.jpeg|\\.png|\\.gif)",
          "type": "string"
        },
        "categorizer": {
          "type": "boolean"
        },
        "collectionsLength": {
          "format": "int64",
          "type": "integer"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "maxLength": 50,
          "minLength": 3,
          "pattern": "[\\w ,_\\-&()']*",
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "link": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "maxLength": 39,
          "minLength": 3,
          "pattern": "[a-zA-Z][a-zA-Z\\d]*",
          "type": "string"
        },
        "starredUsers": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "status": {
          "enum": [
            "PENDING",
            "REJECTED",
            "APPROVED",
            "HIDDEN"
          ],
          "type": "string"
        },
        "topic": {
          "type": "string"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/OrganizationUser"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "type": "object"
    },
    "OrganizationUpdateTime": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "lastUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "OrganizationUser": {
      "properties": {
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "$ref": "#/definitions/OrganizationUserId"
        },
        "organization": {
          "$ref": "#/definitions/Organization"
        },
        "role": {
          "enum": [
            "ADMIN",
            "MAINTAINER",
            "MEMBER"
          ],
          "type": "string"
        },
        "status": {
          "description": "The status of the organization invitation",
          "enum": [
            "PENDING",
            "REJECTED",
            "ACCEPTED"
          ],
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/User"
        }
      },
      "required": [
        "status"
      ],
      "type": "object"
    },
    "OrganizationUserId": {
      "properties": {
        "organizationId": {
          "format": "int64",
          "type": "integer"
        },
        "userId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ParsedInformation": {
      "properties": {
        "descriptorLanguage": {
          "enum": [
            "SMK",
            "CWL",
            "WDL",
            "gxformat2",
            "SWL",
            "NFL",
            "service",
            "jupyter"
          ],
          "type": "string"
        },
        "hasHTTPImports": {
          "type": "boolean"
        },
        "hasLocalImports": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Payload": {
      "description": "Describes the common fields of all GitHub webhook payloads",
      "properties": {
        "installation": {
          "$ref": "#/definitions/Installation"
        },
        "repository": {
          "$ref": "#/definitions/WebhookRepository"
        },
        "sender": {
          "$ref": "#/definitions/Sender"
        }
      },
      "required": [
        "installation",
        "sender"
      ],
      "type": "object"
    },
    "Permission": {
      "properties": {
        "email": {
          "type": "string"
        },
        "role": {
          "enum": [
            "OWNER",
            "WRITER",
            "READER"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "PrivilegeRequest": {
      "properties": {
        "admin": {
          "type": "boolean"
        },
        "curator": {
          "type": "boolean"
        },
        "platformPartner": {
          "enum": [
            "GALAXY",
            "TERRA",
            "DNA_STACK",
            "DNA_NEXUS",
            "CGC",
            "NHLBI_BIODATA_CATALYST",
            "ANVIL",
            "CAVATICA",
            "NEXTFLOW_TOWER",
            "ELWAZI",
            "AGC",
            "OTHER",
            "ALL"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Profile": {
      "properties": {
        "avatarURL": {
          "type": "string"
        },
        "bio": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "PublishRequest": {
      "properties": {
        "publish": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "PushPayload": {
      "allOf": [
        {
          "$ref": "#/definitions/Payload"
        },
        {
          "properties": {
            "after": {
              "description": "The SHA of the most recent commit on ref after the push",
              "example": "6d96270004515a0486bb7f76196a72b40c55a47f",
              "type": "string"
            },
            "ref": {
              "description": "The full git ref that was pushed",
              "example": "refs/heads/master OR refs/tags/v1.0",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "A model for a GitHub webhook push event",
      "required": [
        "installation",
        "ref",
        "repository",
        "sender"
      ],
      "type": "object"
    },
    "RegistryBean": {
      "properties": {
        "customDockerPath": {
          "type": "string"
        },
        "dockerPath": {
          "type": "string"
        },
        "enum": {
          "type": "string"
        },
        "friendlyName": {
          "type": "string"
        },
        "privateOnly": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Repository": {
      "properties": {
        "canDelete": {
          "type": "boolean"
        },
        "gitRegistry": {
          "enum": [
            "dockstore.org",
            "github.com",
            "bitbucket.org",
            "gitlab.com"
          ],
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "present": {
          "type": "boolean"
        },
        "repositoryName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "RunExecution": {
      "allOf": [
        {
          "$ref": "#/definitions/Execution"
        },
        {
          "properties": {
            "cost": {
              "$ref": "#/definitions/Cost"
            },
            "cpuRequirements": {
              "description": "Number of CPUs required for the execution",
              "example": 2,
              "format": "int32",
              "type": "integer"
            },
            "executionStatus": {
              "description": "The status of the execution",
              "enum": [
                "ALL",
                "SUCCESSFUL",
                "FAILED",
                "FAILED_SEMANTIC_INVALID",
                "FAILED_RUNTIME_INVALID",
                "ABORTED"
              ],
              "example": "SUCCESSFUL",
              "type": "string"
            },
            "executionTime": {
              "description": "The total time it took for the execution to complete in ISO 8601 duration format",
              "example": "PT30S",
              "type": "string"
            },
            "executionTimeSeconds": {
              "description": "In seconds, automatically calculated from executionTime and dateExecuted",
              "example": 30,
              "format": "int64",
              "readOnly": true,
              "type": "integer"
            },
            "memoryRequirementsGB": {
              "description": "Memory requirements for the execution in GB",
              "example": 2,
              "format": "double",
              "type": "number"
            },
            "region": {
              "description": "The region the workflow was executed in",
              "example": "us-central1",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Metrics of an execution on a platform",
      "required": [
        "dateExecuted",
        "executionId",
        "executionStatus"
      ],
      "type": "object"
    },
    "Sender": {
      "description": "The user that triggered the event",
      "properties": {
        "login": {
          "description": "GitHub username of the sender of the GitHub webhook event",
          "type": "string"
        }
      },
      "required": [
        "login"
      ],
      "type": "object"
    },
    "Service": {
      "allOf": [
        {
          "$ref": "#/definitions/Workflow"
        }
      ],
      "description": "This describes one service in the dockstore as a special degenerate case of a workflow",
      "type": "object"
    },
    "ServiceType": {
      "description": "Type of a GA4GH service",
      "properties": {
        "artifact": {
          "description": "Name of the API or GA4GH specification implemented. Official GA4GH types should be assigned as part of standards approval process. Custom artifacts are supported.",
          "example": "beacon",
          "type": "string"
        },
        "group": {
          "description": "Namespace in reverse domain name format. Use `org.ga4gh` for implementations compliant with official GA4GH specifications. For services with custom APIs not standardized by GA4GH, or implementations diverging from official GA4GH specifications, use a different namespace (e.g. your organization's reverse domain name).",
          "example": "org.ga4gh",
          "type": "string"
        },
        "version": {
          "description": "Version of the API or specification. GA4GH specifications use semantic versioning.",
          "example": "1.0.0",
          "type": "string"
        }
      },
      "required": [
        "artifact",
        "group",
        "version"
      ],
      "type": "object"
    },
    "SharedWorkflows": {
      "properties": {
        "role": {
          "enum": [
            "OWNER",
            "WRITER",
            "READER"
          ],
          "type": "string"
        },
        "workflows": {
          "items": {
            "$ref": "#/definitions/Workflow"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "SourceControlBean": {
      "properties": {
        "friendlyName": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SourceFile": {
      "properties": {
        "absolutePath": {
          "description": "Absolute path of sourcefile in git repo",
          "type": "string"
        },
        "checksums": {
          "items": {
            "$ref": "#/definitions/Checksum"
          },
          "type": "array"
        },
        "content": {
          "type": "string"
        },
        "frozen": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "metadata": {
          "$ref": "#/definitions/SourceFileMetadata"
        },
        "path": {
          "description": "Path to sourcefile relative to its parent",
          "type": "string"
        },
        "type": {
          "description": "Enumerates the type of file",
          "enum": [
            "DOCKSTORE_SMK",
            "SMK_TEST_PARAMS",
            "DOCKSTORE_CWL",
            "CWL_TEST_JSON",
            "DOCKSTORE_WDL",
            "WDL_TEST_JSON",
            "DOCKERFILE",
            "NEXTFLOW",
            "NEXTFLOW_CONFIG",
            "NEXTFLOW_TEST_PARAMS",
            "DOCKSTORE_YML",
            "DOCKSTORE_SERVICE_YML",
            "DOCKSTORE_SERVICE_TEST_JSON",
            "DOCKSTORE_SERVICE_OTHER",
            "DOCKSTORE_GXFORMAT2",
            "GXFORMAT2_TEST_FILE",
            "DOCKSTORE_SWL",
            "SWL_TEST_JSON",
            "DOCKSTORE_JUPYTER",
            "DOCKSTORE_NOTEBOOK_REES",
            "DOCKSTORE_NOTEBOOK_DEVCONTAINER",
            "DOCKSTORE_NOTEBOOK_TEST_FILE",
            "DOCKSTORE_NOTEBOOK_OTHER"
          ],
          "type": "string"
        },
        "verifiedBySource": {
          "additionalProperties": {
            "$ref": "#/definitions/VerificationInformation"
          },
          "type": "object"
        }
      },
      "required": [
        "absolutePath",
        "path",
        "type"
      ],
      "type": "object"
    },
    "SourceFileMetadata": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "parent": {
          "$ref": "#/definitions/SourceFile"
        },
        "typeVersion": {
          "description": "The language version for the given descriptor file type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "StarRequest": {
      "properties": {
        "star": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "TRSService": {
      "description": "GA4GH service",
      "properties": {
        "contactUrl": {
          "description": "URL of the contact for the provider of this service, e.g. a link to a contact form (RFC 3986 format), or an email (RFC 2368 format).",
          "example": "mailto:support@example.com",
          "type": "string"
        },
        "createdAt": {
          "description": "Timestamp describing when the service was first deployed and available (RFC 3339 format)",
          "example": "2019-06-04T12:58:19.000Z",
          "format": "date-time",
          "type": "string"
        },
        "description": {
          "description": "Description of the service. Should be human readable and provide information about the service.",
          "example": "This service provides...",
          "type": "string"
        },
        "documentationUrl": {
          "description": "URL of the documentation of this service (RFC 3986 format). This should help someone learn how to use your service, including any specifics required to access data, e.g. authentication.",
          "example": "https://docs.myservice.example.com",
          "type": "string"
        },
        "environment": {
          "description": "Environment the service is running in. Use this to distinguish between production, development and testing/staging deployments. Suggested values are prod, test, dev, staging. However this is advised and not enforced.",
          "example": "test",
          "type": "string"
        },
        "id": {
          "description": "Unique ID of this service. Reverse domain name notation is recommended, though not required. The identifier should attempt to be globally unique so it can be used in downstream aggregator services e.g. Service Registry.",
          "example": "org.ga4gh.myservice",
          "type": "string"
        },
        "name": {
          "description": "Name of this service. Should be human readable.",
          "example": "My project",
          "type": "string"
        },
        "organization": {
          "$ref": "#/definitions/TRSServiceOrganization"
        },
        "type": {
          "$ref": "#/definitions/ServiceType"
        },
        "updatedAt": {
          "description": "Timestamp describing when the service was last updated (RFC 3339 format)",
          "example": "2019-06-04T12:58:19.000Z",
          "format": "date-time",
          "type": "string"
        },
        "version": {
          "description": "Version of the service being described. Semantic versioning is recommended, but other identifiers, such as dates or commit hashes, are also allowed. The version should be changed whenever the service is updated.",
          "example": "1.0.0",
          "type": "string"
        }
      },
      "required": [
        "id",
        "name",
        "organization",
        "type",
        "version"
      ],
      "type": "object"
    },
    "TRSServiceOrganization": {
      "description": "Organization providing the service",
      "properties": {
        "name": {
          "description": "Name of the organization responsible for the service",
          "example": "My organization",
          "type": "string"
        },
        "url": {
          "description": "URL of the website of the organization (RFC 3986 format)",
          "example": "https://example.com",
          "type": "string"
        }
      },
      "required": [
        "name",
        "url"
      ],
      "type": "object"
    },
    "Tag": {
      "description": "This describes one tag associated with a container.",
      "properties": {
        "author": {
          "type": "string"
        },
        "authors": {
          "items": {
            "$ref": "#/definitions/Author"
          },
          "type": "array",
          "uniqueItems": true
        },
        "automated": {
          "type": "boolean"
        },
        "commitID": {
          "type": "string"
        },
        "cwl_path": {
          "type": "string"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "descriptionSource": {
          "enum": [
            "README",
            "CUSTOM_README",
            "DESCRIPTOR"
          ],
          "type": "string"
        },
        "descriptorTypeVersionsFromSourceFiles": {
          "items": {
            "$ref": "#/definitions/SourceFile"
          },
          "type": "array",
          "uniqueItems": true
        },
        "dirtyBit": {
          "type": "boolean"
        },
        "dockerfile_path": {
          "type": "string"
        },
        "doiStatus": {
          "enum": [
            "NOT_REQUESTED",
            "REQUESTED",
            "CREATED"
          ],
          "type": "string"
        },
        "doiURL": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "frozen": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "image_id": {
          "type": "string"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array",
          "uniqueItems": true
        },
        "input_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "last_built": {
          "format": "int64",
          "type": "integer"
        },
        "metricsByPlatform": {
          "additionalProperties": {
            "$ref": "#/definitions/Metrics"
          },
          "type": "object"
        },
        "name": {
          "description": "Implementation specific, can be a quay.io or docker hub tag name",
          "example": "latest",
          "type": "string"
        },
        "orcidAuthors": {
          "items": {
            "$ref": "#/definitions/OrcidAuthor"
          },
          "type": "array",
          "uniqueItems": true
        },
        "output_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "readMePath": {
          "type": "string"
        },
        "reference": {
          "description": "git commit/tag/branch",
          "example": "master",
          "type": "string"
        },
        "referenceType": {
          "enum": [
            "COMMIT",
            "TAG",
            "BRANCH",
            "NOT_APPLICABLE",
            "UNSET"
          ],
          "type": "string"
        },
        "size": {
          "format": "int64",
          "type": "integer"
        },
        "userFiles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "valid": {
          "type": "boolean"
        },
        "validations": {
          "items": {
            "$ref": "#/definitions/Validation"
          },
          "type": "array",
          "uniqueItems": true
        },
        "verified": {
          "type": "boolean"
        },
        "verifiedPlatforms": {
          "description": "Verified platforms for the version",
          "items": {
            "description": "Verified platforms for the version",
            "type": "string"
          },
          "type": "array"
        },
        "verifiedSource": {
          "type": "string"
        },
        "verifiedSources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "versionEditor": {
          "$ref": "#/definitions/User"
        },
        "versionMetadata": {
          "$ref": "#/definitions/VersionMetadata"
        },
        "wdl_path": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "reference"
      ],
      "type": "object"
    },
    "TaskExecutions": {
      "allOf": [
        {
          "$ref": "#/definitions/Execution"
        },
        {
          "properties": {
            "taskExecutions": {
              "description": "Metrics of individual tasks that were executed during the workflow execution.",
              "items": {
                "$ref": "#/definitions/RunExecution"
              },
              "type": "array"
            }
          },
          "type": "object"
        }
      ],
      "description": "Metrics of individual tasks that were executed during the workflow execution.",
      "required": [
        "dateExecuted",
        "executionId"
      ],
      "type": "object"
    },
    "Token_Auth": {
      "properties": {
        "content": {
          "type": "string"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "refreshToken": {
          "type": "string"
        },
        "token": {
          "type": "string"
        },
        "tokenSource": {
          "enum": [
            "quay.io",
            "github.com",
            "dockstore",
            "bitbucket.org",
            "gitlab.com",
            "zenodo.org",
            "google.com",
            "orcid.org"
          ],
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Token_User": {
      "properties": {
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "tokenSource": {
          "enum": [
            "quay.io",
            "github.com",
            "dockstore",
            "bitbucket.org",
            "gitlab.com",
            "zenodo.org",
            "google.com",
            "orcid.org"
          ],
          "type": "string"
        },
        "userId": {
          "format": "int64",
          "type": "integer"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Tool": {
      "description": "A tool (or described tool) is defined as a tuple of a descriptor file (which potentially consists of multiple files), a set of container images, and a set of instructions for creating those images.",
      "properties": {
        "aliases": {
          "description": "Support for this parameter is optional for tool registries that support aliases. A list of strings that can be used to identify this tool which could be  straight up URLs.  This can be used to expose alternative ids (such as GUIDs) for a tool for registries. Can be used to match tools across registries.",
          "items": {
            "description": "Support for this parameter is optional for tool registries that support aliases. A list of strings that can be used to identify this tool which could be  straight up URLs.  This can be used to expose alternative ids (such as GUIDs) for a tool for registries. Can be used to match tools across registries.",
            "type": "string"
          },
          "type": "array"
        },
        "checker_url": {
          "description": "Optional url to the checker tool that will exit successfully if this tool produced the expected result given test data.",
          "type": "string"
        },
        "description": {
          "description": "The description of the tool.",
          "type": "string"
        },
        "has_checker": {
          "description": "Whether this tool has a checker tool associated with it.",
          "type": "boolean"
        },
        "id": {
          "description": "A unique identifier of the tool, scoped to this registry.",
          "example": "123456",
          "type": "string"
        },
        "meta_version": {
          "description": "The version of this tool in the registry. Iterates when fields like the description, author, etc. are updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the tool.",
          "type": "string"
        },
        "organization": {
          "description": "The organization that published the image.",
          "type": "string"
        },
        "toolclass": {
          "$ref": "#/definitions/ToolClass"
        },
        "url": {
          "description": "The URL for this tool in this registry.",
          "example": "http://agora.broadinstitute.org/tools/123456",
          "type": "string"
        },
        "versions": {
          "description": "A list of versions for this tool.",
          "items": {
            "$ref": "#/definitions/ToolVersion"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "organization",
        "toolclass",
        "url",
        "versions"
      ],
      "type": "object"
    },
    "ToolClass": {
      "description": "Describes a class (type) of tool allowing us to categorize workflows, tasks, and maybe even other entities (such as services) separately.",
      "properties": {
        "description": {
          "description": "A longer explanation of what this class is and what it can accomplish.",
          "type": "string"
        },
        "id": {
          "description": "The unique identifier for the class.",
          "type": "string"
        },
        "name": {
          "description": "A short friendly name for the class.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolClassV20beta": {
      "properties": {
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolDescriptor": {
      "properties": {
        "descriptor": {
          "type": "string"
        },
        "type": {
          "enum": [
            "CWL",
            "WDL",
            "NFL",
            "GALAXY",
            "SMK",
            "SERVICE",
            "JUPYTER"
          ],
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "ToolDockerfile": {
      "properties": {
        "dockerfile": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolFile": {
      "properties": {
        "checksum": {
          "$ref": "#/definitions/Checksum"
        },
        "file_type": {
          "enum": [
            "TEST_FILE",
            "PRIMARY_DESCRIPTOR",
            "SECONDARY_DESCRIPTOR",
            "CONTAINERFILE",
            "OTHER"
          ],
          "type": "string"
        },
        "path": {
          "description": "Relative path of the file.  A descriptor's path can be used with the GA4GH .../{type}/descriptor/{relative_path : .+} endpoint.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolFileV20beta": {
      "properties": {
        "file_type": {
          "enum": [
            "TEST_FILE",
            "PRIMARY_DESCRIPTOR",
            "SECONDARY_DESCRIPTOR",
            "CONTAINERFILE",
            "OTHER"
          ],
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolTesterLog": {
      "properties": {
        "filename": {
          "type": "string"
        },
        "logType": {
          "enum": [
            "FULL",
            "SUMMARY"
          ],
          "type": "string"
        },
        "runner": {
          "type": "string"
        },
        "testFilename": {
          "type": "string"
        },
        "toolId": {
          "type": "string"
        },
        "toolVersionName": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolTestsV1": {
      "properties": {
        "test": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolV1": {
      "properties": {
        "author": {
          "type": "string"
        },
        "contains": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "meta-version": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "signed": {
          "type": "boolean"
        },
        "toolclass": {
          "$ref": "#/definitions/ToolClassV20beta"
        },
        "toolname": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "verified-source": {
          "type": "string"
        },
        "versions": {
          "items": {
            "$ref": "#/definitions/ToolVersionV1"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ToolV20beta": {
      "properties": {
        "aliases": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "author": {
          "type": "string"
        },
        "checker_url": {
          "type": "string"
        },
        "contains": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "description": {
          "type": "string"
        },
        "has_checker": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "meta_version": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "signed": {
          "type": "boolean"
        },
        "toolclass": {
          "$ref": "#/definitions/ToolClassV20beta"
        },
        "toolname": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "verified_source": {
          "type": "string"
        },
        "versions": {
          "items": {
            "$ref": "#/definitions/ToolVersionV20beta"
          },
          "type": "array"
        }
      },
      "required": [
        "author",
        "id",
        "organization",
        "toolclass",
        "url",
        "versions"
      ],
      "type": "object"
    },
    "ToolVersion": {
      "description": "A tool version describes a particular iteration of a tool as described by a reference to a specific image and/or documents.",
      "properties": {
        "author": {
          "description": "Contact information for the author of this version of the tool in the registry. (More complex authorship information is handled by the descriptor).",
          "items": {
            "description": "Contact information for the author of this version of the tool in the registry. (More complex authorship information is handled by the descriptor).",
            "type": "string"
          },
          "type": "array"
        },
        "containerfile": {
          "description": "Reports if this tool has a containerfile available. (For Docker-based tools, this would indicate the presence of a Dockerfile)",
          "type": "boolean"
        },
        "descriptor_type": {
          "description": "The type (or types) of descriptors available.",
          "items": {
            "description": "The type (or types) of descriptors available.",
            "enum": [
              "CWL",
              "WDL",
              "NFL",
              "GALAXY",
              "SMK",
              "SERVICE",
              "JUPYTER"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "descriptor_type_version": {
          "additionalProperties": {
            "description": "A map providing information about the language versions used in this tool. The keys should be the same values used in the `descriptor_type` field, and the value should be an array of all the language versions used for the given `descriptor_type`. Depending on the `descriptor_type` (e.g. CWL) multiple version values may be used in a single tool.",
            "example": {
              "CWL": [
                "v1.0.2"
              ],
              "NFL": [
                "DSL2"
              ],
              "WDL": [
                "1.0",
                "1.0"
              ]
            },
            "items": {
              "description": "A map providing information about the language versions used in this tool. The keys should be the same values used in the `descriptor_type` field, and the value should be an array of all the language versions used for the given `descriptor_type`. Depending on the `descriptor_type` (e.g. CWL) multiple version values may be used in a single tool.",
              "example": "{\"WDL\":[\"1.0\",\"1.0\"],\"CWL\":[\"v1.0.2\"],\"NFL\":[\"DSL2\"]}",
              "type": "string"
            },
            "type": "array"
          },
          "description": "A map providing information about the language versions used in this tool. The keys should be the same values used in the `descriptor_type` field, and the value should be an array of all the language versions used for the given `descriptor_type`. Depending on the `descriptor_type` (e.g. CWL) multiple version values may be used in a single tool.",
          "example": {
            "CWL": [
              "v1.0.2"
            ],
            "NFL": [
              "DSL2"
            ],
            "WDL": [
              "1.0",
              "1.0"
            ]
          },
          "type": "object"
        },
        "id": {
          "description": "An identifier of the version of this tool for this particular tool registry.",
          "example": "v1",
          "type": "string"
        },
        "images": {
          "description": "All known docker images (and versions/hashes) used by this tool. If the tool has to evaluate any of the docker images strings at runtime, those ones cannot be reported here.",
          "items": {
            "$ref": "#/definitions/ImageData"
          },
          "type": "array"
        },
        "included_apps": {
          "description": "An array of IDs for the applications that are stored inside this tool.",
          "example": [
            "https://bio.tools/tool/mytum.de/SNAP2/1",
            "https://bio.tools/bioexcel_seqqc"
          ],
          "items": {
            "description": "An array of IDs for the applications that are stored inside this tool.",
            "example": "[\"https://bio.tools/tool/mytum.de/SNAP2/1\",\"https://bio.tools/bioexcel_seqqc\"]",
            "type": "string"
          },
          "type": "array"
        },
        "is_production": {
          "description": "This version of a tool is guaranteed to not change over time (for example, a  tool built from a tag in git as opposed to a branch). A production quality tool  is required to have a checksum",
          "type": "boolean"
        },
        "meta_version": {
          "description": "The version of this tool version in the registry. Iterates when fields like the description, author, etc. are updated.",
          "type": "string"
        },
        "name": {
          "description": "The name of the version.",
          "type": "string"
        },
        "signed": {
          "description": "Reports whether this version of the tool has been signed.",
          "type": "boolean"
        },
        "url": {
          "description": "The URL for this tool version in this registry.",
          "example": "http://agora.broadinstitute.org/tools/123456/versions/1",
          "type": "string"
        },
        "verified": {
          "description": "Reports whether this tool has been verified by a specific organization or individual.",
          "type": "boolean"
        },
        "verified_source": {
          "description": "Source of metadata that can support a verified tool, such as an email or URL.",
          "items": {
            "description": "Source of metadata that can support a verified tool, such as an email or URL.",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "id",
        "url"
      ],
      "type": "object"
    },
    "ToolVersionV1": {
      "properties": {
        "descriptor-type": {
          "items": {
            "enum": [
              "CWL",
              "WDL"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "dockerfile": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "meta-version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "verified-source": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "ToolVersionV20beta": {
      "properties": {
        "containerfile": {
          "type": "boolean"
        },
        "descriptor_type": {
          "items": {
            "enum": [
              "SMK",
              "CWL",
              "WDL",
              "NFL",
              "SERVICE",
              "GXFORMAT2"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "image_name": {
          "type": "string"
        },
        "meta_version": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "registry_url": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "verified_source": {
          "type": "string"
        }
      },
      "required": [
        "id",
        "url"
      ],
      "type": "object"
    },
    "User": {
      "properties": {
        "avatarUrl": {
          "type": "string"
        },
        "curator": {
          "description": "Indicates whether this user is a curator. The value is always false unless requested for oneself or by an admin",
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "isAdmin": {
          "description": "Indicates whether the user is an admin.  The value is always false unless requested for oneself or by an admin",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "orcid": {
          "type": "string"
        },
        "platformPartner": {
          "description": "Indicates whether this account corresponds to a platform partner",
          "enum": [
            "GALAXY",
            "TERRA",
            "DNA_STACK",
            "DNA_NEXUS",
            "CGC",
            "NHLBI_BIODATA_CATALYST",
            "ANVIL",
            "CAVATICA",
            "NEXTFLOW_TOWER",
            "ELWAZI",
            "AGC",
            "OTHER",
            "ALL"
          ],
          "type": "string"
        },
        "privacyPolicyVersion": {
          "enum": [
            "NONE",
            "PRIVACY_POLICY_VERSION_2_5"
          ],
          "type": "string"
        },
        "privacyPolicyVersionAcceptanceDate": {
          "format": "int64",
          "type": "integer"
        },
        "setupComplete": {
          "type": "boolean"
        },
        "tosacceptanceDate": {
          "format": "int64",
          "type": "integer"
        },
        "tosversion": {
          "enum": [
            "NONE",
            "TOS_VERSION_1",
            "TOS_VERSION_2"
          ],
          "type": "string"
        },
        "tosversionAcceptanceDate": {
          "format": "int64",
          "type": "integer"
        },
        "userProfiles": {
          "additionalProperties": {
            "$ref": "#/definitions/Profile"
          },
          "type": "object"
        },
        "username": {
          "type": "string"
        },
        "usernameChangeRequired": {
          "description": "Indicates whether the user is required to change their username before being allowed to do various operations on Dockstore.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "UserInfo": {
      "properties": {
        "dockstoreUsername": {
          "type": "string"
        },
        "thirdPartyEmail": {
          "type": "string"
        },
        "thirdPartyUsername": {
          "type": "string"
        },
        "tokenType": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "Validation": {
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "type": {
          "enum": [
            "DOCKSTORE_SMK",
            "SMK_TEST_PARAMS",
            "DOCKSTORE_CWL",
            "CWL_TEST_JSON",
            "DOCKSTORE_WDL",
            "WDL_TEST_JSON",
            "DOCKERFILE",
            "NEXTFLOW",
            "NEXTFLOW_CONFIG",
            "NEXTFLOW_TEST_PARAMS",
            "DOCKSTORE_YML",
            "DOCKSTORE_SERVICE_YML",
            "DOCKSTORE_SERVICE_TEST_JSON",
            "DOCKSTORE_SERVICE_OTHER",
            "DOCKSTORE_GXFORMAT2",
            "GXFORMAT2_TEST_FILE",
            "DOCKSTORE_SWL",
            "SWL_TEST_JSON",
            "DOCKSTORE_JUPYTER",
            "DOCKSTORE_NOTEBOOK_REES",
            "DOCKSTORE_NOTEBOOK_DEVCONTAINER",
            "DOCKSTORE_NOTEBOOK_TEST_FILE",
            "DOCKSTORE_NOTEBOOK_OTHER"
          ],
          "type": "string"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "ValidationExecution": {
      "allOf": [
        {
          "$ref": "#/definitions/Execution"
        },
        {
          "properties": {
            "errorMessage": {
              "description": "The error message for a failed validation by the validator tool",
              "type": "string"
            },
            "isValid": {
              "description": "Boolean indicating if the workflow was validated successfully",
              "example": true,
              "type": "boolean"
            },
            "validatorTool": {
              "description": "The validator tool used to validate the workflow",
              "enum": [
                "MINIWDL",
                "WOMTOOL",
                "CWLTOOL",
                "NF_VALIDATION",
                "OTHER"
              ],
              "example": "miniwdl",
              "type": "string"
            },
            "validatorToolVersion": {
              "description": "The version of the validator tool",
              "type": "string"
            }
          },
          "type": "object"
        }
      ],
      "description": "Metrics of a workflow validated on a platform",
      "required": [
        "dateExecuted",
        "executionId",
        "isValid",
        "validatorTool",
        "validatorToolVersion"
      ],
      "type": "object"
    },
    "ValidationStatusMetric": {
      "description": "Aggregated metrics about workflow validation statuses",
      "properties": {
        "id": {
          "description": "Implementation specific ID for the count metrics in this webservice",
          "format": "int64",
          "type": "integer"
        },
        "validatorTools": {
          "additionalProperties": {
            "$ref": "#/definitions/ValidatorInfo"
          },
          "description": "A map containing key-value pairs indicating whether the validator tool successfully validated the workflow",
          "type": "object"
        }
      },
      "required": [
        "validatorTools"
      ],
      "type": "object"
    },
    "ValidatorInfo": {
      "description": "Aggregated validation information for a particular validator tool like miniwdl",
      "properties": {
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "mostRecentVersionName": {
          "description": "The version of the validator tool that was most recently executed",
          "type": "string"
        },
        "numberOfRuns": {
          "description": "The number of times the validator was executed on the workflow",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "passingRate": {
          "description": "A percentage representing how often the validator successfully validated the workflow",
          "example": 100,
          "format": "double",
          "type": "number"
        },
        "validatorVersions": {
          "items": {
            "$ref": "#/definitions/ValidatorVersionInfo"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "mostRecentVersionName",
        "numberOfRuns",
        "passingRate",
        "validatorVersions"
      ],
      "type": "object"
    },
    "ValidatorVersionInfo": {
      "description": "Validation information for a version of a specific validator tool, like miniwdl v1.9.1",
      "properties": {
        "dateExecuted": {
          "description": "The date and time that the validator tool was executed in ISO 8601 UTC date format",
          "example": "2023-03-31T15:06:49.888Z",
          "type": "string"
        },
        "errorMessage": {
          "description": "The error message for a failed validation by the validator tool",
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "isValid": {
          "description": "Boolean indicating if the workflow was validated successfully",
          "example": true,
          "type": "boolean"
        },
        "name": {
          "description": "The version name of the validator tool",
          "type": "string"
        },
        "numberOfRuns": {
          "description": "The number of times the validator was executed on the workflow",
          "example": 1,
          "format": "int32",
          "type": "integer"
        },
        "passingRate": {
          "description": "A percentage representing how often the validator successfully validates the workflow",
          "example": 100,
          "format": "double",
          "type": "number"
        }
      },
      "required": [
        "dateExecuted",
        "isValid",
        "name",
        "numberOfRuns",
        "passingRate"
      ],
      "type": "object"
    },
    "VerificationInformation": {
      "properties": {
        "metadata": {
          "type": "string"
        },
        "platformVersion": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "Version": {
      "description": "This describes a version of an entry in Dockstore",
      "properties": {
        "author": {
          "type": "string"
        },
        "authors": {
          "items": {
            "$ref": "#/definitions/Author"
          },
          "type": "array",
          "uniqueItems": true
        },
        "commitID": {
          "type": "string"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "descriptionSource": {
          "enum": [
            "README",
            "CUSTOM_README",
            "DESCRIPTOR"
          ],
          "type": "string"
        },
        "descriptorTypeVersionsFromSourceFiles": {
          "items": {
            "$ref": "#/definitions/SourceFile"
          },
          "type": "array",
          "uniqueItems": true
        },
        "dirtyBit": {
          "type": "boolean"
        },
        "doiStatus": {
          "enum": [
            "NOT_REQUESTED",
            "REQUESTED",
            "CREATED"
          ],
          "type": "string"
        },
        "doiURL": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "frozen": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array",
          "uniqueItems": true
        },
        "input_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "metricsByPlatform": {
          "additionalProperties": {
            "$ref": "#/definitions/Metrics"
          },
          "type": "object"
        },
        "name": {
          "description": "Implementation specific, can be a quay.io or docker hub tag name",
          "example": "latest",
          "type": "string"
        },
        "orcidAuthors": {
          "items": {
            "$ref": "#/definitions/OrcidAuthor"
          },
          "type": "array",
          "uniqueItems": true
        },
        "output_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "readMePath": {
          "type": "string"
        },
        "reference": {
          "description": "git commit/tag/branch",
          "example": "master",
          "type": "string"
        },
        "referenceType": {
          "enum": [
            "COMMIT",
            "TAG",
            "BRANCH",
            "NOT_APPLICABLE",
            "UNSET"
          ],
          "type": "string"
        },
        "userFiles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "valid": {
          "type": "boolean"
        },
        "validations": {
          "items": {
            "$ref": "#/definitions/Validation"
          },
          "type": "array",
          "uniqueItems": true
        },
        "verified": {
          "type": "boolean"
        },
        "verifiedPlatforms": {
          "description": "Verified platforms for the version",
          "items": {
            "description": "Verified platforms for the version",
            "type": "string"
          },
          "type": "array"
        },
        "verifiedSource": {
          "type": "string"
        },
        "verifiedSources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "versionEditor": {
          "$ref": "#/definitions/User"
        },
        "versionMetadata": {
          "$ref": "#/definitions/VersionMetadata"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "reference"
      ],
      "type": "object"
    },
    "VersionMetadata": {
      "properties": {
        "descriptorTypeVersions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "engineVersions": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "parsedInformationSet": {
          "items": {
            "$ref": "#/definitions/ParsedInformation"
          },
          "type": "array"
        },
        "publicAccessibleTestParameterFile": {
          "description": "Whether the version has everything needed to run without restricted access permissions",
          "type": "boolean"
        },
        "userIdToOrcidPutCode": {
          "additionalProperties": {
            "$ref": "#/definitions/OrcidPutCode"
          },
          "description": "The presence of the put code for a userid indicates the version was exported to ORCID for the corresponding Dockstore user.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "VersionTypeValidation": {
      "properties": {
        "message": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "valid": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "VersionVerifiedPlatform": {
      "properties": {
        "metadata": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "platformVersion": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "verified": {
          "type": "boolean"
        },
        "versionId": {
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "WebhookRepository": {
      "description": "The repository where the GitHub webhook event occurred",
      "properties": {
        "full_name": {
          "description": "Full name of the GitHub repository",
          "example": "dockstore/dockstore-ui2",
          "type": "string"
        }
      },
      "required": [
        "full_name"
      ],
      "type": "object"
    },
    "Workflow": {
      "description": "This describes one workflow in the dockstore",
      "discriminator": "type",
      "properties": {
        "aliases": {
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          },
          "type": "object"
        },
        "archived": {
          "type": "boolean"
        },
        "author": {
          "type": "string"
        },
        "authors": {
          "description": "Non-ORCID authors for the entry, retrieved from the default version",
          "items": {
            "$ref": "#/definitions/Author"
          },
          "readOnly": true,
          "type": "array",
          "uniqueItems": true
        },
        "checker_id": {
          "format": "int64",
          "type": "integer"
        },
        "conceptDoi": {
          "type": "string"
        },
        "dbCreateDate": {
          "format": "int64",
          "type": "integer"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "defaultTestParameterFilePath": {
          "type": "string"
        },
        "defaultVersion": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "descriptorType": {
          "enum": [
            "SMK",
            "CWL",
            "WDL",
            "gxformat2",
            "SWL",
            "NFL",
            "service",
            "jupyter"
          ],
          "type": "string"
        },
        "descriptorTypeSubclass": {
          "enum": [
            "docker-compose",
            "helm",
            "swarm",
            "kubernetes",
            "Python",
            "R",
            "Javascript",
            "Scala",
            "Julia",
            "other",
            "n/a"
          ],
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "entryType": {
          "$ref": "#/definitions/EntryType"
        },
        "entryTypeMetadata": {
          "$ref": "#/definitions/EntryTypeMetadata"
        },
        "forumUrl": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "full_workflow_path": {
          "type": "string"
        },
        "gitUrl": {
          "type": "string"
        },
        "has_checker": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "input_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "isChecker": {
          "type": "boolean"
        },
        "is_published": {
          "type": "boolean"
        },
        "labels": {
          "items": {
            "$ref": "#/definitions/Label"
          },
          "type": "array",
          "uniqueItems": true
        },
        "lastUpdated": {
          "format": "int64",
          "type": "integer"
        },
        "last_modified": {
          "format": "int32",
          "type": "integer"
        },
        "last_modified_date": {
          "format": "int64",
          "type": "integer"
        },
        "licenseInformation": {
          "$ref": "#/definitions/LicenseInformation"
        },
        "metadataFromEntry": {
          "$ref": "#/definitions/Workflow"
        },
        "metadataFromVersion": {
          "$ref": "#/definitions/Version"
        },
        "mode": {
          "enum": [
            "FULL",
            "STUB",
            "HOSTED",
            "DOCKSTORE_YML"
          ],
          "type": "string"
        },
        "orcidAuthors": {
          "description": "ORCID authors for the entry, retrieved from the default version",
          "items": {
            "$ref": "#/definitions/OrcidAuthor"
          },
          "readOnly": true,
          "type": "array",
          "uniqueItems": true
        },
        "organization": {
          "type": "string"
        },
        "output_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "path": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "sourceControl": {
          "enum": [
            "dockstore.org",
            "github.com",
            "bitbucket.org",
            "gitlab.com"
          ],
          "type": "string"
        },
        "source_control_provider": {
          "type": "string"
        },
        "starredUsers": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "topic": {
          "type": "string"
        },
        "topicAI": {
          "description": "Short description of the entry generated by AI",
          "maxLength": 150,
          "type": "string"
        },
        "topicAutomatic": {
          "description": "Short description of the entry gotten automatically",
          "maxLength": 150,
          "type": "string"
        },
        "topicId": {
          "format": "int64",
          "type": "integer"
        },
        "topicManual": {
          "description": "Short description of the entry manually updated",
          "maxLength": 150,
          "type": "string"
        },
        "topicSelection": {
          "description": "Which topic to display to the public users",
          "enum": [
            "AUTOMATIC",
            "MANUAL",
            "AI"
          ],
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "userIdToOrcidPutCode": {
          "additionalProperties": {
            "$ref": "#/definitions/OrcidPutCode"
          },
          "description": "The presence of the put code for a userid indicates the entry was exported to ORCID for the corresponding Dockstore user.",
          "type": "object"
        },
        "users": {
          "items": {
            "$ref": "#/definitions/User"
          },
          "type": "array",
          "uniqueItems": true
        },
        "workflowName": {
          "maxLength": 256,
          "minLength": 0,
          "type": "string"
        },
        "workflowVersions": {
          "items": {
            "$ref": "#/definitions/WorkflowVersion"
          },
          "type": "array",
          "uniqueItems": true
        },
        "workflow_path": {
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "WorkflowSubClass": {
      "enum": [
        "BIOWORKFLOW",
        "SERVICE",
        "APPTOOL",
        "NOTEBOOK"
      ],
      "type": "string"
    },
    "WorkflowVersion": {
      "description": "This describes one workflow version associated with a workflow.",
      "properties": {
        "aliases": {
          "additionalProperties": {
            "$ref": "#/definitions/Alias"
          },
          "type": "object"
        },
        "author": {
          "type": "string"
        },
        "authors": {
          "items": {
            "$ref": "#/definitions/Author"
          },
          "type": "array",
          "uniqueItems": true
        },
        "commitID": {
          "type": "string"
        },
        "dbUpdateDate": {
          "format": "int64",
          "type": "integer"
        },
        "descriptionSource": {
          "enum": [
            "README",
            "CUSTOM_README",
            "DESCRIPTOR"
          ],
          "type": "string"
        },
        "descriptorTypeVersionsFromSourceFiles": {
          "items": {
            "$ref": "#/definitions/SourceFile"
          },
          "type": "array",
          "uniqueItems": true
        },
        "dirtyBit": {
          "type": "boolean"
        },
        "doiStatus": {
          "enum": [
            "NOT_REQUESTED",
            "REQUESTED",
            "CREATED"
          ],
          "type": "string"
        },
        "doiURL": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "frozen": {
          "type": "boolean"
        },
        "hidden": {
          "type": "boolean"
        },
        "id": {
          "format": "int64",
          "type": "integer"
        },
        "images": {
          "items": {
            "$ref": "#/definitions/Image"
          },
          "type": "array",
          "uniqueItems": true
        },
        "input_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "kernelImagePath": {
          "description": "User-specified notebook kernel image reference",
          "type": "string"
        },
        "last_modified": {
          "format": "int64",
          "type": "integer"
        },
        "legacyVersion": {
          "type": "boolean"
        },
        "metricsByPlatform": {
          "additionalProperties": {
            "$ref": "#/definitions/Metrics"
          },
          "type": "object"
        },
        "name": {
          "description": "Implementation specific, can be a quay.io or docker hub tag name",
          "example": "latest",
          "type": "string"
        },
        "orcidAuthors": {
          "items": {
            "$ref": "#/definitions/OrcidAuthor"
          },
          "type": "array",
          "uniqueItems": true
        },
        "output_file_formats": {
          "items": {
            "$ref": "#/definitions/FileFormat"
          },
          "type": "array",
          "uniqueItems": true
        },
        "readMePath": {
          "type": "string"
        },
        "reference": {
          "description": "git commit/tag/branch",
          "example": "master",
          "type": "string"
        },
        "referenceType": {
          "enum": [
            "COMMIT",
            "TAG",
            "BRANCH",
            "NOT_APPLICABLE",
            "UNSET"
          ],
          "type": "string"
        },
        "synced": {
          "type": "boolean"
        },
        "userFiles": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "valid": {
          "type": "boolean"
        },
        "validations": {
          "items": {
            "$ref": "#/definitions/Validation"
          },
          "type": "array",
          "uniqueItems": true
        },
        "verified": {
          "type": "boolean"
        },
        "verifiedPlatforms": {
          "description": "Verified platforms for the version",
          "items": {
            "description": "Verified platforms for the version",
            "type": "string"
          },
          "type": "array"
        },
        "verifiedSource": {
          "type": "string"
        },
        "verifiedSources": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "versionEditor": {
          "$ref": "#/definitions/User"
        },
        "versionMetadata": {
          "$ref": "#/definitions/VersionMetadata"
        },
        "workflow_path": {
          "type": "string"
        },
        "workingDirectory": {
          "type": "string"
        }
      },
      "required": [
        "name",
        "reference"
      ],
      "type": "object"
    },
    "WorkflowVersionPathInfo": {
      "properties": {
        "entryType": {
          "$ref": "#/definitions/EntryType"
        },
        "entryTypeMetadata": {
          "$ref": "#/definitions/EntryTypeMetadata"
        },
        "fullWorkflowPath": {
          "description": "Dockstore path to workflow",
          "type": "string"
        },
        "tagName": {
          "description": "Name of workflow version tag",
          "type": "string"
        }
      },
      "type": "object"
    }
  },
  "securityDefinitions": {
    "BEARER": {
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "tags": [
    {
      "description": "Create, update list aliases for accessing entries",
      "name": "aliases"
    },
    {
      "description": "Operations on Dockstore categories",
      "name": "categories"
    },
    {
      "description": "Operations on Dockstore organizations",
      "name": "organizations"
    },
    {
      "description": "Needed for SmartAPI compatibility apparantly, might be cargo cult behaviour",
      "name": "NIHdatacommons"
    },
    {
      "description": "Interact with entries in Dockstore regardless of whether they are containers or workflows",
      "name": "entries"
    },
    {
      "description": "List and register entries in the dockstore (pairs of images + metadata (CWL and Dockerfile))",
      "name": "containers"
    },
    {
      "description": "List and modify tags for containers",
      "name": "containertags"
    },
    {
      "description": "A curated subset of resources proposed as a common standard for tool repositories. Implements TRS [1.0.0](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/1.0.0) and is considered final (not subject to change)",
      "name": "GA4GHV1"
    },
    {
      "description": "A curated subset of resources proposed as a common standard for tool repositories. Implements TRS [2.0.0-beta.2](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.0-beta.2) . Integrators are welcome to use these endpoints but they are subject to change based on community input.",
      "name": "GA4GHV20BETA"
    },
    {
      "description": "A curated subset of resources proposed as a common standard for tool repositories. Implements TRS [2.0.1](https://github.com/ga4gh/tool-registry-service-schemas/releases/tag/2.0.1).",
      "name": "GA4GHV20"
    },
    {
      "description": "Optional experimental extensions of the GA4GH API",
      "name": "extendedGA4GH"
    },
    {
      "description": "List, modify, refresh, and delete tokens for external services",
      "name": "tokens"
    },
    {
      "description": "List and register workflows in the dockstore (CWL, Nextflow, WDL)",
      "name": "workflows"
    },
    {
      "description": "Interactions with the Dockstore-support's ToolTester application",
      "name": "toolTester"
    },
    {
      "description": "List and modify notifications for users of Dockstore",
      "name": "curation"
    },
    {
      "description": "Created and modify hosted entries in the dockstore",
      "name": "hosted"
    },
    {
      "description": "List, modify, and manage end users of the dockstore",
      "name": "users"
    },
    {
      "description": "Information about Dockstore like RSS, sitemap, lists of dependencies, etc.",
      "name": "metadata"
    },
    {
      "description": "Query lambda events triggered by GitHub Apps",
      "name": "lambdaEvents"
    }
  ],
  "x-components": {}
}
